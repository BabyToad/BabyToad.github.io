var G=Object.defineProperty;var _=(o,e,t)=>e in o?G(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var l=(o,e,t)=>_(o,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();var g=(o=>(o.DRAW="draw",o.PLAY="play",o.SCORE="score",o.ROUND_END="round_end",o.CHECKPOINT="checkpoint",o.SHOP="shop",o.GAME_END="game_end",o))(g||{}),c=(o=>(o.HENCHMAN="henchman",o.LOCATION="location",o.CRIME="crime",o.GEAR="gear",o))(c||{}),u=(o=>(o.CITY="city",o.SCIENCE="science",o.NATURE="nature",o.OCCULT="occult",o.CHAOS="chaos",o))(u||{}),d=(o=>(o.GOON="goon",o.THUG="thug",o.ASSASSIN="assassin",o.HACKER="hacker",o.COMPANION="companion",o.SCIENTIST="scientist",o.WAREHOUSE="warehouse",o.LAB="lab",o.HIDEOUT="hideout",o.BASE="base",o.HEIST="heist",o.SABOTAGE="sabotage",o.INFILTRATION="infiltration",o.TERROR="terror",o.WEAPON="weapon",o.TOOL="tool",o.VEHICLE="vehicle",o.TECH="tech",o))(d||{});const I={id:"armed_goons",description:"Gives +3 to all Goons",type:"aura",targets:{tag:d.GOON},effect:{add:3}},P={id:"cyber_enhanced",description:"Gives +5 to all Hackers",type:"aura",targets:{tag:d.HACKER},effect:{add:5}},L={id:"quick_getaway",description:"Gives +2 to all Crimes",type:"aura",targets:{type:c.CRIME},effect:{add:2}},E={id:"henchman_network",description:"+2 for each other Henchman",type:"conditional",targets:{self:!0},condition:{requires:{type:c.HENCHMAN,count:1}},effect:{add:2,perCard:!0}},N={id:"perfect_target",description:"+5 if Location is present",type:"conditional",targets:{self:!0},condition:{requires:{type:c.LOCATION}},effect:{add:5}},D={id:"equipped_saboteur",description:"+3 for each Gear card",type:"conditional",targets:{self:!0},condition:{requires:{type:c.GEAR,count:1}},effect:{add:3,perCard:!0}},U={id:"weapon_researcher",description:"+5 for each Gear card",type:"conditional",targets:{self:!0},condition:{requires:{type:c.GEAR,count:1}},effect:{add:5,perCard:!0}},$={id:"pack_mentality",description:"+2 for each other Companion",type:"conditional",targets:{self:!0},condition:{requires:{tag:d.COMPANION,count:1}},effect:{add:2,perCard:!0}},V={id:"lazy_goon_persist",description:"Stays for 2 turns",type:"aura",targets:{self:!0},effect:{persistTurns:2}},F={id:"sustainable_researcher",description:"All Gear returns to hand",type:"aura",targets:{type:c.GEAR},effect:{returnToHand:!0}},q={id:"stray_cat_draw",description:"Draw 2 cards if no other Companions",type:"conditional",targets:{self:!0},condition:{requires:{tag:d.COMPANION,count:0}},effect:{drawCards:2}},Y={id:"good_boy_pack",description:"Next pack +1 card",type:"conditional",targets:{self:!0},effect:{modifyPacks:1}},W={id:"gear_amplifier",description:"Doubles all Gear effects",type:"multiplier",targets:{type:c.GEAR},effect:{multiply:2}},C={id:"strategic_location",description:"Doubles all Henchman scores",type:"multiplier",targets:{type:c.HENCHMAN},effect:{multiply:2}},M={id:"high_tech_lab",description:"Triples score of Tech gear",type:"multiplier",targets:{tag:d.TECH},effect:{multiply:3}},K={id:"strategic_planning",description:"+5 if played first",type:"conditional",targets:{self:!0},condition:{position:0},effect:{add:5}},w={id:"finishing_move",description:"+3 if played last",type:"conditional",targets:{self:!0},condition:{position:2},effect:{add:3}},S=[{id:"goon_1",name:"Street Goon",type:c.HENCHMAN,color:u.CITY,tags:[d.GOON],baseScore:2,description:"A basic thug for your schemes",rules:[E],rarity:"common",cost:1},{id:"goon_2",name:"Professional Goon",type:c.HENCHMAN,color:u.CITY,tags:[d.GOON],baseScore:3,description:"A more experienced street thug",rules:[E],rarity:"uncommon",cost:2},{id:"goon_3",name:"Elite Goon",type:c.HENCHMAN,color:u.CITY,tags:[d.GOON],baseScore:4,description:"The best muscle money can buy",rules:[E],rarity:"rare",cost:3},{id:"thug_1",name:"Heavy Thug",type:c.HENCHMAN,color:u.CITY,tags:[d.THUG],baseScore:3,description:"A strong enforcer for your operations",rules:[E],rarity:"common",cost:2},{id:"thug_2",name:"Brutal Thug",type:c.HENCHMAN,color:u.CITY,tags:[d.THUG],baseScore:4,description:"Intimidation specialist",rules:[E],rarity:"uncommon",cost:2},{id:"thug_3",name:"Demolition Thug",type:c.HENCHMAN,color:u.CHAOS,tags:[d.THUG],baseScore:4,description:"Specializes in making things go boom",rules:[E],rarity:"rare",cost:3},{id:"assassin_1",name:"Silent Assassin",type:c.HENCHMAN,color:u.CITY,tags:[d.ASSASSIN],baseScore:4,description:"A deadly operative for precision work",rules:[E],rarity:"uncommon",cost:3},{id:"assassin_2",name:"Master Assassin",type:c.HENCHMAN,color:u.CITY,tags:[d.ASSASSIN],baseScore:5,description:"Elite killer with no conscience",rules:[E],rarity:"rare",cost:4},{id:"hacker_1",name:"Cyber Hacker",type:c.HENCHMAN,color:u.SCIENCE,tags:[d.HACKER],baseScore:3,description:"A tech-savvy operative for digital crimes",rules:[E],rarity:"uncommon",cost:2},{id:"hacker_2",name:"Elite Hacker",type:c.HENCHMAN,color:u.SCIENCE,tags:[d.HACKER],baseScore:4,description:"Can break any system",rules:[E],rarity:"rare",cost:3},{id:"mastermind_1",name:"The Mastermind",type:c.HENCHMAN,color:u.CITY,tags:[d.THUG],baseScore:3,description:"Best when leading the operation",rules:[E,K],rarity:"rare",cost:3},{id:"wolf_1",name:"Wolf",type:c.HENCHMAN,color:u.NATURE,tags:[d.COMPANION],baseScore:3,description:"Doubles score for each other Companion",rules:[$],rarity:"common",cost:2},{id:"mad_scientist_1",name:"Mad Scientist",type:c.HENCHMAN,color:u.SCIENCE,tags:[d.SCIENTIST],baseScore:2,description:"Doubles the effect of all Gear on the board",rules:[W],rarity:"common",cost:2},{id:"weapon_researcher_1",name:"Weapon Researcher",type:c.HENCHMAN,color:u.SCIENCE,tags:[d.SCIENTIST],baseScore:2,description:"Gets +5 for every Gear on the board",rules:[U],rarity:"common",cost:2},{id:"lazy_goon_1",name:"Lazy Goon",type:c.HENCHMAN,color:u.CITY,tags:[d.GOON],baseScore:4,description:"Stays on the board for 2 turns",rules:[V],rarity:"common",cost:2},{id:"sustainable_researcher_1",name:"Sustainable Researcher",type:c.HENCHMAN,color:u.SCIENCE,tags:[d.SCIENTIST],baseScore:3,description:"All Gear returns to your hand",rules:[F],rarity:"uncommon",cost:3},{id:"stray_cat_1",name:"Stray Cat",type:c.HENCHMAN,color:u.NATURE,tags:[d.COMPANION],baseScore:6,description:"Draw 2 cards if no other Companions",rules:[q],rarity:"uncommon",cost:3},{id:"good_boy_1",name:"Good Boy",type:c.HENCHMAN,color:u.NATURE,tags:[d.COMPANION],baseScore:5,description:"Next booster pack has +1 card",rules:[Y],rarity:"uncommon",cost:3},{id:"warehouse_1",name:"Abandoned Warehouse",type:c.LOCATION,color:u.CITY,tags:[d.WAREHOUSE],baseScore:1,description:"Perfect hideout - doubles henchman effectiveness",rules:[C],rarity:"common",cost:1},{id:"warehouse_2",name:"Secure Warehouse",type:c.LOCATION,color:u.CITY,tags:[d.WAREHOUSE],baseScore:2,description:"Well-protected storage - doubles henchman effectiveness",rules:[C],rarity:"uncommon",cost:2},{id:"warehouse_3",name:"Port Warehouse",type:c.LOCATION,color:u.CITY,tags:[d.WAREHOUSE],baseScore:2,description:"Strategic docks location - doubles henchman effectiveness",rules:[C],rarity:"uncommon",cost:2},{id:"lab_1",name:"Secret Lab",type:c.LOCATION,color:u.SCIENCE,tags:[d.LAB],baseScore:2,description:"High-tech facility - triples tech gear power",rules:[M],rarity:"uncommon",cost:2},{id:"lab_2",name:"Advanced Research Lab",type:c.LOCATION,color:u.SCIENCE,tags:[d.LAB],baseScore:3,description:"Cutting-edge technology - triples tech gear power",rules:[M],rarity:"rare",cost:3},{id:"hideout_1",name:"Safe House",type:c.LOCATION,color:u.CITY,tags:[d.HIDEOUT],baseScore:1,description:"A secure place to plan operations",rules:[C],rarity:"common",cost:1},{id:"hideout_2",name:"Fortified Hideout",type:c.LOCATION,color:u.CITY,tags:[d.HIDEOUT],baseScore:2,description:"Nearly impregnable stronghold",rules:[C],rarity:"uncommon",cost:2},{id:"hideout_3",name:"Penthouse Hideout",type:c.LOCATION,color:u.CITY,tags:[d.HIDEOUT],baseScore:3,description:"Luxury base with great city views",rules:[C],rarity:"rare",cost:3},{id:"base_1",name:"Underground Base",type:c.LOCATION,color:u.CITY,tags:[d.BASE],baseScore:3,description:"Secure headquarters - doubles henchman effectiveness",rules:[C],rarity:"rare",cost:4},{id:"base_2",name:"Command Center",type:c.LOCATION,color:u.CITY,tags:[d.BASE],baseScore:4,description:"Central hub - doubles henchman effectiveness",rules:[C],rarity:"legendary",cost:5},{id:"heist_1",name:"Bank Heist",type:c.CRIME,color:u.CITY,tags:[d.HEIST],baseScore:8,description:"Classic money-grabbing operation",rules:[N],rarity:"common",cost:2},{id:"heist_2",name:"Casino Heist",type:c.CRIME,color:u.CITY,tags:[d.HEIST],baseScore:10,description:"Hit the jackpot, literally",rules:[N],rarity:"uncommon",cost:3},{id:"heist_3",name:"Museum Heist",type:c.CRIME,color:u.CITY,tags:[d.HEIST],baseScore:12,description:"Steal priceless artifacts",rules:[N],rarity:"rare",cost:4},{id:"heist_4",name:"Armored Car Heist",type:c.CRIME,color:u.CITY,tags:[d.HEIST],baseScore:9,description:"Rob money in transit",rules:[N],rarity:"common",cost:2},{id:"sabotage_1",name:"Industrial Sabotage",type:c.CRIME,color:u.CHAOS,tags:[d.SABOTAGE],baseScore:9,description:"Disrupt enemy operations",rules:[D],rarity:"common",cost:2},{id:"sabotage_2",name:"Data Center Sabotage",type:c.CRIME,color:u.SCIENCE,tags:[d.SABOTAGE],baseScore:11,description:"Bring down their digital infrastructure",rules:[D],rarity:"uncommon",cost:3},{id:"infiltration_1",name:"Corporate Infiltration",type:c.CRIME,color:u.CITY,tags:[d.INFILTRATION],baseScore:10,description:"Infiltrate and gather intelligence",rules:[],rarity:"uncommon",cost:3},{id:"infiltration_2",name:"Government Infiltration",type:c.CRIME,color:u.CITY,tags:[d.INFILTRATION],baseScore:12,description:"Access classified information",rules:[],rarity:"rare",cost:4},{id:"terror_1",name:"Intimidation Campaign",type:c.CRIME,color:u.CHAOS,tags:[d.TERROR],baseScore:8,description:"Spread fear through the city",rules:[w],rarity:"common",cost:2},{id:"terror_2",name:"Citywide Terror",type:c.CRIME,color:u.CHAOS,tags:[d.TERROR],baseScore:11,description:"Paralyze the entire city with fear",rules:[w],rarity:"rare",cost:4},{id:"baseball_bat",name:"Baseball Bat",type:c.GEAR,color:u.CITY,tags:[d.WEAPON],baseScore:1,description:"Simple but effective - arms your goons",rules:[I],rarity:"common",cost:1},{id:"knife",name:"Combat Knife",type:c.GEAR,color:u.CITY,tags:[d.WEAPON],baseScore:2,description:"Silent and deadly - arms your goons",rules:[I],rarity:"common",cost:1},{id:"pistol",name:"Pistol",type:c.GEAR,color:u.CITY,tags:[d.WEAPON],baseScore:3,description:"Standard criminal firearm - arms your goons",rules:[I],rarity:"uncommon",cost:2},{id:"rifle",name:"Assault Rifle",type:c.GEAR,color:u.CHAOS,tags:[d.WEAPON],baseScore:5,description:"Military-grade weaponry - arms your goons",rules:[I],rarity:"rare",cost:3},{id:"crowbar",name:"Crowbar",type:c.GEAR,color:u.CITY,tags:[d.TOOL],baseScore:2,description:"Perfect for breaking and entering",rules:[],rarity:"common",cost:1},{id:"lockpicks",name:"Lockpick Set",type:c.GEAR,color:u.CITY,tags:[d.TOOL],baseScore:3,description:"Silent entry specialist tools",rules:[],rarity:"uncommon",cost:2},{id:"explosives",name:"Explosives",type:c.GEAR,color:u.CHAOS,tags:[d.TOOL],baseScore:4,description:"When subtlety fails",rules:[],rarity:"rare",cost:3},{id:"getaway_car",name:"Getaway Car",type:c.GEAR,color:u.CITY,tags:[d.VEHICLE],baseScore:3,description:"Fast escape - boosts crime scores",rules:[L],rarity:"uncommon",cost:2},{id:"motorcycle",name:"Sport Motorcycle",type:c.GEAR,color:u.CITY,tags:[d.VEHICLE],baseScore:2,description:"Quick and agile - boosts crime scores",rules:[L],rarity:"common",cost:1},{id:"helicopter",name:"Helicopter",type:c.GEAR,color:u.CITY,tags:[d.VEHICLE],baseScore:5,description:"Ultimate escape - boosts crime scores",rules:[L],rarity:"legendary",cost:4},{id:"hacking_rig",name:"Hacking Rig",type:c.GEAR,color:u.SCIENCE,tags:[d.TECH],baseScore:4,description:"Advanced computer setup - empowers hackers",rules:[P],rarity:"uncommon",cost:3},{id:"surveillance_kit",name:"Surveillance Kit",type:c.GEAR,color:u.SCIENCE,tags:[d.TECH],baseScore:3,description:"Keep tabs on your targets - empowers hackers",rules:[P],rarity:"uncommon",cost:2}],z={enabled:!0,frequency:2,startRound:2},X={0:[{flavorText:"LORD VEXOR demands more MINIONS!",rule:{id:"vexor_henchmen",description:"All HENCHMEN get +3",type:"aura",targets:{type:c.HENCHMAN},effect:{add:3}}},{flavorText:"LORD VEXOR expects OBEDIENCE!",rule:{id:"vexor_goons",description:"All GOONS get +5",type:"aura",targets:{tag:d.GOON},effect:{add:5}}}],1:[{flavorText:"DR. MALICE demands SCIENCE!",rule:{id:"malice_science",description:"All SCIENCE cards get +4",type:"aura",targets:{color:u.SCIENCE},effect:{add:4}}},{flavorText:"DR. MALICE requires proper EQUIPMENT!",rule:{id:"malice_gear",description:"All GEAR gets +3",type:"aura",targets:{type:c.GEAR},effect:{add:3}}}],2:[{flavorText:"BARON BLACKGOLD demands PROFIT!",rule:{id:"blackgold_crime",description:"All CRIMES get +4",type:"aura",targets:{type:c.CRIME},effect:{add:4}}},{flavorText:"BARON BLACKGOLD expects a HEIST!",rule:{id:"blackgold_heist",description:"All HEISTS get +6",type:"aura",targets:{tag:d.HEIST},effect:{add:6}}}],3:[{flavorText:"NIGHTSHADE appreciates SUBTLETY...",rule:{id:"nightshade_infiltration",description:"All INFILTRATIONS get +5",type:"aura",targets:{tag:d.INFILTRATION},effect:{add:5}}},{flavorText:"NIGHTSHADE values the OCCULT...",rule:{id:"nightshade_occult",description:"All OCCULT cards get +4",type:"aura",targets:{color:u.OCCULT},effect:{add:4}}}],4:[{flavorText:"MADAME MAYHEM demands MAYHEM!",rule:{id:"mayhem_weapons",description:"All WEAPONS get +5",type:"aura",targets:{tag:d.WEAPON},effect:{add:5}}},{flavorText:"MADAME MAYHEM craves CHAOS!",rule:{id:"mayhem_chaos",description:"All CHAOS cards get +4",type:"aura",targets:{color:u.CHAOS},effect:{add:4}}},{flavorText:"MADAME MAYHEM expects TERROR!",rule:{id:"mayhem_terror",description:"All TERROR gets +6",type:"aura",targets:{tag:d.TERROR},effect:{add:6}}}]};function j(o){const e=X[o];return!e||e.length===0?null:e[Math.floor(Math.random()*e.length)]}const Q={common:5,uncommon:10,rare:20,legendary:50};class J{getDuplicateGroups(e){const t=new Map;e.forEach(s=>{const i=s.name;t.has(i)||t.set(i,[]),t.get(i).push(s)});const a=[];return t.forEach((s,i)=>{a.push({cardName:i,cards:[...s],count:s.length,canBurn:s.length>=3})}),a}canBurn(e,t){return e.filter(s=>s.name===t).length>=3}burnTriple(e,t){const a=e.filter(p=>p.name===t);if(a.length<3)return{success:!1,goldEarned:0,cardsRemoved:[]};const s=a.slice(0,3),i=[];s.forEach(p=>{const m=e.indexOf(p);m>-1&&i.push(e.splice(m,1)[0])});const r=s[0].rarity;return{success:!0,goldEarned:this.getRefundValue(r),cardsRemoved:i}}getRefundValue(e){return Q[e]||0}getUniqueCardNames(e){const t=new Set;return e.forEach(a=>t.add(a.name)),Array.from(t).sort()}getRarityDistribution(e){const t={common:0,uncommon:0,rare:0,legendary:0};return e.forEach(a=>{t[a.rarity]!==void 0&&t[a.rarity]++}),t}}const Z=[{id:"base",name:"Mystery Pack",cost:30,description:"3 random schemes! Last card has rare chance!",slots:[{rarities:[{rarity:"common",weight:1}]},{rarities:[{rarity:"common",weight:1}]},{rarities:[{rarity:"common",weight:70},{rarity:"uncommon",weight:20},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}]}]},{id:"deluxe",name:"Deluxe Pack",cost:60,description:"Better chances at rare schemes!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:40}]},{rarities:[{rarity:"uncommon",weight:1}]},{rarities:[{rarity:"uncommon",weight:50},{rarity:"rare",weight:35},{rarity:"legendary",weight:15}]}]}];class ee{constructor(e){l(this,"configs");l(this,"rarityBoosts");this.configs=new Map,this.rarityBoosts=new Map,(e||Z).forEach(a=>{this.configs.set(a.id,a)})}generate(e){const t=this.configs.get(e);if(!t)throw new Error(`Unknown pack type: ${e}`);const a=t.slots.map((i,r)=>this.rollCard(i,r)),s={packType:t.id,cards:a,cost:t.cost};return this.rarityBoosts.clear(),s}rollCard(e,t){const a=this.applyBoost(e.rarities,t),s=this.weightedRandom(a);let i=S.filter(r=>r.rarity===s);return e.typeFilter&&(i=i.filter(r=>r.type===e.typeFilter)),i.length===0&&(i=S),i[Math.floor(Math.random()*i.length)]}weightedRandom(e){const t=e.reduce((s,i)=>s+i.weight,0);let a=Math.random()*t;for(const s of e)if(a-=s.weight,a<=0)return s.rarity;return e[0].rarity}applyBoost(e,t){const a=this.rarityBoosts.get(t);return!a||a===0?e:e.map(s=>({...s,weight:s.rarity==="legendary"?s.weight*a:s.weight}))}setRarityBoost(e,t){this.rarityBoosts.set(e,t)}getAvailablePackTypes(){return Array.from(this.configs.values())}getPackConfig(e){return this.configs.get(e)}registerPackType(e){this.configs.set(e.id,e)}}class te{constructor(e){l(this,"state");l(this,"eventListeners",[]);l(this,"deckManager");l(this,"packGenerator");this.deckManager=new J,this.packGenerator=new ee,this.state=this.initializeGame(e)}on(e){this.eventListeners.push(e)}off(e){const t=this.eventListeners.indexOf(e);t>-1&&this.eventListeners.splice(t,1)}emit(e){for(const t of this.eventListeners)t(e)}initializeGame(e){const t=e?[...e]:[...S];return this.shuffleDeck(t),{round:1,targetScore:75,hand:t.splice(0,6),playedCards:[],score:0,cumulativeScore:0,checkpoint:5,currency:0,playerDeck:[],deck:t,discardPile:[],playerStats:{totalScore:0,roundsWon:0,roundsLost:0,cardsPlayed:0,synergiesActivated:0},gamePhase:g.PLAY,cardPlayCounts:new Map,packBonusCards:0,permanentPackBonus:0,activeModifier:void 0,modifierConfig:{...z}}}shuffleDeck(e){for(let t=e.length-1;t>0;t--){const a=Math.floor(Math.random()*(t+1));[e[t],e[a]]=[e[a],e[t]]}}getState(){return{...this.state}}playCard(e,t){if(this.state.gamePhase!==g.PLAY||this.state.playedCards.length>=3)return!1;const a=this.state.hand.findIndex(n=>n.id===e);if(a===-1)return!1;const s=this.state.hand[a],i={card:s,position:t};this.state.hand.splice(a,1),this.state.playedCards.push(i),this.state.playerStats.cardsPlayed++;const r=this.state.cardPlayCounts.get(s.name)||0;return this.state.cardPlayCounts.set(s.name,r+1),this.emit({type:"card_played",card:s,position:t}),this.executeOnPlayEffects(i),!0}unplayCard(e){if(this.state.gamePhase!==g.PLAY)return!1;const t=this.state.playedCards.findIndex(s=>s.card.id===e);if(t===-1)return!1;const a=this.state.playedCards.splice(t,1)[0];return this.state.hand.push(a.card),this.emit({type:"card_unplayed",card:a.card}),!0}endTurn(){if(this.state.gamePhase!==g.PLAY)throw new Error("Cannot end turn in current phase");const e=this.calculateScore();if(this.state.score=e.score,this.state.cumulativeScore+=e.score,this.state.gamePhase=g.SCORE,this.state.playerStats.totalScore=this.state.cumulativeScore,this.state.playerStats.synergiesActivated+=e.synergiesActivated.length,this.clearModifier(),this.state.round>=this.state.checkpoint)if(e.success=this.state.cumulativeScore>=this.state.targetScore,e.success){this.state.playerStats.roundsWon++;const t=this.state.cumulativeScore-this.state.targetScore;this.state.currency+=t,this.state.gamePhase=g.CHECKPOINT}else this.state.playerStats.roundsLost++,this.state.gamePhase=g.GAME_END;return e}calculateScore(){const e=this.evaluateAllRules(),t=[];for(const s of this.state.playedCards)s.scoring={baseScore:s.card.baseScore,buffsReceived:[],buffsGiven:[],finalScore:s.card.baseScore};for(const s of e){const i=this.state.playedCards.find(n=>n.card.id===s.sourceCardId),r=this.state.playedCards.find(n=>n.card.id===s.targetCardId);i!=null&&i.scoring&&(r!=null&&r.scoring)&&(i.scoring.buffsGiven.push(s),r.scoring.buffsReceived.push(s),t.includes(s.description)||t.push(s.description))}for(const s of this.state.playedCards){if(!s.scoring)continue;let i=s.scoring.baseScore;for(const r of s.scoring.buffsReceived)r.isMultiplier||(i+=r.value);s.scoring.finalScore=i}for(const s of this.state.playedCards){if(!s.scoring)continue;let i=s.scoring.finalScore;for(const r of s.scoring.buffsReceived)r.isMultiplier&&(i=Math.floor(i*r.value));s.scoring.finalScore=i}const a=this.state.playedCards.reduce((s,i)=>{var r;return s+(((r=i.scoring)==null?void 0:r.finalScore)||i.card.baseScore)},0);return{score:a,targetScore:this.state.targetScore,success:!1,synergiesActivated:t,bonusScore:a-this.state.playedCards.reduce((s,i)=>s+i.card.baseScore,0)}}evaluateAllRules(){const e=[];let t=0;if(this.state.activeModifier){const a=this.state.activeModifier.rule,s=this.findModifierTargets(a);for(const i of s){const r=a.effect.add||a.effect.multiply||0;e.push({id:`buff_${t++}`,ruleId:a.id,sourceCardId:"council_modifier",targetCardId:i.card.id,description:`COUNCIL: ${a.description}`,value:r,isMultiplier:a.effect.multiply!==void 0,applied:!1})}}for(const a of this.state.playedCards)for(const s of a.card.rules){if(!this.checkRuleCondition(s,a))continue;const i=this.findRuleTargets(s,a);for(const r of i){const n=this.calculateRuleValue(s,a);e.push({id:`buff_${t++}`,ruleId:s.id,sourceCardId:a.card.id,targetCardId:r.card.id,description:s.description,value:n,isMultiplier:s.effect.multiply!==void 0,applied:!1})}}return e}findModifierTargets(e){var a;const t=[];for(const s of this.state.playedCards){let i=!1;e.targets.type!==void 0&&(i=s.card.type===e.targets.type),e.targets.color!==void 0&&(i=s.card.color===e.targets.color),e.targets.tag!==void 0&&(i=((a=s.card.tags)==null?void 0:a.includes(e.targets.tag))||!1),i&&t.push(s)}return t}checkRuleCondition(e,t){if(!e.condition)return!0;if(e.condition.position!==void 0&&t.position!==e.condition.position)return!1;if(e.condition.requires){const a=e.condition.requires,s=this.state.playedCards.filter(r=>!(r.card.id===t.card.id||a.type&&r.card.type!==a.type||a.color&&r.card.color!==a.color||a.tag&&!r.card.tags.includes(a.tag)||a.subtype&&r.card.subtype!==a.subtype)),i=a.count||1;if(s.length<i)return!1}return!0}findRuleTargets(e,t){const a=[];if(e.targets.self)return[t];for(const s of this.state.playedCards)s.card.id!==t.card.id&&(e.targets.type&&s.card.type!==e.targets.type||e.targets.color&&s.card.color!==e.targets.color||e.targets.tag&&!s.card.tags.includes(e.targets.tag)||e.targets.subtype&&s.card.subtype!==e.targets.subtype||e.targets.position!==void 0&&s.position!==e.targets.position||a.push(s));return a}calculateRuleValue(e,t){var s;let a=0;if(e.effect.add!==void 0?a=e.effect.add:e.effect.multiply!==void 0&&(a=e.effect.multiply),e.effect.perCard&&((s=e.condition)!=null&&s.requires)){const i=e.condition.requires,r=this.state.playedCards.filter(n=>!(n.card.id===t.card.id||i.type&&n.card.type!==i.type||i.color&&n.card.color!==i.color||i.tag&&!n.card.tags.includes(i.tag)||i.subtype&&n.card.subtype!==i.subtype));a*=r.length}return a}startNextRound(){if(this.state.gamePhase!==g.SCORE)throw new Error("Cannot start next round in current phase");const e=[],t=[],a=[];for(const r of this.state.playedCards)r.persistsForTurns!==void 0?(r.turnsInPlay=(r.turnsInPlay||0)+1,r.turnsInPlay<r.persistsForTurns?(e.push(r),this.emit({type:"card_persists",card:r.card,turnsRemaining:r.persistsForTurns-r.turnsInPlay})):r.returnToHand?t.push(r.card):a.push(r.card)):r.returnToHand?t.push(r.card):a.push(r.card);this.state.playedCards=e,this.state.hand.push(...t),this.state.discardPile.push(...a),t.length>0&&this.emit({type:"cards_returned_to_hand",cards:t}),this.state.score=0;const s=6-this.state.hand.length,i=[];for(let r=0;r<s&&this.state.deck.length>0;r++){const n=this.state.deck.pop();this.state.hand.push(n),i.push(n)}i.length>0&&this.emit({type:"cards_drawn",cards:i}),this.state.round++,this.state.gamePhase=g.PLAY,this.emit({type:"round_start",round:this.state.round}),this.generateModifier()}getHand(){return[...this.state.hand]}getPlayedCards(){return[...this.state.playedCards]}getCurrentScore(){return this.state.score}getTargetScore(){return this.state.targetScore}getRound(){return this.state.round}getCheckpoint(){return this.state.checkpoint}getCurrency(){return this.state.currency}getPlayerDeck(){return[...this.state.playerDeck]}getPlayerStats(){return{...this.state.playerStats}}enterCheckpoint(){if(this.state.gamePhase!==g.CHECKPOINT)throw new Error("Not at a checkpoint")}continueToNextCheckpoint(){if(this.state.gamePhase!==g.CHECKPOINT)throw new Error("Can only continue from checkpoint phase");this.state.checkpoint+=5,this.state.targetScore=Math.floor(this.state.targetScore*1.5),this.state.deck.length<10&&(this.state.deck.push(...this.state.discardPile),this.state.discardPile=[],this.shuffleDeck(this.state.deck)),this.state.gamePhase=g.SCORE}restartGame(){this.state=this.initializeGame()}getDeckDuplicates(){return this.deckManager.getDuplicateGroups(this.state.playerDeck)}getFullDeckGroups(){const e=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playedCards.map(t=>t.card)];return this.deckManager.getDuplicateGroups(e)}canBurnCard(e){return this.deckManager.canBurn(this.state.playerDeck,e)}burnTriple(e){const a=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playerDeck].filter(n=>n.name===e);if(a.length<3)return{success:!1,goldEarned:0};const s=this.deckManager.getRefundValue(a[0].rarity),i=a.slice(0,3),r=[];return i.forEach(n=>{let p=!1;const m=this.state.playerDeck.indexOf(n);if(m>-1&&(r.push(this.state.playerDeck.splice(m,1)[0]),p=!0),!p){const y=this.state.deck.indexOf(n);y>-1&&(r.push(this.state.deck.splice(y,1)[0]),p=!0)}if(!p){const y=this.state.hand.indexOf(n);y>-1&&(r.push(this.state.hand.splice(y,1)[0]),p=!0)}if(!p){const y=this.state.discardPile.indexOf(n);y>-1&&r.push(this.state.discardPile.splice(y,1)[0])}}),this.state.currency+=s,this.emit({type:"cards_burned",cards:r,goldEarned:s}),{success:!0,goldEarned:s}}getDeckRarityDistribution(){return this.deckManager.getRarityDistribution(this.state.playerDeck)}generatePack(e){const t=this.packGenerator.getPackConfig(e);if(!t||this.state.currency<t.cost)return null;this.state.currency-=t.cost;const a=this.packGenerator.generate(e);return a.cards.forEach(s=>{this.state.playerDeck.push({...s})}),this.emit({type:"pack_opened",cards:a.cards,packType:a.packType}),{cards:a.cards,cost:a.cost}}getAvailablePackTypes(){return this.packGenerator.getAvailablePackTypes()}buyBoosterPack(){const e=this.generatePack("base");return e?e.cards:null}mergePlayerDeckIntoGame(){const e=[...S,...this.state.playerDeck];this.shuffleDeck(e),this.state.deck=e,this.state.discardPile=[]}enterShop(){if(this.state.gamePhase!==g.CHECKPOINT)throw new Error("Can only enter shop from checkpoint phase");this.state.gamePhase=g.SHOP}exitShop(){if(this.state.gamePhase!==g.SHOP)throw new Error("Can only exit shop from shop phase");this.mergePlayerDeckIntoGame(),this.state.targetScore=Math.floor(this.state.targetScore*1.2),this.state.checkpoint+=5,this.state.cumulativeScore=0,this.state.gamePhase=g.SCORE}getActiveBuffs(){return this.state.playedCards.length===0?[]:this.evaluateAllRules()}generateModifier(){if(!this.state.modifierConfig.enabled)return;const{frequency:e,startRound:t}=this.state.modifierConfig;if(this.state.round<t||(this.state.round-t)%e!==0)return;const a=Math.floor(Math.random()*5),s=j(a);if(!s)return;const i={id:`modifier_${this.state.round}_${a}`,councilMemberId:a,round:this.state.round,flavorText:s.flavorText,rule:s.rule};this.state.activeModifier=i,this.emit({type:"modifier_generated",modifier:i})}clearModifier(){this.state.activeModifier&&(this.emit({type:"modifier_cleared",modifier:this.state.activeModifier}),this.state.activeModifier=void 0)}getActiveModifier(){return this.state.activeModifier}executeOnPlayEffects(e){for(const t of e.card.rules){const a=t.effect;a.persistTurns!==void 0&&(e.persistsForTurns=a.persistTurns,e.turnsInPlay=0,this.emit({type:"card_persists",card:e.card,turnsRemaining:a.persistTurns})),a.returnToHand&&(e.returnToHand=!0);const s=this.checkRuleCondition(t,e);if(a.drawCards&&s){const i=this.drawCards(a.drawCards);i.length>0&&(this.emit({type:"cards_drawn",cards:i,triggeredBy:e.card}),this.emit({type:"effect_triggered",card:e.card,effectDescription:`Draw ${i.length} card${i.length>1?"s":""}`,value:i.length}))}if(a.modifyPacks&&s&&(a.modifyPacksPermanent?(this.state.permanentPackBonus+=a.modifyPacks,this.emit({type:"pack_bonus_added",bonus:a.modifyPacks,triggeredBy:e.card,permanent:!0})):(this.state.packBonusCards+=a.modifyPacks,this.emit({type:"pack_bonus_added",bonus:a.modifyPacks,triggeredBy:e.card,permanent:!1})),this.emit({type:"effect_triggered",card:e.card,effectDescription:`Next pack +${a.modifyPacks} card${a.modifyPacks>1?"s":""}`,value:a.modifyPacks})),a.removeCards&&s){const i=this.removeCardsFromGame(a.removeCards);i.length>0&&(this.emit({type:"cards_removed",cards:i,reason:`Removed by ${e.card.name}`,triggeredBy:e.card}),this.emit({type:"effect_triggered",card:e.card,effectDescription:`Removed ${i.length} card${i.length>1?"s":""} from game`,value:i.length}))}}}drawCards(e){const t=[];for(let a=0;a<e;a++)if(this.state.deck.length===0&&this.state.discardPile.length>0&&(this.state.deck=[...this.state.discardPile],this.state.discardPile=[],this.shuffleDeck(this.state.deck)),this.state.deck.length>0){const s=this.state.deck.pop();this.state.hand.push(s),t.push(s)}return t}removeCardsFromGame(e){const t=[],a=n=>!(e.rarity&&n.rarity!==e.rarity||e.type&&n.type!==e.type),s=this.state.deck.filter(n=>a(n)?(t.push(n),!1):!0);this.state.deck=s;const i=this.state.hand.filter(n=>a(n)?(t.push(n),!1):!0);this.state.hand=i;const r=this.state.discardPile.filter(n=>a(n)?(t.push(n),!1):!0);return this.state.discardPile=r,t}}class v{constructor(e="div",t=""){l(this,"element");l(this,"children",[]);this.element=document.createElement(e),t&&(this.element.className=t)}getElement(){return this.element}addChild(e){this.children.push(e),this.element.appendChild(e.getElement())}removeChild(e){const t=this.children.indexOf(e);t>-1&&(this.children.splice(t,1),this.element.removeChild(e.getElement()))}clearChildren(){this.children.forEach(e=>{this.element.removeChild(e.getElement())}),this.children=[]}setVisible(e){this.element.style.display=e?"":"none"}addClass(e){this.element.classList.add(e)}removeClass(e){this.element.classList.remove(e)}setAttribute(e,t){this.element.setAttribute(e,t)}getAttribute(e){return this.element.getAttribute(e)}}class se extends v{constructor(){super("div","reaction-bubble");l(this,"duration",1500)}render(){}show(t,a){this.element.textContent=t.text,this.element.className="reaction-bubble",this.element.classList.add(`reaction-${t.type}`);const s=this.element.parentElement;if(s){const i=s.querySelectorAll(".council-seat");if(i[a]){const r=i[a],n=s.getBoundingClientRect(),p=r.getBoundingClientRect(),m=p.left-n.left+p.width/2;this.element.style.left=`${m}px`}}this.element.classList.add("visible"),setTimeout(()=>{this.element.classList.remove("visible")},this.duration)}}const k=[{id:0,name:"LORD VEXOR",title:"Ancient Overlord",backstory:"Conquered three dimensions before breakfast. Believes in traditional villainy and loyal minions.",personality:"Demanding, imperious, values hierarchy and power",preferences:[c.HENCHMAN],auraColor:"#9C27B0"},{id:1,name:"DR. MALICE",title:"Mad Scientist",backstory:"Eight PhDs, zero ethics. Perfected the doomsday device but still seeks the perfect scheme.",personality:"Analytical, critical, obsessed with methodology",preferences:[c.GEAR,c.LOCATION],auraColor:"#00E676"},{id:2,name:"BARON BLACKGOLD",title:"Corporate Villain",backstory:'Built an empire through "aggressive acquisitions." Every scheme is an investment.',personality:"Calculating, business-minded, always evaluating ROI",preferences:[c.CRIME],auraColor:"#FFD700"},{id:3,name:"NIGHTSHADE",title:"Master Infiltrator",backstory:"A ghost in the criminal underworld. Never been caught, never been seen. Appreciates elegance.",personality:"Patient, strategic, values subtlety and craftsmanship",preferences:[],auraColor:"#3F51B5"},{id:4,name:"MADAME MAYHEM",title:"Demolitions Expert",backstory:'Turned explosive expertise into criminal artistry. "Go big or go home" is her motto.',personality:"Direct, action-oriented, values spectacle and boldness",preferences:[],auraColor:"#FF6B00"}];function ae(o){return k.find(e=>e.id===o)}class ie extends v{constructor(){super("div","demand-banner"),this.element.style.display="none"}render(){}showModifier(e){const t=ae(e.councilMemberId);t&&(this.element.innerHTML=`
      <div class="demand-content" data-member-id="${t.id}">
        <div class="demand-header">
          <div class="demand-member-badge" style="border-color: ${t.auraColor}">
            ${t.name}
          </div>
          <div class="demand-flavor">${e.flavorText}</div>
        </div>

        <div class="demand-body">
          <div class="demand-requirement">
            <span class="requirement-label">EFFECT:</span>
            <span class="requirement-text">${e.rule.description}</span>
          </div>
        </div>
      </div>
    `,this.element.style.display="block",this.element.classList.add("active"))}hide(){this.element.classList.remove("active","demand-met"),this.element.style.display="none"}}class re extends v{constructor(){super("div","game-header");l(this,"roundValue",null);l(this,"checkpointValue",null);l(this,"roundScoreValue",null);l(this,"cumulativeScoreValue",null);l(this,"targetValue",null);l(this,"currencyValue",null);l(this,"scoreFill",null);l(this,"councilSeatsContainer",null);l(this,"reactionBubble");l(this,"demandBanner");this.reactionBubble=new se,this.demandBanner=new ie,this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="council-chamber">
        <!-- Left Column: Demand Banner -->
        <div class="header-left" id="header-left">
          <!-- Demand banner will be appended here -->
        </div>

        <!-- Center Column: Council Title & Seats -->
        <div class="header-center">
          <div class="council-title-banner">
            <div class="title-starburst">
              <h1 class="header-title">THE COUNCIL DECIDES</h1>
            </div>
            <div class="council-subtitle">League of Ultimate Evil - Scheme Approval Board</div>
          </div>

          <div class="council-seats">
            ${k.map(t=>`
              <div class="council-seat-container">
                <div class="council-seat" data-member-id="${t.id}"></div>
                <div class="council-nameplate">${t.name}</div>
              </div>
            `).join("")}
          </div>
        </div>

        <!-- Right Column: Metrics -->
        <div class="header-right">
          <div class="council-metrics">
            <div class="metric-box">
              <span class="metric-label">Audience</span>
              <span class="metric-value">
                <span id="round-value">1</span>/<span id="checkpoint-value">5</span>
              </span>
            </div>

            <div class="metric-box">
              <span class="metric-label">Villain Bucks</span>
              <span class="metric-value" id="currency-value">0</span>
            </div>

            <div class="metric-box">
              <span class="metric-label">This Scheme</span>
              <span class="metric-value" id="round-score-value">0</span>
            </div>

            <div class="metric-box approval-box">
              <span class="metric-label">Council Approval</span>
              <div class="approval-bar">
                <div class="approval-fill" id="score-fill" style="width: 0%"></div>
              </div>
              <span class="approval-text">
                <span id="cumulative-score-value">0</span> / <span id="target-value">75</span>
              </span>
            </div>
          </div>
        </div>
      </div>
    `,this.roundValue=this.element.querySelector("#round-value"),this.checkpointValue=this.element.querySelector("#checkpoint-value"),this.currencyValue=this.element.querySelector("#currency-value"),this.roundScoreValue=this.element.querySelector("#round-score-value"),this.cumulativeScoreValue=this.element.querySelector("#cumulative-score-value"),this.targetValue=this.element.querySelector("#target-value"),this.scoreFill=this.element.querySelector("#score-fill"),this.councilSeatsContainer=this.element.querySelector(".council-seats"),this.councilSeatsContainer&&(this.councilSeatsContainer.style.position="relative",this.councilSeatsContainer.appendChild(this.reactionBubble.getElement()))}render(){}updateRound(t,a){this.roundValue&&(this.roundValue.textContent=t.toString()),this.checkpointValue&&(this.checkpointValue.textContent=a.toString())}updateScore(t,a,s){if(this.roundScoreValue&&(this.roundScoreValue.textContent=t.toString()),this.cumulativeScoreValue&&(this.cumulativeScoreValue.textContent=a.toString()),this.targetValue&&(this.targetValue.textContent=s.toString()),this.scoreFill){const i=Math.min(100,a/s*100);this.scoreFill.style.width=`${i}%`}}updateCurrency(t){this.currencyValue&&(this.currencyValue.textContent=t.toString())}showReaction(t){const a=Math.floor(Math.random()*5);this.reactionBubble.show(t,a)}showModifier(t){this.demandBanner.showModifier(t)}hideModifier(){this.demandBanner.hide()}setupDemandBanner(){const t=document.getElementById("header-left");t&&t.appendChild(this.demandBanner.getElement())}}var f=(o=>(o.DEFAULT="default",o.HOVER="hover",o.SELECTED="selected",o.PLAYABLE="playable",o.DISABLED="disabled",o.BUFFED="buffed",o.PLAYING="playing",o))(f||{});function x(o,e={}){const t=o.baseScore,a=e.finalScore??t,s=a-t;return{card:o,baseScore:t,finalScore:a,scoreChange:s,hasScoreChange:s!==0,buffs:e.buffs??[],buffsReceived:e.buffsReceived??[],buffsGiven:e.buffsGiven??[],uiState:e.uiState??"default",isPlayable:e.isPlayable??!1,isSelected:e.isSelected??!1,onClick:e.onClick,onHover:e.onHover}}class H{constructor(e){l(this,"container");l(this,"displayData");l(this,"scoreElement",null);l(this,"badgeContainer",null);this.displayData=e,this.container=this.createCardElement()}createCardElement(){const e=this.displayData.card,t=document.createElement("div");t.className=this.getCardClasses(),t.setAttribute("data-card-id",e.id),t.setAttribute("data-color",e.color),t.setAttribute("data-type",e.type),t.setAttribute("data-rarity",e.rarity);const a=this.createColorBand();t.appendChild(a);const s=this.createBody();if(t.appendChild(s),this.displayData.buffsReceived.length>0){const i=this.createBuffBadges();this.badgeContainer=i,t.appendChild(i)}return t}createColorBand(){const e=document.createElement("div");e.className="card-color-band";const t=document.createElement("div");return t.className="card-type-badge",t.textContent=this.displayData.card.type.toUpperCase(),e.appendChild(t),e}createBody(){const e=document.createElement("div");e.className="card-body";const t=document.createElement("div");t.className="card-name",t.textContent=this.displayData.card.name,e.appendChild(t);const a=this.createScoreDisplay();if(this.scoreElement=a,e.appendChild(a),this.displayData.card.rules.length>0){const s=this.createRulesSection();e.appendChild(s)}return e}createScoreDisplay(){const e=document.createElement("div");if(e.className="card-score-container",this.displayData.hasScoreChange){e.classList.add("card-score-buffed");const t=document.createElement("div");t.className="card-score-final",t.textContent=this.displayData.finalScore.toString(),e.appendChild(t);const a=document.createElement("div");a.className="card-score-change",a.textContent=`+${this.displayData.scoreChange}`,e.appendChild(a);const s=document.createElement("div");s.className="card-score-base",s.textContent=this.displayData.baseScore.toString(),e.appendChild(s)}else{const t=document.createElement("div");t.className="card-score",t.textContent=this.displayData.baseScore.toString(),e.appendChild(t)}return e}createRulesSection(){const e=document.createElement("div");return e.className="card-rules",this.displayData.card.rules.forEach(t=>{const a=document.createElement("div");a.className="rule-item",a.textContent=t.description,e.appendChild(a)}),e}createBuffBadges(){const e=document.createElement("div");return e.className="buff-badges",this.displayData.buffsReceived.forEach(t=>{const a=document.createElement("div");a.className=`buff-badge ${t.isMultiplier?"multiplier":"additive"}`,a.textContent=t.isMultiplier?`×${t.value}`:`+${t.value}`,a.title=t.description,e.appendChild(a)}),e}getCardClasses(){const e=["card"],t=this.displayData.uiState;return t!==f.DEFAULT&&e.push(`card-${t}`),this.displayData.buffsReceived.length>0&&e.push("card-buffed"),this.displayData.buffsGiven.length>0&&e.push("card-source"),this.displayData.isPlayable&&e.push("card-playable"),this.displayData.isSelected&&e.push("card-selected"),e.join(" ")}update(e){const t=this.displayData;this.displayData=e,(t.uiState!==e.uiState||t.buffsReceived.length!==e.buffsReceived.length||t.buffsGiven.length!==e.buffsGiven.length)&&(this.container.className=this.getCardClasses()),(t.finalScore!==e.finalScore||t.hasScoreChange!==e.hasScoreChange)&&this.updateScore(),t.buffsReceived.length!==e.buffsReceived.length&&this.updateBadges()}updateScore(){if(!this.scoreElement)return;const e=this.scoreElement.parentElement;if(e){const t=this.createScoreDisplay();e.replaceChild(t,this.scoreElement),this.scoreElement=t}}updateBadges(){if(this.badgeContainer&&(this.badgeContainer.remove(),this.badgeContainer=null),this.displayData.buffsReceived.length>0){const e=this.createBuffBadges();this.badgeContainer=e,this.container.appendChild(e)}}getElement(){return this.container}}class A{constructor(e){l(this,"view");l(this,"displayData");this.displayData=e,this.view=new H(e),this.attachEventListeners()}static fromCard(e,t){const a=x(e,{onClick:t});return new A(a)}attachEventListeners(){const e=this.view.getElement();this.displayData.onClick&&e.addEventListener("click",()=>{this.displayData.onClick(this.displayData.card)}),e.addEventListener("mouseenter",()=>{this.handleMouseEnter()}),e.addEventListener("mouseleave",()=>{this.handleMouseLeave()})}handleMouseEnter(){this.displayData.uiState!==f.DISABLED&&(this.updateState(f.HOVER),this.displayData.onHover&&this.displayData.onHover(this.displayData.card))}handleMouseLeave(){this.displayData.isSelected?this.updateState(f.SELECTED):this.displayData.buffsReceived.length>0||this.displayData.buffsGiven.length>0?this.updateState(f.BUFFED):this.displayData.isPlayable?this.updateState(f.PLAYABLE):this.updateState(f.DEFAULT)}updateState(e){this.displayData.uiState!==e&&(this.displayData.uiState=e,this.view.update(this.displayData))}updateDisplayData(e){this.displayData={...this.displayData,...e},e.finalScore!==void 0&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0),this.view.update(this.displayData)}setPlayable(e){this.updateDisplayData({isPlayable:e}),e&&this.displayData.uiState===f.DEFAULT&&this.updateState(f.PLAYABLE)}setSelected(e){this.updateDisplayData({isSelected:e}),this.updateState(e?f.SELECTED:f.DEFAULT)}setBuffs(e,t){this.updateDisplayData({buffsReceived:e,buffsGiven:t}),(e.length>0||t.length>0)&&this.updateState(f.BUFFED)}getCard(){return this.displayData.card}getElement(){return this.view.getElement()}getDisplayData(){return{...this.displayData}}updateCard(e){this.displayData.card=e,this.displayData.baseScore=e.baseScore,this.displayData.finalScore!==this.displayData.baseScore&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0);const t=this.view.getElement(),a=t.parentElement,s=new H(this.displayData);a&&a.replaceChild(s.getElement(),t),this.view=s,this.attachEventListeners()}}class ne extends v{constructor(){super("div","play-area");l(this,"cardsContainer");l(this,"cardComponents",new Map);l(this,"onCardClick");this.initializeElements()}setOnCardClick(t){this.onCardClick=t}initializeElements(){this.element.innerHTML=`
      <div class="play-area-header">
        <h3 class="area-title">Presenting to Council</h3>
        <div class="scheme-counter">
          <span id="played-count">0</span>/3 Schemes Presented
        </div>
      </div>
      <div class="play-area-cards" id="play-cards">
        <!-- Card slots will be rendered here -->
      </div>
    `,this.cardsContainer=this.element.querySelector("#play-cards")}render(){}updatePlayedCards(t,a=[]){this.cardsContainer.innerHTML="",this.cardComponents.clear();const s=[];for(let r=0;r<3;r++){const n=document.createElement("div");n.className="scheme-slot";const p=document.createElement("div");p.className="slot-badge",p.textContent=`SCHEME #${r+1}`,n.appendChild(p);const m=document.createElement("div");m.className="slot-empty",m.textContent="AWAITING SCHEME",n.appendChild(m),s.push(n)}t.forEach((r,n)=>{var p;if(n<3){const m=s[n].querySelector(".slot-empty");m&&m.remove(),s[n].classList.add("active");const y=a.filter(R=>R.targetCardId===r.card.id),b=a.filter(R=>R.sourceCardId===r.card.id),T=((p=r.scoring)==null?void 0:p.finalScore)??r.card.baseScore,B=x(r.card,{finalScore:T,buffsReceived:y,buffsGiven:b,onClick:this.onCardClick}),O=new A(B);O.setPlayable(!0),this.cardComponents.set(r.card.id,O),s[n].appendChild(O.getElement())}}),s.forEach(r=>this.cardsContainer.appendChild(r));const i=this.element.querySelector("#played-count");i.textContent=t.length.toString()}addCard(t){const a=A.fromCard(t);this.cardComponents.set(t.id,a),this.cardsContainer.appendChild(a.getElement()),this.updateCount()}removeCard(t){const a=this.cardComponents.get(t);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(t),this.updateCount())}clearCards(){this.cardsContainer.innerHTML="",this.cardComponents.clear(),this.updateCount()}updateCount(){const t=this.element.querySelector("#played-count");t.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}}class oe extends v{constructor(){super("div","hand-area");l(this,"cardsContainer");l(this,"cardComponents",new Map);l(this,"onCardClick");this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="hand-area-header">
        <h3 class="area-title">Your Scheme Portfolio</h3>
        <div class="card-counter">
          <span id="hand-count">0</span>/6 Schemes
        </div>
      </div>
      <div class="hand-cards" id="hand-cards"></div>
    `,this.cardsContainer=this.element.querySelector("#hand-cards")}render(){}setOnCardClick(t){this.onCardClick=t}updateHand(t){this.cardsContainer.innerHTML="",this.cardComponents.clear(),t.forEach(a=>{const s=A.fromCard(a,this.onCardClick);s.setPlayable(!0),this.cardComponents.set(a.id,s),this.cardsContainer.appendChild(s.getElement())}),this.updateCount()}addCard(t){const a=A.fromCard(t,this.onCardClick);a.setPlayable(!0),this.cardComponents.set(t.id,a),this.cardsContainer.appendChild(a.getElement()),this.updateCount()}removeCard(t){const a=this.cardComponents.get(t);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(t),this.updateCount())}setCardPlayable(t,a){const s=this.cardComponents.get(t);s&&s.setPlayable(a)}setAllCardsPlayable(t){this.cardComponents.forEach(a=>{a.setPlayable(t)})}updateCount(){const t=this.element.querySelector("#hand-count");t.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}}class ce extends v{constructor(){super("div","game-controls");l(this,"endTurnButton");l(this,"nextRoundButton");l(this,"messageElement");this.initializeElements(),this.setupEventListeners()}initializeElements(){this.element.innerHTML=`
      <div class="controls-left">
        <button id="end-turn-btn" class="btn btn-primary">PRESENT SCHEMES!</button>
        <button id="next-round-btn" class="btn btn-success" disabled>NEXT AUDIENCE</button>
      </div>
      <div class="controls-right">
        <div class="message-display" id="message-display"></div>
      </div>
    `,this.endTurnButton=this.element.querySelector("#end-turn-btn"),this.nextRoundButton=this.element.querySelector("#next-round-btn"),this.messageElement=this.element.querySelector("#message-display")}setupEventListeners(){}render(){}setOnEndTurn(t){this.endTurnButton.addEventListener("click",t)}setOnNextRound(t){this.nextRoundButton.addEventListener("click",t)}updateButtonStates(t,a){switch(t){case"play":this.endTurnButton.disabled=a===0,this.nextRoundButton.disabled=!0;break;case"score":case"checkpoint":case"game_end":this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!1;break;default:this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!0}}showMessage(t,a="info"){this.messageElement.textContent=t,this.messageElement.className=`message-display show message-${a}`,setTimeout(()=>{this.messageElement.className="message-display"},3e3)}setEndTurnButtonEnabled(t){this.endTurnButton.disabled=!t}setNextRoundButtonEnabled(t){this.nextRoundButton.disabled=!t}}class de extends v{constructor(){super("div","game-layout");l(this,"header");l(this,"playArea");l(this,"handArea");l(this,"controls");this.header=new re,this.playArea=new ne,this.handArea=new oe,this.controls=new ce,this.setupLayout()}setupLayout(){const t=document.createElement("div");t.className="layout-container",t.appendChild(this.header.getElement()),t.appendChild(this.playArea.getElement()),t.appendChild(this.handArea.getElement()),t.appendChild(this.controls.getElement()),this.element.appendChild(t)}render(){this.header.render(),this.playArea.render(),this.handArea.render(),this.controls.render()}getHeader(){return this.header}getPlayArea(){return this.playArea}getHandArea(){return this.handArea}getControls(){return this.controls}getGameArea(){return{getPlayArea:()=>this.playArea,getHandArea:()=>this.handArea}}getStats(){return this.controls}}class le extends v{constructor(){super("div","toast-container");l(this,"container");l(this,"activeToasts",new Set);this.setupContainer()}setupContainer(){this.element.style.cssText=`
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      z-index: 9000;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      pointer-events: none;
    `,this.container=this.element}show(t){const{message:a,type:s,duration:i=3e3}=t,r=document.createElement("div");r.className=`toast toast-${s}`,r.style.cssText=`
      pointer-events: auto;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    `,r.innerHTML=`
      <div class="toast-content">
        <div class="toast-icon">${this.getIcon(s)}</div>
        <div class="toast-message">${a}</div>
        <button class="toast-close">×</button>
      </div>
    `,this.container.appendChild(r),this.activeToasts.add(r);const n=r.querySelector(".toast-close");n&&n.addEventListener("click",()=>this.dismiss(r)),setTimeout(()=>{r.style.opacity="1",r.style.transform="translateX(0)"},50),i>0&&setTimeout(()=>{this.dismiss(r)},i)}getIcon(t){switch(t){case"success":return"✓";case"error":return"✗";case"info":return"ⓘ"}}dismiss(t){t.style.opacity="0",t.style.transform="translateX(100%)",setTimeout(()=>{t.parentElement&&t.remove(),this.activeToasts.delete(t)},300)}render(){}}class ue extends v{constructor(t){super("div","shop-layout");l(this,"gameEngine");l(this,"activeTab","deck");l(this,"onExitCallback");l(this,"toast");this.gameEngine=t,this.toast=new le,this.setupLayout(),this.element.appendChild(this.toast.getElement())}setupLayout(){this.element.innerHTML=`
      <!-- Merchant Header -->
      <div class="shop-header">
        <div class="merchant-banner">
          <div class="merchant-title">
            <h1 class="shop-title">BACK-ALLEY DEALS</h1>
            <div class="merchant-subtitle">Proprietor: Cut-Throat Iblis</div>
          </div>
          <div class="shop-currency">
            <span class="currency-label">ILL-GOTTEN GAINS</span>
            <span class="currency-value" id="shop-currency">0</span>
          </div>
        </div>

        <!-- Tab Navigation -->
        <div class="shop-tabs">
          <button class="shop-tab active" data-tab="deck">
            <span class="tab-label">YOUR STASH</span>
          </button>
          <button class="shop-tab" data-tab="packs">
            <span class="tab-label">THE GOODS</span>
          </button>
        </div>
      </div>

      <!-- Tab Content -->
      <div class="shop-content">
        <!-- Deck Tab -->
        <div class="shop-tab-panel active" data-panel="deck">
          <div class="deck-viewer">
            <div class="deck-header">
              <h2>Your Scheme Collection</h2>
              <div class="deck-stats" id="deck-stats"></div>
            </div>
            <div class="deck-cards" id="deck-cards">
              <!-- Cards will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Packs Tab -->
        <div class="shop-tab-panel" data-panel="packs">
          <div class="pack-shop">
            <div class="merchant-speech">
              <div class="speech-bubble">
                "GUARANTEED to ruin heroes! NO REFUNDS!"
              </div>
            </div>
            <div class="pack-list" id="pack-list">
              <!-- Pack options will be rendered here -->
            </div>
          </div>
        </div>
      </div>

      <!-- Footer Controls -->
      <div class="shop-footer">
        <button class="shop-exit-btn" id="shop-exit">
          RETURN TO COUNCIL CHAMBER
        </button>
      </div>
    `,this.attachEventListeners()}attachEventListeners(){this.element.querySelectorAll(".shop-tab").forEach(s=>{s.addEventListener("click",()=>{const i=s.getAttribute("data-tab");this.switchTab(i)})});const a=this.element.querySelector("#shop-exit");a&&a.addEventListener("click",()=>{var s;(s=this.onExitCallback)==null||s.call(this)})}switchTab(t){this.activeTab=t,this.element.querySelectorAll(".shop-tab").forEach(i=>{i.getAttribute("data-tab")===t?i.classList.add("active"):i.classList.remove("active")}),this.element.querySelectorAll(".shop-tab-panel").forEach(i=>{i.getAttribute("data-panel")===t?i.classList.add("active"):i.classList.remove("active")}),this.renderActiveTab()}render(){this.updateCurrency(),this.renderActiveTab()}renderActiveTab(){this.activeTab==="deck"?this.renderDeck():this.renderPackShop()}updateCurrency(){const t=this.element.querySelector("#shop-currency");if(t){const a=this.gameEngine.getState();t.textContent=a.currency.toString()}}renderDeck(){const t=this.element.querySelector("#deck-cards");if(!t)return;const a=this.gameEngine.getFullDeckGroups(),s=this.gameEngine.getDeckDuplicates(),i=this.mergeCardGroups(a,s);if(i.length===0){t.innerHTML='<div class="empty-deck">No schemes in your stash yet!<br>Buy some packs to get started.</div>';return}t.innerHTML=i.map(n=>{const p=n.cards[0];return`
        <div class="deck-card-group">
          <div class="stash-card-wrapper">
            ${this.renderStashCard(p)}
            <div class="card-overlay">
              <div class="card-count-badge">×${n.count}</div>
            </div>
          </div>
          ${n.canBurn?`
            <button class="burn-btn" data-card-name="${n.cardName}">
              🔥 SCRAP FOR ${this.getBurnValue(p)} BUCKS
            </button>
          `:`
            <div class="burn-disabled">Need 3 copies to scrap</div>
          `}
        </div>
      `}).join(""),t.querySelectorAll(".burn-btn").forEach(n=>{n.addEventListener("click",()=>{const p=n.getAttribute("data-card-name");p&&this.burnTriple(p)})}),this.updateDeckStats()}renderStashCard(t){return`
      <div class="card" data-color="${t.color}" data-type="${t.type}" data-rarity="${t.rarity}">
        <div class="card-color-band">
          <div class="card-type-badge">${t.type.toUpperCase()}</div>
        </div>
        <div class="card-body">
          <div class="card-name">${t.name}</div>
          <div class="card-score-container">
            <div class="card-score">${t.baseScore}</div>
          </div>
          <div class="card-rules">
            ${t.rules.map(a=>`
              <div class="rule-item">${a.description}</div>
            `).join("")}
          </div>
        </div>
      </div>
    `}mergeCardGroups(t,a){const s=new Map;return t.forEach(i=>{s.set(i.cardName,{...i,inGame:i.count,inStash:0})}),a.forEach(i=>{if(s.has(i.cardName)){const r=s.get(i.cardName);r.cards=[...r.cards,...i.cards],r.count+=i.count,r.inStash=i.count}else s.set(i.cardName,{...i,inGame:0,inStash:i.count})}),s.forEach(i=>{i.canBurn=i.count>=3}),Array.from(s.values())}getBurnValue(t){return{common:5,uncommon:10,rare:20,legendary:50}[t.rarity]||5}updateDeckStats(){const t=this.element.querySelector("#deck-stats");if(!t)return;const a=this.gameEngine.getState(),s=this.gameEngine.getDeckRarityDistribution();t.innerHTML=`
      <span>Total: ${a.playerDeck.length}</span>
      <span>Common: ${s.common}</span>
      <span>Uncommon: ${s.uncommon}</span>
      <span>Rare: ${s.rare}</span>
      <span>Legendary: ${s.legendary}</span>
    `}renderPackShop(){const t=this.element.querySelector("#pack-list");if(!t)return;const a=this.gameEngine.getAvailablePackTypes(),s=this.gameEngine.getState();t.innerHTML=a.map(r=>{const n=s.currency>=r.cost;return`
        <div class="pack-card ${n?"":"disabled"}">
          <div class="pack-header">
            <h3 class="pack-name">${r.name}</h3>
            <div class="pack-cost">${r.cost} BUCKS</div>
          </div>
          <div class="pack-description">${r.description||""}</div>
          <button
            class="pack-buy-btn"
            data-pack-type="${r.id}"
            ${n?"":"disabled"}
          >
            ${n?"BUY NOW!":"TOO POOR!"}
          </button>
        </div>
      `}).join(""),t.querySelectorAll(".pack-buy-btn").forEach(r=>{r.addEventListener("click",()=>{const n=r.getAttribute("data-pack-type");n&&this.buyPack(n)})})}burnTriple(t){const a=this.gameEngine.burnTriple(t);a.success?(this.toast.show({message:`Scrapped ${t} for ${a.goldEarned} Villain Bucks!`,type:"success",duration:3e3}),this.render()):this.toast.show({message:`Cannot scrap ${t} - need 3 copies!`,type:"error",duration:3e3})}buyPack(t){const a=this.gameEngine.generatePack(t);if(a){const s=this.gameEngine.getAvailablePackTypes().find(n=>n.id===t),i=(s==null?void 0:s.name)||"Pack",r=a.cards.map(n=>n.name).join(", ");this.toast.show({message:`${i} opened! Got: ${r}`,type:"success",duration:5e3}),this.render()}else{const s=this.gameEngine.getAvailablePackTypes().find(r=>r.id===t),i=(s==null?void 0:s.cost)||0;this.toast.show({message:`Not enough Villain Bucks! Need ${i}, have ${this.gameEngine.getCurrency()}`,type:"error",duration:3e3})}}onExit(t){this.onExitCallback=t}}class he extends v{constructor(t){super("div","devtools-panel");l(this,"gameEngine");l(this,"isOpen",!1);l(this,"onStateChangeCallback");this.gameEngine=t,this.setupLayout(),this.attachEventListeners(),this.hide()}setupLayout(){this.element.innerHTML=`
      <div class="devtools-header">
        <div class="devtools-title">
          <span class="debug-badge">DEBUG</span>
          <span>Developer Tools</span>
        </div>
        <button class="devtools-close" id="devtools-close">×</button>
      </div>

      <div class="devtools-tabs">
        <button class="devtools-tab active" data-tab="currency">Currency</button>
        <button class="devtools-tab" data-tab="deck">Deck</button>
        <button class="devtools-tab" data-tab="game">Game State</button>
        <button class="devtools-tab" data-tab="info">Info</button>
      </div>

      <div class="devtools-content">
        <!-- Currency Tab -->
        <div class="devtools-tab-panel active" data-panel="currency">
          <h3>Currency Manipulation</h3>
          <div class="devtools-section">
            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="add-currency" data-amount="50">+50</button>
              <button class="devtools-btn" data-action="add-currency" data-amount="100">+100</button>
              <button class="devtools-btn" data-action="add-currency" data-amount="500">+500</button>
              <button class="devtools-btn" data-action="set-currency" data-amount="0">Reset to 0</button>
            </div>
            <div class="devtools-input-group">
              <input type="number" id="currency-input" placeholder="Exact amount" value="100" />
              <button class="devtools-btn" data-action="set-currency-input">Set</button>
            </div>
            <div class="devtools-info" id="current-currency">Current: 0</div>
          </div>
        </div>

        <!-- Deck Tab -->
        <div class="devtools-tab-panel" data-panel="deck">
          <h3>Deck Management</h3>
          <div class="devtools-section">
            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="add-random-cards" data-count="3">+3 Random Cards</button>
              <button class="devtools-btn" data-action="clear-deck">Clear Player Deck</button>
            </div>
            <div class="devtools-input-group">
              <select id="card-select">
                <option value="">Select a card to add...</option>
              </select>
              <button class="devtools-btn" data-action="add-selected-card">Add</button>
            </div>
            <div class="devtools-info" id="deck-info">Player deck: 0 cards</div>
          </div>
        </div>

        <!-- Game State Tab -->
        <div class="devtools-tab-panel" data-panel="game">
          <h3>Game State Control</h3>
          <div class="devtools-section">
            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="jump-checkpoint">Jump to Checkpoint (Round 5)</button>
              <button class="devtools-btn" data-action="force-shop">Force Shop Phase</button>
            </div>
            <div class="devtools-input-group">
              <label>Round:</label>
              <input type="number" id="round-input" min="1" value="1" />
              <button class="devtools-btn" data-action="set-round">Set</button>
            </div>
            <div class="devtools-input-group">
              <label>Target Score:</label>
              <input type="number" id="target-input" min="1" value="75" />
              <button class="devtools-btn" data-action="set-target">Set</button>
            </div>
            <div class="devtools-info" id="game-info">
              Round: 1 | Phase: play | Target: 75
            </div>
          </div>
        </div>

        <!-- Info Tab -->
        <div class="devtools-tab-panel" data-panel="info">
          <h3>Keyboard Shortcuts</h3>
          <div class="devtools-section">
            <div class="shortcut-list">
              <div class="shortcut-item">
                <kbd>\`</kbd>
                <span>Toggle DevTools</span>
              </div>
              <div class="shortcut-item">
                <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>
                <span>Toggle DevTools (alternative)</span>
              </div>
            </div>
            <div class="devtools-warning">
              ⚠️ DevTools are only available in development mode
            </div>
          </div>
        </div>
      </div>
    `,this.populateCardSelect()}populateCardSelect(){const t=this.element.querySelector("#card-select");t&&S.forEach(a=>{const s=document.createElement("option");s.value=a.id,s.textContent=`${a.name} (${a.type}, ${a.rarity})`,t.appendChild(s)})}attachEventListeners(){const t=this.element.querySelector("#devtools-close");t==null||t.addEventListener("click",()=>this.hide()),this.element.querySelectorAll(".devtools-tab").forEach(s=>{s.addEventListener("click",()=>{const i=s.getAttribute("data-tab");this.switchTab(i)})}),this.element.addEventListener("click",s=>{const i=s.target,r=i.getAttribute("data-action");r&&this.handleAction(r,i)}),document.addEventListener("keydown",s=>{s.key==="`"&&(s.preventDefault(),this.toggle()),s.ctrlKey&&s.shiftKey&&s.key==="D"&&(s.preventDefault(),this.toggle())})}switchTab(t){this.element.querySelectorAll(".devtools-tab").forEach(i=>{i.getAttribute("data-tab")===t?i.classList.add("active"):i.classList.remove("active")}),this.element.querySelectorAll(".devtools-tab-panel").forEach(i=>{i.getAttribute("data-panel")===t?i.classList.add("active"):i.classList.remove("active")}),this.updateInfo()}handleAction(t,a){var s;switch(t){case"add-currency":{const i=parseInt(a.getAttribute("data-amount")||"0");this.gameEngine.state.currency+=i;break}case"set-currency":{const i=parseInt(a.getAttribute("data-amount")||"0");this.gameEngine.state.currency=i;break}case"set-currency-input":{const i=this.element.querySelector("#currency-input"),r=parseInt(i.value||"0");this.gameEngine.state.currency=r;break}case"add-random-cards":{const i=parseInt(a.getAttribute("data-count")||"3");for(let r=0;r<i;r++){const n=S[Math.floor(Math.random()*S.length)];this.gameEngine.state.playerDeck.push({...n})}break}case"add-selected-card":{const r=this.element.querySelector("#card-select").value,n=S.find(p=>p.id===r);n&&this.gameEngine.state.playerDeck.push({...n});break}case"clear-deck":{this.gameEngine.state.playerDeck=[];break}case"jump-checkpoint":{this.gameEngine.state.round=5,this.gameEngine.state.cumulativeScore=this.gameEngine.state.targetScore;break}case"force-shop":{this.gameEngine.state.gamePhase="shop";break}case"set-round":{const i=this.element.querySelector("#round-input");this.gameEngine.state.round=parseInt(i.value||"1");break}case"set-target":{const i=this.element.querySelector("#target-input");this.gameEngine.state.targetScore=parseInt(i.value||"75");break}}this.updateInfo(),(s=this.onStateChangeCallback)==null||s.call(this)}updateInfo(){const t=this.gameEngine.getState(),a=this.element.querySelector("#current-currency");a&&(a.textContent=`Current: ${t.currency}`);const s=this.element.querySelector("#deck-info");s&&(s.textContent=`Player deck: ${t.playerDeck.length} cards`);const i=this.element.querySelector("#game-info");i&&(i.textContent=`Round: ${t.round} | Phase: ${t.gamePhase} | Target: ${t.targetScore}`);const r=this.element.querySelector("#round-input");r&&(r.value=t.round.toString());const n=this.element.querySelector("#target-input");n&&(n.value=t.targetScore.toString())}toggle(){this.isOpen?this.hide():this.show()}show(){this.isOpen=!0,this.element.classList.add("open"),this.updateInfo()}hide(){this.isOpen=!1,this.element.classList.remove("open")}onStateChange(t){this.onStateChangeCallback=t}render(){}}class pe{constructor(){l(this,"container");this.container=document.createElement("div"),this.container.className="comic-effects-container",document.body.appendChild(this.container)}show(e,t,a){const s=document.createElement("div");s.className="comic-effect",s.textContent=e,s.style.left=`${t}px`,s.style.top=`${a}px`,this.container.appendChild(s),setTimeout(()=>{s.classList.add("active")},10),setTimeout(()=>{s.remove()},1e3)}showRandom(e,t){const a=["POW!","BAM!","WHAM!","ZAP!","BOOM!","KAPOW!","SMASH!"],s=a[Math.floor(Math.random()*a.length)];this.show(s,e,t)}showForCardType(e,t,a){const i={crime:["SCHEME!","PLOT!","HEIST!"],henchman:["HIRED!","RECRUITED!","GOON!"],location:["LAIR!","HIDEOUT!","BASE!"],gear:["GADGET!","WEAPON!","TECH!"]}[e.toLowerCase()]||["POW!"],r=i[Math.floor(Math.random()*i.length)];this.show(r,t,a)}}class me{constructor(){l(this,"container");l(this,"isPlaying",!1);this.container=document.createElement("div"),this.container.className="score-cutscene-container",this.container.style.display="none"}async play(e,t,a){if(this.isPlaying)return;this.isPlaying=!0;let s=!1;const i=()=>{s=!0,this.skip()},r=document.querySelector(".game-layout");if(!r){a();return}if(r.classList.add("cutscene-mode"),this.buildCutsceneOverlay(e,t),r.appendChild(this.container),this.container.style.display="flex",setTimeout(()=>{s||(document.addEventListener("click",i,{once:!0}),document.addEventListener("keydown",n=>{(n.key===" "||n.key==="Escape")&&i()},{once:!0}))},300),await this.wait(100),this.container.classList.add("active"),!s){for(let n=0;n<e.length&&!s;n++)await this.animateCard(n),await this.wait(600);s||(await this.animateTotal(),await this.wait(1200))}await this.cleanup(r),this.isPlaying=!1,a()}buildCutsceneOverlay(e,t){this.container.innerHTML=`
      <div class="cutscene-letterbox cutscene-letterbox-top"></div>

      <div class="cutscene-content">
        <div class="cutscene-cards">
          ${e.map((a,s)=>`
            <div class="cutscene-card" data-index="${s}">
              <div class="cutscene-card-name">${a.card.name}</div>
              <div class="cutscene-card-type">${a.card.type}</div>

              <div class="cutscene-scoring-area">
                <div class="base-score-display">
                  <div class="score-label-small">BASE</div>
                  <div class="score-base" data-base="${a.baseScore}">${a.baseScore}</div>
                </div>

                ${a.bonusScore>0||a.synergies.length>0?`
                  <div class="synergy-effects">
                    ${a.synergies.map(i=>`
                      <div class="synergy-shout">${this.getSynergyShout(i)}</div>
                    `).join("")}
                    ${a.bonusScore>0?`
                      <div class="bonus-score-anim">+${a.bonusScore}</div>
                    `:""}
                  </div>
                `:""}

                <div class="final-score-burst">
                  <div class="burst-inner">
                    <div class="score-final" data-final="${a.totalScore}">${a.totalScore}</div>
                    <div class="score-suffix">PTS!</div>
                  </div>
                </div>
              </div>
            </div>
          `).join("")}
        </div>

        <div class="cutscene-total">
          <div class="total-label">TOTAL SCORE</div>
          <div class="total-value">${t}</div>
          <div class="total-suffix">POINTS!</div>
        </div>
      </div>

      <div class="cutscene-letterbox cutscene-letterbox-bottom">
        <div class="skip-hint">Click or press SPACE to skip</div>
      </div>
    `}getSynergyShout(e){const t=["COMBO!","SYNERGY!","BOOM!","POW!","WHAM!","KAPOW!","NICE!","SWEET!"],a=e.length%t.length;return t[a]}async animateCard(e){const t=this.container.querySelector(`.cutscene-card[data-index="${e}"]`);if(!t)return;t.classList.add("active"),await this.wait(400);const a=t.querySelector(".base-score-display");a&&(a.classList.add("show"),await this.wait(300));const s=t.querySelectorAll(".synergy-shout");for(const n of Array.from(s))n.classList.add("show"),await this.wait(200);const i=t.querySelector(".bonus-score-anim");i&&(i.classList.add("show"),await this.wait(300));const r=t.querySelector(".final-score-burst");return r&&(r.classList.add("show"),await this.wait(400)),this.wait(100)}async animateTotal(){const e=this.container.querySelector(".cutscene-total");if(e)return e.classList.add("active"),this.wait(400)}skip(){this.container.querySelectorAll(".cutscene-card").forEach(a=>{a.classList.add("active"),a.querySelectorAll(".base-score-display, .synergy-shout, .bonus-score-anim, .final-score-burst").forEach(s=>s.classList.add("show"))});const t=this.container.querySelector(".cutscene-total");t&&t.classList.add("active")}async cleanup(e){this.container.classList.remove("active"),await this.wait(300),e.classList.remove("cutscene-mode"),this.container.style.display="none",this.container.remove()}wait(e){return new Promise(t=>setTimeout(t,e))}isActive(){return this.isPlaying}}var h=(o=>(o.POSITIVE="positive",o.NEUTRAL="neutral",o.NEGATIVE="negative",o))(h||{});c.HENCHMAN,h.POSITIVE,h.NEUTRAL,h.POSITIVE,h.NEUTRAL,h.POSITIVE,c.CRIME,h.POSITIVE,h.POSITIVE,h.NEUTRAL,h.POSITIVE,h.NEGATIVE,c.LOCATION,h.POSITIVE,h.POSITIVE,h.NEUTRAL,h.POSITIVE,h.NEUTRAL,c.GEAR,h.POSITIVE,h.POSITIVE,h.NEUTRAL,h.POSITIVE,h.NEUTRAL,h.POSITIVE,h.POSITIVE,h.POSITIVE,h.POSITIVE,h.POSITIVE,h.NEUTRAL,h.NEUTRAL,h.NEUTRAL,h.NEUTRAL,h.NEUTRAL,h.NEGATIVE,h.NEGATIVE,h.NEGATIVE,h.NEGATIVE,h.NEGATIVE;const ge={0:{henchman_positive:["LOYAL SERVANTS!","BUILD YOUR ARMY!","PROPER MINIONS!","KNOW YOUR PLACE!"],henchman_neutral:["MORE SUBJECTS!","EXPENDABLE PAWNS!"],crime_positive:["DEMONSTRATE POWER!","CONQUER!","DOMINATE!"],gear_neutral:["TOOLS OF CONQUEST!","ADEQUATE ARMAMENT!"],location_positive:["CLAIM TERRITORY!","EXPAND YOUR DOMAIN!"],high_score:["EXCELLENT!","WORTHY!","THIS PLEASES ME!"],medium_score:["ACCEPTABLE!","PROCEED!"],low_score:["INSUFFICIENT!","PATHETIC!","YOU DARE?!"]},1:{henchman_neutral:["TEST SUBJECTS!","ADEQUATE SPECIMENS!"],crime_neutral:["INTERESTING HYPOTHESIS!","VIABLE APPROACH!"],gear_positive:["FASCINATING DEVICE!","CLEVER ENGINEERING!","INGENIOUS!"],location_positive:["EXCELLENT LAB!","PROPER FACILITIES!","IDEAL WORKSPACE!"],high_score:["SCIENTIFICALLY SOUND!","IMPRESSIVE DATA!","OPTIMAL RESULTS!"],medium_score:["ADEQUATE METHODOLOGY!","ACCEPTABLE VARIABLES!"],low_score:["FLAWED LOGIC!","POOR EXECUTION!","AMATEUR SCIENCE!"]},2:{henchman_neutral:["CHEAP LABOR!","OVERHEAD COSTS!"],crime_positive:["PROFITABLE!","EXCELLENT ROI!","SMART INVESTMENT!","LIQUID ASSETS!"],crime_neutral:["ACCEPTABLE RETURNS!","CALCULATE THE MARGINS!"],gear_neutral:["DEPRECIATING ASSET!","OPERATIONAL EXPENSE!"],location_neutral:["REAL ESTATE VALUE!","OVERHEAD COSTS!"],high_score:["MAXIMUM PROFIT!","EXCELLENT YIELD!","OUTSTANDING RETURNS!"],medium_score:["MODEST GAINS!","BREAK EVEN!"],low_score:["POOR INVESTMENT!","WASTED CAPITAL!","CUTTING LOSSES!"]},3:{henchman_neutral:["USEFUL PAWNS!","DISPOSABLE!"],crime_positive:["ELEGANT!","SUBTLE APPROACH!","WELL CRAFTED!"],crime_neutral:["TOO OBVIOUS!","LACKS FINESSE!"],gear_positive:["PRECISE TOOL!","REFINED!"],location_positive:["STRATEGIC POSITION!","IDEAL VANTAGE!"],high_score:["MASTERFUL!","FLAWLESS EXECUTION!","PERFECTION!"],medium_score:["ADEQUATE!","FUNCTIONAL!"],low_score:["CLUMSY!","AMATEURISH!","SLOPPY!"]},4:{henchman_positive:["BRING THE CHAOS!","MORE BODIES!","UNLEASH THEM!"],crime_positive:["SPECTACULAR!","GO BIG!","MAXIMUM IMPACT!","EXPLOSIVE!"],gear_positive:["DESTRUCTIVE!","POWERFUL TOOL!","BOOM MATERIAL!"],location_neutral:["BLOW IT UP LATER!","GOOD TARGET!"],high_score:["MAGNIFICENT!","EXPLOSIVE SUCCESS!","SPECTACULAR!"],medium_score:["NOT BAD!","DECENT BANG!"],low_score:["WEAK!","WHERE'S THE SPECTACLE?!","BORING!"]}};function ye(o,e,t){const a=k[o],s=ge[o];if(!s)return null;let i=[];const r=a.preferences.includes(e);if(t>=8?i=s.high_score||[]:t<=3?i=s.low_score||[]:t>=4&&t<=7&&(i=s.medium_score||[]),i.length===0){const m=r?"positive":"neutral",y=`${e.toLowerCase()}_${m}`;if(i=s[y]||[],i.length===0){const b=Object.keys(s).filter(T=>T.startsWith(e.toLowerCase()));if(b.length>0){const T=b[Math.floor(Math.random()*b.length)];i=s[T]||[]}}}if(i.length===0){const m=Object.keys(s);if(m.length>0){const y=m[Math.floor(Math.random()*m.length)];i=s[y]||[]}}if(i.length===0)return null;const n=i[Math.floor(Math.random()*i.length)];let p=h.NEUTRAL;return t>=8||r?p=h.POSITIVE:t<=3&&(p=h.NEGATIVE),{text:n,type:p}}function fe(o,e){const t=Math.floor(Math.random()*5);return ye(t,o,e)}class Ee{constructor(){l(this,"gameEngine");l(this,"layout");l(this,"shopLayout");l(this,"devTools");l(this,"comicEffect");l(this,"scoreCutscene");l(this,"isInitialized",!1);try{this.gameEngine=new te,this.layout=new de,this.shopLayout=new ue(this.gameEngine),this.devTools=new he(this.gameEngine),this.comicEffect=new pe,this.scoreCutscene=new me,this.initializeApp(),this.setupEventListeners(),this.setupShopListeners(),this.setupDevToolsListeners(),this.layout.getHeader().setupDemandBanner(),this.updateDisplay(),this.showWelcomeMessage(),this.isInitialized=!0}catch(e){console.error("Failed to initialize app:",e),this.handleInitializationError()}}initializeApp(){document.body.appendChild(this.layout.getElement()),document.body.appendChild(this.shopLayout.getElement()),this.shopLayout.getElement().style.display="none",this.loadStyles()}loadStyles(){}setupShopListeners(){this.shopLayout.onExit(()=>{this.exitShop()})}setupDevToolsListeners(){this.devTools.onStateChange(()=>{this.updateDisplay()})}setupEventListeners(){this.layout.getGameArea().getHandArea().setOnCardClick(e=>{this.playCard(e)}),this.layout.getGameArea().getPlayArea().setOnCardClick(e=>{this.unplayCard(e)}),this.layout.getControls().setOnEndTurn(()=>{this.endTurn()}),this.layout.getControls().setOnNextRound(()=>{this.gameEngine.getState().gamePhase==="game_end"?this.handleGameOver():this.startNextRound()})}updateDisplay(){console.time("[Performance] getState");const e=this.gameEngine.getState();if(console.timeEnd("[Performance] getState"),e.gamePhase===g.SHOP){this.layout.getElement().style.display="none",this.shopLayout.getElement().style.display="flex",this.shopLayout.render();return}if(e.gamePhase===g.CHECKPOINT){this.gameEngine.enterShop(),this.updateDisplay();return}this.layout.getElement().style.display="flex",this.shopLayout.getElement().style.display="none",this.layout.getHeader().updateRound(e.round,e.checkpoint),this.layout.getHeader().updateScore(e.score,e.cumulativeScore,e.targetScore),this.layout.getHeader().updateCurrency(e.currency),console.time("[Performance] getActiveBuffs");const t=this.gameEngine.getActiveBuffs();console.timeEnd("[Performance] getActiveBuffs"),console.time("[Performance] updateHand"),this.layout.getGameArea().getHandArea().updateHand(e.hand),console.timeEnd("[Performance] updateHand"),console.time("[Performance] updatePlayedCards"),this.layout.getGameArea().getPlayArea().updatePlayedCards(e.playedCards,t),console.timeEnd("[Performance] updatePlayedCards"),this.layout.getControls().updateButtonStates(e.gamePhase,e.playedCards.length);const a=this.gameEngine.getActiveModifier();a?this.layout.getHeader().showModifier(a):this.layout.getHeader().hideModifier()}playCard(e){const t=this.gameEngine.getPlayedCards();if(t.length>=3){this.layout.getControls().showMessage("You can only play 3 cards per turn!","error");return}if(this.gameEngine.playCard(e.id,t.length)){const s=window.innerWidth/2,i=window.innerHeight/2;this.comicEffect.showForCardType(e.type,s,i);const r=fe(e.type,e.baseScore);r&&this.layout.getHeader().showReaction(r),this.updateDisplay();const n=3-this.gameEngine.getPlayedCards().length;n>0?this.layout.getControls().showMessage(`Played ${e.name}! ${n} cards remaining.`,"success"):this.layout.getControls().showMessage(`Played ${e.name}! Ready to end turn.`,"success")}else this.layout.getControls().showMessage("Cannot play that card!","error")}unplayCard(e){this.gameEngine.unplayCard(e.id)?(this.updateDisplay(),this.layout.getControls().showMessage(`Returned ${e.name} to hand.`,"info")):this.layout.getControls().showMessage("Cannot return that card!","error")}endTurn(){try{console.time("[Performance] endTurn"),console.time("[Performance] gameEngine.endTurn");const e=this.gameEngine.endTurn();console.timeEnd("[Performance] gameEngine.endTurn");const a=this.gameEngine.getPlayedCards().map(s=>{var i,r,n,p,m,y;return{card:s.card,baseScore:((i=s.scoring)==null?void 0:i.baseScore)||s.card.baseScore,bonusScore:(((r=s.scoring)==null?void 0:r.finalScore)||0)-(((n=s.scoring)==null?void 0:n.baseScore)||s.card.baseScore),totalScore:((p=s.scoring)==null?void 0:p.finalScore)||s.card.baseScore,synergies:((y=(m=s.scoring)==null?void 0:m.buffsReceived)==null?void 0:y.map(b=>b.description))||[]}});this.scoreCutscene.play(a,e.score,()=>{console.time("[Performance] updateDisplay"),this.updateDisplay(),console.timeEnd("[Performance] updateDisplay"),console.timeEnd("[Performance] endTurn");const s=this.gameEngine.getState();if(s.gamePhase==="checkpoint")this.layout.getControls().showMessage(`Checkpoint ${s.checkpoint} reached! Score: ${s.cumulativeScore}/${s.targetScore}. Welcome to the shop!`,"success");else if(s.gamePhase==="game_end")this.layout.getControls().showMessage(`Game Over! Failed to reach ${s.targetScore} by round ${s.checkpoint}. Score: ${s.cumulativeScore}. Starting over...`,"error");else{const i=e.synergiesActivated.length>0?` Synergies: ${e.synergiesActivated.join(", ")}`:"";this.layout.getControls().showMessage(`Round ${s.round} complete! Scored ${e.score} points.${i} Total: ${s.cumulativeScore}/${s.targetScore}`,"info")}})}catch{this.layout.getControls().showMessage("Cannot end turn right now!","error")}}startNextRound(){this.gameEngine.startNextRound(),this.updateDisplay();const e=this.gameEngine.getState();this.layout.getControls().showMessage(`Round ${e.round} started! Checkpoint at round ${e.checkpoint}. Total: ${e.cumulativeScore}/${e.targetScore}`,"info")}exitShop(){this.gameEngine.exitShop(),this.startNextRound();const e=this.gameEngine.getState(),t=this.gameEngine.getPlayerDeck().length;this.layout.getControls().showMessage(`Back to the Council! New target: ${e.targetScore}. Deck size: ${t} schemes`,"success")}handleGameOver(){this.gameEngine.restartGame(),this.updateDisplay(),this.showWelcomeMessage()}showWelcomeMessage(){const e=this.gameEngine.getTargetScore(),t=this.gameEngine.getCheckpoint();this.layout.getControls().showMessage(`Welcome! Reach ${e} points by round ${t}. Play up to 3 cards per round from your hand of 6!`,"info")}getGameEngine(){return this.gameEngine}getLayout(){return this.layout}isReady(){return this.isInitialized}destroy(){try{this.layout&&this.layout.getElement().remove(),this.isInitialized=!1}catch(e){console.error("Error during app cleanup:",e)}}handleInitializationError(){const e=document.createElement("div");e.className="error-container",e.innerHTML=`
      <div class="error-content">
        <h2>Failed to Load Game</h2>
        <p>There was an error initializing the game. Please refresh the page to try again.</p>
        <button onclick="location.reload()" class="btn btn-primary">Reload Page</button>
      </div>
    `,document.body.appendChild(e)}}document.addEventListener("DOMContentLoaded",()=>{const o=new Ee;typeof window<"u"&&(window.gameApp=o)});
