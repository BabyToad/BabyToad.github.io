var W=Object.defineProperty;var z=(n,t,e)=>t in n?W(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var d=(n,t,e)=>z(n,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function e(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(s){if(s.ep)return;s.ep=!0;const r=e(s);fetch(s.href,r)}})();var C=(n=>(n.DRAW="draw",n.PLAY="play",n.SCORE="score",n.ROUND_END="round_end",n.CHECKPOINT="checkpoint",n.SHOP="shop",n.GAME_END="game_end",n))(C||{}),c=(n=>(n.HENCHMAN="henchman",n.LOCATION="location",n.CRIME="crime",n.GEAR="gear",n))(c||{}),u=(n=>(n.CITY="city",n.SCIENCE="science",n.NATURE="nature",n.OCCULT="occult",n.CHAOS="chaos",n))(u||{}),l=(n=>(n.GOON="goon",n.THUG="thug",n.ASSASSIN="assassin",n.HACKER="hacker",n.COMPANION="companion",n.SCIENTIST="scientist",n.WAREHOUSE="warehouse",n.LAB="lab",n.HIDEOUT="hideout",n.BASE="base",n.HEIST="heist",n.SABOTAGE="sabotage",n.INFILTRATION="infiltration",n.TERROR="terror",n.WEAPON="weapon",n.TOOL="tool",n.VEHICLE="vehicle",n.TECH="tech",n))(l||{});const O={id:"armed_goons",description:"Gives +3 to all Goons",type:"aura",targets:{tag:l.GOON},effect:{add:3}},G={id:"cyber_enhanced",description:"Gives +5 to all Hackers",type:"aura",targets:{tag:l.HACKER},effect:{add:5}},_={id:"quick_getaway",description:"Gives +2 to all Crimes",type:"aura",targets:{type:c.CRIME},effect:{add:2}},T={id:"henchman_network",description:"+2 for each other Henchman",type:"conditional",targets:{self:!0},condition:{requires:{type:c.HENCHMAN,count:1}},effect:{add:2,perCard:!0}},D={id:"perfect_target",description:"+5 if Location is present",type:"conditional",targets:{self:!0},condition:{requires:{type:c.LOCATION}},effect:{add:5}},U={id:"equipped_saboteur",description:"+3 for each Gear card",type:"conditional",targets:{self:!0},condition:{requires:{type:c.GEAR,count:1}},effect:{add:3,perCard:!0}},K={id:"weapon_researcher",description:"+5 for each Gear card",type:"conditional",targets:{self:!0},condition:{requires:{type:c.GEAR,count:1}},effect:{add:5,perCard:!0}},X={id:"pack_mentality",description:"+2 for each other Companion",type:"conditional",targets:{self:!0},condition:{requires:{tag:l.COMPANION,count:1}},effect:{add:2,perCard:!0}},j={id:"lazy_goon_persist",description:"Stays for 2 turns",type:"aura",targets:{self:!0},effect:{persistTurns:2}},Q={id:"stray_cat_draw",description:"Draw 2 cards if no other Companions",type:"conditional",targets:{self:!0},condition:{requires:{tag:l.COMPANION,count:0}},effect:{drawCards:2}},Z={id:"baseball_bat_city_boost",description:"+4 if City Goon present",type:"conditional",targets:{self:!0},condition:{requires:{color:u.CITY,tag:l.GOON,count:1}},effect:{add:4}},J={id:"secret_lab_draw",description:"Draw 1 card for every Science card on the board",type:"conditional",targets:{self:!0},effect:{drawCardsPerMatch:1,matchRequirements:{color:u.SCIENCE}}},ee={id:"gear_amplifier",description:"Doubles all Gear effects",type:"multiplier",targets:{type:c.GEAR},effect:{multiply:2}},te={id:"criminal_speech",description:"Gives +5 to all Goons",type:"aura",targets:{tag:l.GOON},effect:{add:5}},se={id:"science_equipment",description:"Doubles Science Henchmen",type:"multiplier",targets:{type:c.HENCHMAN,color:u.SCIENCE},effect:{multiply:2}},ae={id:"granate_debuff",description:"All Goons have -3 EP",type:"aura",targets:{tag:l.GOON},effect:{add:-3}},re={id:"overly_motivated",description:"Doubles all Crime scores",type:"multiplier",targets:{type:c.CRIME},effect:{multiply:2}},ie={id:"city_centre_goons",description:"Doubles City Goons",type:"multiplier",targets:{color:u.CITY,tag:l.GOON},effect:{multiply:2}},ne={id:"city_centre_crimes",description:"Doubles City Crimes",type:"multiplier",targets:{color:u.CITY,type:c.CRIME},effect:{multiply:2}},oe={id:"deep_pockets_hand_scaling",description:"+3 per card in hand",type:"conditional",targets:{self:!0},effect:{add:3,perHandCard:!0}},ce={id:"plagiarize_double",description:"Double the highest EP Gear if a Science Henchman is present",type:"multiplier",targets:{type:c.GEAR,limit:"highest_base"},condition:{requires:{type:c.HENCHMAN,color:u.SCIENCE,count:1}},effect:{multiply:2}},de={id:"robbery_draw",description:"Draw 1 card for every Goon on the board",type:"conditional",targets:{self:!0},effect:{drawCardsPerMatch:1,matchRequirements:{tag:l.GOON}}},le={id:"sixth_gta",description:"Becomes 100 EP if this is the last turn before the quota ends",type:"conditional",targets:{self:!0},condition:{roundState:"last_before_checkpoint"},effect:{set:100}},I={id:"strategic_location",description:"Doubles all Henchman scores",type:"multiplier",targets:{type:c.HENCHMAN},effect:{multiply:2}},$={id:"high_tech_lab",description:"Triples score of Tech gear",type:"multiplier",targets:{tag:l.TECH},effect:{multiply:3}},ue={id:"strategic_planning",description:"+5 if played first",type:"conditional",targets:{self:!0},condition:{position:0},effect:{add:5}},F={id:"finishing_move",description:"+3 if played last",type:"conditional",targets:{self:!0},condition:{position:2},effect:{add:3}},y=[{id:"goon_1",name:"Street Goon",type:c.HENCHMAN,color:u.CITY,tags:[l.GOON],baseScore:2,description:"A basic thug for your schemes",rules:[T],rarity:"common",cost:1},{id:"goon_2",name:"Professional Goon",type:c.HENCHMAN,color:u.CITY,tags:[l.GOON],baseScore:3,description:"A more experienced street thug",rules:[T],rarity:"uncommon",cost:2},{id:"goon_3",name:"Elite Goon",type:c.HENCHMAN,color:u.CITY,tags:[l.GOON],baseScore:4,description:"The best muscle money can buy",rules:[T],rarity:"rare",cost:3},{id:"thug_1",name:"Heavy Thug",type:c.HENCHMAN,color:u.CITY,tags:[l.THUG],baseScore:3,description:"A strong enforcer for your operations",rules:[T],rarity:"common",cost:2},{id:"thug_2",name:"Brutal Thug",type:c.HENCHMAN,color:u.CITY,tags:[l.THUG],baseScore:4,description:"Intimidation specialist",rules:[T],rarity:"uncommon",cost:2},{id:"thug_3",name:"Demolition Thug",type:c.HENCHMAN,color:u.CHAOS,tags:[l.THUG],baseScore:4,description:"Specializes in making things go boom",rules:[T],rarity:"rare",cost:3},{id:"assassin_1",name:"Silent Assassin",type:c.HENCHMAN,color:u.CITY,tags:[l.ASSASSIN],baseScore:4,description:"A deadly operative for precision work",rules:[T],rarity:"uncommon",cost:3},{id:"assassin_2",name:"Master Assassin",type:c.HENCHMAN,color:u.CITY,tags:[l.ASSASSIN],baseScore:5,description:"Elite killer with no conscience",rules:[T],rarity:"rare",cost:4},{id:"hacker_1",name:"Cyber Hacker",type:c.HENCHMAN,color:u.SCIENCE,tags:[l.HACKER],baseScore:3,description:"A tech-savvy operative for digital crimes",rules:[T],rarity:"uncommon",cost:2},{id:"hacker_2",name:"Elite Hacker",type:c.HENCHMAN,color:u.SCIENCE,tags:[l.HACKER],baseScore:4,description:"Can break any system",rules:[T],rarity:"rare",cost:3},{id:"mastermind_1",name:"The Mastermind",type:c.HENCHMAN,color:u.CITY,tags:[l.THUG],baseScore:3,description:"Best when leading the operation",rules:[T,ue],rarity:"rare",cost:3},{id:"wolf_1",name:"Wolf",type:c.HENCHMAN,color:u.NATURE,tags:[l.COMPANION],baseScore:3,description:"Doubles score for each other Companion",rules:[X],rarity:"common",cost:2},{id:"mad_scientist_1",name:"Mad Scientist",type:c.HENCHMAN,color:u.SCIENCE,tags:[l.SCIENTIST],baseScore:2,description:"Doubles the effect of all Gear on the board",rules:[ee],rarity:"common",cost:2},{id:"weapon_researcher_1",name:"Weapon Researcher",type:c.HENCHMAN,color:u.SCIENCE,tags:[l.SCIENTIST],baseScore:2,description:"Gets +5 for every Gear on the board",rules:[K],rarity:"common",cost:2},{id:"lazy_goon_1",name:"Lazy Goon",type:c.HENCHMAN,color:u.CITY,tags:[l.GOON],baseScore:4,description:"Stays on the board for 2 turns",rules:[j],rarity:"common",cost:2},{id:"stray_cat_1",name:"Stray Cat",type:c.HENCHMAN,color:u.NATURE,tags:[l.COMPANION],baseScore:6,description:"Draw 2 cards if no other Companions",rules:[Q],rarity:"uncommon",cost:3},{id:"the_loner",name:"The Loner",type:c.HENCHMAN,color:u.CITY,tags:[l.GOON],baseScore:15,description:"A solitary powerhouse",rules:[],rarity:"common",cost:5},{id:"bear",name:"Bear",type:c.HENCHMAN,color:u.NATURE,tags:[l.COMPANION],baseScore:15,description:"A massive predator",rules:[],rarity:"common",cost:5},{id:"mysterious_fortune_teller",name:"Mysterious Fortune Teller",type:c.HENCHMAN,color:u.OCCULT,tags:[],baseScore:20,description:"Sees all possible futures",rules:[],rarity:"legendary",cost:15},{id:"warehouse_1",name:"Abandoned Warehouse",type:c.LOCATION,color:u.CITY,tags:[l.WAREHOUSE],baseScore:1,description:"Perfect hideout - doubles henchman effectiveness",rules:[I],rarity:"common",cost:1},{id:"warehouse_2",name:"Secure Warehouse",type:c.LOCATION,color:u.CITY,tags:[l.WAREHOUSE],baseScore:2,description:"Well-protected storage - doubles henchman effectiveness",rules:[I],rarity:"uncommon",cost:2},{id:"warehouse_3",name:"Port Warehouse",type:c.LOCATION,color:u.CITY,tags:[l.WAREHOUSE],baseScore:2,description:"Strategic docks location - doubles henchman effectiveness",rules:[I],rarity:"uncommon",cost:2},{id:"lab_1",name:"Secret Lab",type:c.LOCATION,color:u.SCIENCE,tags:[l.LAB],baseScore:2,description:"High-tech facility - triples tech gear power",rules:[$],rarity:"uncommon",cost:2},{id:"lab_2",name:"Advanced Research Lab",type:c.LOCATION,color:u.SCIENCE,tags:[l.LAB],baseScore:3,description:"Cutting-edge technology - triples tech gear power",rules:[$],rarity:"rare",cost:3},{id:"secret_lab_klauncel",name:"The Secret Lab",type:c.LOCATION,color:u.SCIENCE,tags:[l.LAB],baseScore:0,description:"Draw 1 card for every Science card on the board",rules:[J],rarity:"common",cost:4},{id:"hideout_1",name:"Safe House",type:c.LOCATION,color:u.CITY,tags:[l.HIDEOUT],baseScore:1,description:"A secure place to plan operations",rules:[I],rarity:"common",cost:1},{id:"hideout_2",name:"Fortified Hideout",type:c.LOCATION,color:u.CITY,tags:[l.HIDEOUT],baseScore:2,description:"Nearly impregnable stronghold",rules:[I],rarity:"uncommon",cost:2},{id:"hideout_3",name:"Penthouse Hideout",type:c.LOCATION,color:u.CITY,tags:[l.HIDEOUT],baseScore:3,description:"Luxury base with great city views",rules:[I],rarity:"rare",cost:3},{id:"base_1",name:"Underground Base",type:c.LOCATION,color:u.CITY,tags:[l.BASE],baseScore:3,description:"Secure headquarters - doubles henchman effectiveness",rules:[I],rarity:"rare",cost:4},{id:"base_2",name:"Command Center",type:c.LOCATION,color:u.CITY,tags:[l.BASE],baseScore:4,description:"Central hub - doubles henchman effectiveness",rules:[I],rarity:"legendary",cost:5},{id:"heist_1",name:"Bank Heist",type:c.CRIME,color:u.CITY,tags:[l.HEIST],baseScore:8,description:"Classic money-grabbing operation",rules:[D],rarity:"common",cost:2},{id:"heist_2",name:"Casino Heist",type:c.CRIME,color:u.CITY,tags:[l.HEIST],baseScore:10,description:"Hit the jackpot, literally",rules:[D],rarity:"uncommon",cost:3},{id:"heist_3",name:"Museum Heist",type:c.CRIME,color:u.CITY,tags:[l.HEIST],baseScore:12,description:"Steal priceless artifacts",rules:[D],rarity:"rare",cost:4},{id:"heist_4",name:"Armored Car Heist",type:c.CRIME,color:u.CITY,tags:[l.HEIST],baseScore:9,description:"Rob money in transit",rules:[D],rarity:"common",cost:2},{id:"sabotage_1",name:"Industrial Sabotage",type:c.CRIME,color:u.CHAOS,tags:[l.SABOTAGE],baseScore:9,description:"Disrupt enemy operations",rules:[U],rarity:"common",cost:2},{id:"sabotage_2",name:"Data Center Sabotage",type:c.CRIME,color:u.SCIENCE,tags:[l.SABOTAGE],baseScore:11,description:"Bring down their digital infrastructure",rules:[U],rarity:"uncommon",cost:3},{id:"infiltration_1",name:"Corporate Infiltration",type:c.CRIME,color:u.CITY,tags:[l.INFILTRATION],baseScore:10,description:"Infiltrate and gather intelligence",rules:[],rarity:"uncommon",cost:3},{id:"infiltration_2",name:"Government Infiltration",type:c.CRIME,color:u.CITY,tags:[l.INFILTRATION],baseScore:12,description:"Access classified information",rules:[],rarity:"rare",cost:4},{id:"terror_1",name:"Intimidation Campaign",type:c.CRIME,color:u.CHAOS,tags:[l.TERROR],baseScore:8,description:"Spread fear through the city",rules:[F],rarity:"common",cost:2},{id:"terror_2",name:"Citywide Terror",type:c.CRIME,color:u.CHAOS,tags:[l.TERROR],baseScore:11,description:"Paralyze the entire city with fear",rules:[F],rarity:"rare",cost:4},{id:"baseball_bat",name:"Baseball Bat",type:c.GEAR,color:u.CITY,tags:[l.WEAPON],baseScore:1,description:"Simple but effective - arms your goons",rules:[O],rarity:"common",cost:1},{id:"baseball_bat_klauncel",name:"Baseball Bat",type:c.GEAR,color:u.CITY,tags:[l.WEAPON],baseScore:6,description:"+4 if City Goon present",rules:[Z],rarity:"common",cost:2},{id:"knife",name:"Combat Knife",type:c.GEAR,color:u.CITY,tags:[l.WEAPON],baseScore:2,description:"Silent and deadly - arms your goons",rules:[O],rarity:"common",cost:1},{id:"pistol",name:"Pistol",type:c.GEAR,color:u.CITY,tags:[l.WEAPON],baseScore:3,description:"Standard criminal firearm - arms your goons",rules:[O],rarity:"uncommon",cost:2},{id:"rifle",name:"Assault Rifle",type:c.GEAR,color:u.CHAOS,tags:[l.WEAPON],baseScore:5,description:"Military-grade weaponry - arms your goons",rules:[O],rarity:"rare",cost:3},{id:"crowbar",name:"Crowbar",type:c.GEAR,color:u.CITY,tags:[l.TOOL],baseScore:2,description:"Perfect for breaking and entering",rules:[],rarity:"common",cost:1},{id:"lockpicks",name:"Lockpick Set",type:c.GEAR,color:u.CITY,tags:[l.TOOL],baseScore:3,description:"Silent entry specialist tools",rules:[],rarity:"uncommon",cost:2},{id:"explosives",name:"Explosives",type:c.GEAR,color:u.CHAOS,tags:[l.TOOL],baseScore:4,description:"When subtlety fails",rules:[],rarity:"rare",cost:3},{id:"getaway_car",name:"Getaway Car",type:c.GEAR,color:u.CITY,tags:[l.VEHICLE],baseScore:3,description:"Fast escape - boosts crime scores",rules:[_],rarity:"uncommon",cost:2},{id:"motorcycle",name:"Sport Motorcycle",type:c.GEAR,color:u.CITY,tags:[l.VEHICLE],baseScore:2,description:"Quick and agile - boosts crime scores",rules:[_],rarity:"common",cost:1},{id:"helicopter",name:"Helicopter",type:c.GEAR,color:u.CITY,tags:[l.VEHICLE],baseScore:5,description:"Ultimate escape - boosts crime scores",rules:[_],rarity:"legendary",cost:4},{id:"hacking_rig",name:"Hacking Rig",type:c.GEAR,color:u.SCIENCE,tags:[l.TECH],baseScore:4,description:"Advanced computer setup - empowers hackers",rules:[G],rarity:"uncommon",cost:3},{id:"surveillance_kit",name:"Surveillance Kit",type:c.GEAR,color:u.SCIENCE,tags:[l.TECH],baseScore:3,description:"Keep tabs on your targets - empowers hackers",rules:[G],rarity:"uncommon",cost:2},{id:"failed_experiment",name:"Failed Experiment",type:c.HENCHMAN,color:u.SCIENCE,tags:[l.SCIENTIST],baseScore:50,description:"The result of pushing science too far",rules:[],rarity:"legendary",cost:50},{id:"gun",name:"Gun",type:c.GEAR,color:u.CITY,tags:[l.WEAPON],baseScore:11,description:"A simple firearm",rules:[],rarity:"common",cost:5},{id:"granate",name:"Granate",type:c.GEAR,color:u.CHAOS,tags:[l.WEAPON],baseScore:15,description:"Powerful but risky - your Goons take -3 EP",rules:[ae],rarity:"common",cost:8},{id:"science_equipment",name:"Science Equipment",type:c.GEAR,color:u.SCIENCE,tags:[l.TECH],baseScore:4,description:"Doubles the power of Science Henchmen",rules:[se],rarity:"common",cost:3},{id:"criminally_good_speech",name:"Criminally Good Speech",type:c.CRIME,color:u.CITY,tags:[l.HEIST],baseScore:5,description:"Rally your Goons with an inspiring speech",rules:[te],rarity:"common",cost:3},{id:"robbery",name:"Robbery",type:c.CRIME,color:u.CITY,tags:[l.HEIST],baseScore:6,description:"Draw 1 card for every Goon on the board",rules:[de],rarity:"common",cost:4},{id:"plagiarize",name:"Plagiarize",type:c.CRIME,color:u.SCIENCE,tags:[l.INFILTRATION],baseScore:7,description:"Double the highest EP Gear if a Science Henchman is present",rules:[ce],rarity:"common",cost:4},{id:"sixth_grand_theft_auto",name:"6th Grand Theft Auto",type:c.CRIME,color:u.CITY,tags:[l.HEIST],baseScore:20,description:"Counts as 100 EP if it's the last turn before the quota ends",rules:[le],rarity:"legendary",cost:10},{id:"unleash_animals_zoo",name:"Unleash the Animals in the Zoo",type:c.CRIME,color:u.NATURE,tags:[l.TERROR],baseScore:12,description:"Chaos erupts as wild beasts run free",rules:[],rarity:"common",cost:5},{id:"overly_motivated_goon",name:"Overly Motivated Goon",type:c.HENCHMAN,color:u.CITY,tags:[l.GOON],baseScore:4,description:"Your Crimes give double EP this turn",rules:[re],rarity:"common",cost:2},{id:"city_centre",name:"City Centre",type:c.LOCATION,color:u.CITY,tags:[],baseScore:0,description:"City Goons and City Crimes give double the EP",rules:[ie,ne],rarity:"common",cost:4},{id:"really_deep_pockets",name:"REALLY Deep Pockets",type:c.GEAR,color:u.SCIENCE,tags:[],baseScore:0,description:"Has +3 EP for every card in your hand",rules:[oe],rarity:"common",cost:2}];function B(n){return y.find(t=>t.id===n)}const L=[y.find(n=>n.id==="goon_1"),y.find(n=>n.id==="goon_1"),y.find(n=>n.id==="goon_1"),y.find(n=>n.id==="thug_1"),y.find(n=>n.id==="thug_1"),y.find(n=>n.id==="wolf_1"),y.find(n=>n.id==="wolf_1"),y.find(n=>n.id==="warehouse_1"),y.find(n=>n.id==="warehouse_1"),y.find(n=>n.id==="hideout_1"),y.find(n=>n.id==="hideout_1"),y.find(n=>n.id==="heist_1"),y.find(n=>n.id==="heist_1"),y.find(n=>n.id==="baseball_bat"),y.find(n=>n.id==="baseball_bat")];if(L.length!==15)throw new Error(`Starter deck must have 15 cards, found ${L.length}`);if(L.some(n=>!n))throw new Error("Starter deck contains undefined cards - check card IDs");const he={enabled:!0,frequency:2,startRound:2},pe={0:[{flavorText:"LORD VEXOR demands more MINIONS!",rule:{id:"vexor_henchmen",description:"All HENCHMEN get +3",type:"aura",targets:{type:c.HENCHMAN},effect:{add:3}}},{flavorText:"LORD VEXOR expects OBEDIENCE!",rule:{id:"vexor_goons",description:"All GOONS get +5",type:"aura",targets:{tag:l.GOON},effect:{add:5}}}],1:[{flavorText:"DR. MALICE demands SCIENCE!",rule:{id:"malice_science",description:"All SCIENCE cards get +4",type:"aura",targets:{color:u.SCIENCE},effect:{add:4}}},{flavorText:"DR. MALICE requires proper EQUIPMENT!",rule:{id:"malice_gear",description:"All GEAR gets +3",type:"aura",targets:{type:c.GEAR},effect:{add:3}}}],2:[{flavorText:"BARON BLACKGOLD demands PROFIT!",rule:{id:"blackgold_crime",description:"All CRIMES get +4",type:"aura",targets:{type:c.CRIME},effect:{add:4}}},{flavorText:"BARON BLACKGOLD expects a HEIST!",rule:{id:"blackgold_heist",description:"All HEISTS get +6",type:"aura",targets:{tag:l.HEIST},effect:{add:6}}}],3:[{flavorText:"NIGHTSHADE appreciates SUBTLETY...",rule:{id:"nightshade_infiltration",description:"All INFILTRATIONS get +5",type:"aura",targets:{tag:l.INFILTRATION},effect:{add:5}}},{flavorText:"NIGHTSHADE values the OCCULT...",rule:{id:"nightshade_occult",description:"All OCCULT cards get +4",type:"aura",targets:{color:u.OCCULT},effect:{add:4}}}],4:[{flavorText:"MADAME MAYHEM demands MAYHEM!",rule:{id:"mayhem_weapons",description:"All WEAPONS get +5",type:"aura",targets:{tag:l.WEAPON},effect:{add:5}}},{flavorText:"MADAME MAYHEM craves CHAOS!",rule:{id:"mayhem_chaos",description:"All CHAOS cards get +4",type:"aura",targets:{color:u.CHAOS},effect:{add:4}}},{flavorText:"MADAME MAYHEM expects TERROR!",rule:{id:"mayhem_terror",description:"All TERROR gets +6",type:"aura",targets:{tag:l.TERROR},effect:{add:6}}}]};function fe(n){const t=pe[n];return!t||t.length===0?null:t[Math.floor(Math.random()*t.length)]}const me={common:5,uncommon:10,rare:20,legendary:50};class ge{getDuplicateGroups(t){const e=new Map;t.forEach(s=>{const r=s.name;e.has(r)||e.set(r,[]),e.get(r).push(s)});const a=[];return e.forEach((s,r)=>{a.push({cardName:r,cards:[...s],count:s.length,canBurn:s.length>=3})}),a}canBurn(t,e){return t.filter(s=>s.name===e).length>=3}burnTriple(t,e){const a=t.filter(h=>h.name===e);if(a.length<3)return{success:!1,goldEarned:0,cardsRemoved:[]};const s=a.slice(0,3),r=[];s.forEach(h=>{const p=t.indexOf(h);p>-1&&r.push(t.splice(p,1)[0])});const i=s[0].rarity;return{success:!0,goldEarned:this.getRefundValue(i),cardsRemoved:r}}getRefundValue(t){return me[t]||0}getUniqueCardNames(t){const e=new Set;return t.forEach(a=>e.add(a.name)),Array.from(e).sort()}getRarityDistribution(t){const e={common:0,uncommon:0,rare:0,legendary:0};return t.forEach(a=>{e[a.rarity]!==void 0&&e[a.rarity]++}),e}}const ye=[{id:"base",name:"Mystery Pack",cost:30,description:"3 random schemes! Last card has rare chance!",slots:[{rarities:[{rarity:"common",weight:1}]},{rarities:[{rarity:"common",weight:1}]},{rarities:[{rarity:"common",weight:70},{rarity:"uncommon",weight:20},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}]}]},{id:"deluxe",name:"Deluxe Pack",cost:60,description:"Better chances at rare schemes!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:40}]},{rarities:[{rarity:"uncommon",weight:1}]},{rarities:[{rarity:"uncommon",weight:50},{rarity:"rare",weight:35},{rarity:"legendary",weight:15}]}]}];class Ce{constructor(t){d(this,"configs");d(this,"rarityBoosts");this.configs=new Map,this.rarityBoosts=new Map,(t||ye).forEach(a=>{this.configs.set(a.id,a)})}generate(t){const e=this.configs.get(t);if(!e)throw new Error(`Unknown pack type: ${t}`);const a=e.slots.map((r,i)=>this.rollCard(r,i)),s={packType:e.id,cards:a,cost:e.cost};return this.rarityBoosts.clear(),s}rollCard(t,e){const a=this.applyBoost(t.rarities,e),s=this.weightedRandom(a);let r=y.filter(i=>i.rarity===s);return t.typeFilter&&(r=r.filter(i=>i.type===t.typeFilter)),r.length===0&&(r=y),r[Math.floor(Math.random()*r.length)]}weightedRandom(t){const e=t.reduce((s,r)=>s+r.weight,0);let a=Math.random()*e;for(const s of t)if(a-=s.weight,a<=0)return s.rarity;return t[0].rarity}applyBoost(t,e){const a=this.rarityBoosts.get(e);return!a||a===0?t:t.map(s=>({...s,weight:s.rarity==="legendary"?s.weight*a:s.weight}))}setRarityBoost(t,e){this.rarityBoosts.set(t,e)}getAvailablePackTypes(){return Array.from(this.configs.values())}getPackConfig(t){return this.configs.get(t)}registerPackType(t){this.configs.set(t.id,t)}}var v=(n=>(n.LOCKED="locked",n.AVAILABLE="available",n.DISABLED="disabled",n))(v||{});const Ee=[{type:"round",value:1,slotPosition:0,description:"Starting slot"},{type:"round",value:1,slotPosition:1,description:"Starting slot"},{type:"round",value:1,slotPosition:2,description:"Starting slot"},{type:"checkpoint",value:1,slotPosition:3,description:"Unlock after first checkpoint"},{type:"checkpoint",value:2,slotPosition:4,description:"Unlock after second checkpoint"}],ve=5;class Se{constructor(t=Ee){d(this,"slots");d(this,"unlockConditions");this.unlockConditions=t,this.slots=this.initializeSlots()}initializeSlots(){const t=[];for(let e=0;e<ve;e++)t.push({id:`slot_${e}`,position:e,state:v.LOCKED,modifiers:[]});return t}getSlots(){return this.slots.map(t=>({...t,modifiers:[...t.modifiers||[]]}))}getAvailableSlots(){return this.slots.filter(t=>t.state===v.AVAILABLE)}getAvailableSlotCount(){return this.getAvailableSlots().length}hasAvailableSlot(){return this.getAvailableSlotCount()>0}getSlot(t){return t<0||t>=this.slots.length?null:{...this.slots[t],modifiers:[...this.slots[t].modifiers||[]]}}unlockSlot(t){if(t<0||t>=this.slots.length)return!1;const e=this.slots[t];return e.state!==v.LOCKED?!1:(e.state=v.AVAILABLE,!0)}lockSlot(t){return t<0||t>=this.slots.length?!1:(this.slots[t].state=v.LOCKED,delete this.slots[t].disabledUntilRound,!0)}disableSlot(t,e){if(t<0||t>=this.slots.length)return!1;const a=this.slots[t];return a.state===v.LOCKED?!1:(a.state=v.DISABLED,e!==void 0&&(a.disabledUntilRound=e),!0)}enableSlot(t){if(t<0||t>=this.slots.length)return!1;const e=this.slots[t];return e.state===v.DISABLED?(e.state=v.AVAILABLE,delete e.disabledUntilRound,!0):!1}addSlotModifier(t,e){if(t<0||t>=this.slots.length)return!1;const a=this.slots[t];return a.modifiers||(a.modifiers=[]),a.modifiers.push(e),!0}removeSlotModifier(t,e){if(t<0||t>=this.slots.length)return!1;const a=this.slots[t];if(!a.modifiers)return!1;const s=a.modifiers.length;return a.modifiers=a.modifiers.filter(r=>r.id!==e),a.modifiers.length<s}getSlotModifiers(t){const e=this.getSlot(t);return(e==null?void 0:e.modifiers)||[]}checkUnlocks(t,e,a=0){let s=0;for(const r of this.unlockConditions){if(this.slots[r.slotPosition].state!==v.LOCKED)continue;let o=!1;switch(r.type){case"round":o=t>=r.value;break;case"checkpoint":o=e>=r.value;break;case"currency_spent":o=a>=r.value;break}o&&this.unlockSlot(r.slotPosition)&&s++}return s}autoEnableSlots(t){let e=0;for(const a of this.slots)a.state===v.DISABLED&&a.disabledUntilRound!==void 0&&t>=a.disabledUntilRound&&(this.enableSlot(a.position),e++);return e}reset(){this.slots=this.initializeSlots()}setSlotLabel(t,e){return t<0||t>=this.slots.length?!1:(this.slots[t].label=e,!0)}setSlotIconClass(t,e){return t<0||t>=this.slots.length?!1:(this.slots[t].iconClass=e,!0)}}class be{constructor(){d(this,"handlers",[])}register(t){this.handlers.push(t),this.handlers.sort((e,a)=>(e.priority??100)-(a.priority??100))}registerAll(t){t.forEach(e=>this.register(e))}getHandlers(t){return this.handlers.filter(e=>e.canHandle(t))}getAllHandlers(){return[...this.handlers]}clear(){this.handlers=[]}get count(){return this.handlers.length}}class Ae{constructor(){d(this,"registry");this.registry=new be}registerHandlers(t){this.registry.registerAll(t)}executeOnPlayEffects(t,e,a){for(const s of t.card.rules){const r={playedCard:t,rule:s,state:e,drawCards:a.drawCards,findMatchingCards:a.findMatchingCards,cardMatchesFilter:a.cardMatchesFilter,deckHasMatchingCard:a.deckHasMatchingCard,addCardsToPlayerDeck:a.addCardsToPlayerDeck,addCardsToDiscard:a.addCardsToDiscard,removeCardsFromAllZones:a.removeCardsFromAllZones,emit:a.emit},i=this.registry.getHandlers(s.effect);for(const o of i)o.execute(r)}}executePostScoreEffects(t,e,a){const s=new Set;for(const r of t)for(const i of r.card.rules){if(!i.effect.grantPack)continue;const o={playedCard:r,rule:i,state:e,drawCards:a.drawCards,findMatchingCards:a.findMatchingCards,cardMatchesFilter:a.cardMatchesFilter,deckHasMatchingCard:a.deckHasMatchingCard,addCardsToPlayerDeck:a.addCardsToPlayerDeck,addCardsToDiscard:a.addCardsToDiscard,removeCardsFromAllZones:a.removeCardsFromAllZones,emit:a.emit},h=`${r.card.id}-${i.effect.grantPack.packId}`;if(s.has(h))continue;s.add(h);const p=this.registry.getHandlers(i.effect);for(const m of p)m.execute(o)}}getRegistry(){return this.registry}}class R{constructor(){d(this,"priority",100)}isConditionMet(t){const{rule:e,playedCard:a,findMatchingCards:s}=t;if(!e.condition)return!0;if(e.condition.position!==void 0&&a.position!==e.condition.position||e.condition.roundState==="last_before_checkpoint"&&t.state.round!==t.state.checkpoint)return!1;if(e.condition.requires){const r=s(e.condition.requires,a),i=e.condition.requires.count;return i===0?r.length===0:i!==void 0?r.length>=i:r.length>0}return!0}}class Te extends R{constructor(){super(...arguments);d(this,"priority",10)}canHandle(e){return e.drawCards!==void 0}execute(e){const a=e.rule.effect.drawCards;if(!a||!this.isConditionMet(e))return;const s=e.drawCards(a);if(s.length>0){const r=`Draw ${s.length} card${s.length>1?"s":""}`;e.emit({type:"cards_drawn",cards:s,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:r,value:s.length})}}}class ke extends R{constructor(){super(...arguments);d(this,"priority",11)}canHandle(e){return e.drawCardsPerMatch!==void 0}execute(e){var o;const a=e.rule.effect.drawCardsPerMatch;if(!a||!this.isConditionMet(e))return;const s=e.rule.effect.matchRequirements??((o=e.rule.condition)==null?void 0:o.requires),i=e.findMatchingCards(s,e.playedCard).length*a;if(i>0){const h=e.drawCards(i);if(h.length>0){const p=`Draw ${h.length} card${h.length>1?"s":""}`;e.emit({type:"cards_drawn",cards:h,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:p,value:h.length})}}}}class Ie extends R{constructor(){super(...arguments);d(this,"priority",12)}canHandle(e){return e.drawUntil!==void 0}execute(e){const a=e.rule.effect.drawUntil;if(!a||!this.isConditionMet(e)||!e.deckHasMatchingCard(a))return;const s=[];let r=!1;for(;!r;){const i=e.drawCards(1);if(i.length===0)break;s.push(...i);const o=i[i.length-1];e.cardMatchesFilter(o,a)&&(r=!0)}if(s.length>0){const i=`Draw ${s.length} card${s.length>1?"s":""}`;e.emit({type:"cards_drawn",cards:s,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:i,value:s.length})}}}class Re extends R{constructor(){super(...arguments);d(this,"priority",5)}canHandle(e){return e.persistTurns!==void 0||e.returnToHand!==void 0}execute(e){const a=e.rule.effect;a.persistTurns!==void 0&&(e.playedCard.persistsForTurns=a.persistTurns,e.playedCard.turnsInPlay=0,e.emit({type:"card_persists",card:e.playedCard.card,turnsRemaining:a.persistTurns})),a.returnToHand&&e.rule.targets.self&&(e.playedCard.returnToHand=!0)}}class Ne extends R{constructor(){super(...arguments);d(this,"priority",20)}canHandle(e){return e.modifyPacks!==void 0}execute(e){const a=e.rule.effect.modifyPacks;if(!a||!this.isConditionMet(e))return;const s=e.rule.effect.modifyPacksPermanent??!1;e.emit({type:"pack_bonus_added",bonus:a,triggeredBy:e.playedCard.card,permanent:s});const r=`Next pack +${a} card${a>1?"s":""}`;e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:r,value:a})}}class Oe extends R{constructor(){super(...arguments);d(this,"priority",6)}canHandle(e){return e.delayedAdd!==void 0}execute(e){const a=e.rule.effect.delayedAdd;a&&this.isConditionMet(e)&&(e.playedCard.delayedBonuses||(e.playedCard.delayedBonuses=[]),e.playedCard.delayedBonuses.push({amount:a.amount,turnsRemaining:a.turns,applied:!1}))}}class De extends R{constructor(){super(...arguments);d(this,"priority",30)}canHandle(e){return e.addCardsToDeck!==void 0||e.removeCards!==void 0}execute(e){const a=e.rule.effect;this.isConditionMet(e)&&(a.addCardsToDeck&&this.addCardsToDeck(e),a.removeCards&&this.removeCards(e))}addCardsToDeck(e){const a=e.rule.effect.addCardsToDeck;let s=y;if(a.rarity&&(s=s.filter(o=>o.rarity===a.rarity)),a.type&&(s=s.filter(o=>o.type===a.type)),a.tag&&(s=s.filter(o=>o.tags.includes(a.tag))),a.color&&(s=s.filter(o=>o.color===a.color)),s.length===0||a.count<=0)return;const r=[];for(let o=0;o<a.count;o++){const p={...s[Math.floor(Math.random()*s.length)]};r.push(p)}e.addCardsToPlayerDeck(r),e.addCardsToDiscard(r);const i=`Added ${r.length} card${r.length>1?"s":""} to deck`;e.emit({type:"cards_added_to_deck",cards:r,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:i,value:r.length})}removeCards(e){const a=e.rule.effect.removeCards,s=e.removeCardsFromAllZones(a);if(s.length>0){const r=`Removed ${s.length} card${s.length>1?"s":""} from game`;if(e.emit({type:"cards_removed",cards:s,reason:`Removed by ${e.playedCard.card.name}`,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:r,value:s.length}),e.rule.effect.bonusPerRemovedCard&&s.length>0){const i=s.length*e.rule.effect.bonusPerRemovedCard;e.playedCard.effectBonus=(e.playedCard.effectBonus||0)+i;const o=`Gain ${i} EP from removed cards`;e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:o,value:i})}}}}class Le extends R{constructor(){super(...arguments);d(this,"priority",50)}canHandle(e){return e.grantPack!==void 0}execute(e){const a=e.rule.effect.grantPack;a&&this.isConditionMet(e)&&e.emit({type:"pack_reward_added",packId:a.packId,triggeredBy:e.playedCard.card})}}class Pe{constructor(t){d(this,"state");d(this,"eventListeners",[]);d(this,"deckManager");d(this,"packGenerator");d(this,"slotManager");d(this,"effectExecutor");this.deckManager=new ge,this.packGenerator=new Ce,this.slotManager=new Se,this.effectExecutor=new Ae,this.effectExecutor.registerHandlers([new Te,new ke,new Ie,new Re,new Ne,new Oe,new De,new Le]),this.state=this.initializeGame(t)}on(t){this.eventListeners.push(t)}off(t){const e=this.eventListeners.indexOf(t);e>-1&&this.eventListeners.splice(e,1)}emit(t){for(const e of this.eventListeners)e(t)}initializeGame(t){const e=t?[...t]:[...L];this.slotManager.checkUnlocks(1,0,0);const a={round:1,targetScore:75,hand:[],playedCards:[],score:0,cumulativeScore:0,checkpoint:5,currency:0,playerDeck:e,deck:[],discardPile:[],playerStats:{totalScore:0,roundsWon:0,roundsLost:0,cardsPlayed:0,synergiesActivated:0},gamePhase:C.PLAY,cardSlots:this.slotManager.getSlots(),cardPlayCounts:new Map,packBonusCards:0,permanentPackBonus:0,pendingPackRewards:[],activeModifier:void 0,modifierConfig:{...he}};return this.state=a,this.reshuffleFromPlayerDeck(),this.state}shuffleDeck(t){for(let e=t.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[t[e],t[a]]=[t[a],t[e]]}}cloneCard(t){const e=globalThis.structuredClone;return typeof e=="function"?e(t):JSON.parse(JSON.stringify(t))}reshuffleFromPlayerDeck(){const t=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playedCards.map(s=>s.card)],e=this.state.playerDeck.length-t.length;if(e>0){const s=new Set(t.map(i=>i.id)),r=this.state.playerDeck.filter(i=>!s.has(i.id));for(let i=0;i<e&&i<r.length;i++)t.push({...r[i]})}this.shuffleDeck(t),this.state.deck=t,this.state.hand=[],this.state.discardPile=[],this.state.playedCards=[];const a=Math.min(6,this.state.deck.length);for(let s=0;s<a;s++)this.state.hand.push(this.state.deck.pop())}getState(){return{...this.state}}playCard(t,e){if(this.state.gamePhase!==C.PLAY)return!1;const a=this.slotManager.getAvailableSlotCount();if(this.state.playedCards.length>=a)return!1;const s=this.state.hand.findIndex(h=>h.id===t);if(s===-1)return!1;const r=this.state.hand[s],i={card:r,position:e};this.state.hand.splice(s,1),this.state.playedCards.push(i),this.state.playerStats.cardsPlayed++;const o=this.state.cardPlayCounts.get(r.name)||0;return this.state.cardPlayCounts.set(r.name,o+1),this.emit({type:"card_played",card:r,position:e}),this.executeOnPlayEffects(i),!0}unplayCard(t){if(this.state.gamePhase!==C.PLAY)return!1;const e=this.state.playedCards.findIndex(s=>s.card.id===t);if(e===-1)return!1;const a=this.state.playedCards.splice(e,1)[0];return this.state.hand.push(a.card),this.emit({type:"card_unplayed",card:a.card}),!0}endTurn(){if(this.state.gamePhase!==C.PLAY)throw new Error("Cannot end turn in current phase");const t=this.calculateScore();if(this.state.score=t.score,this.state.cumulativeScore+=t.score,this.state.gamePhase=C.SCORE,this.state.playerStats.totalScore=this.state.cumulativeScore,this.state.playerStats.synergiesActivated+=t.synergiesActivated.length,this.clearModifier(),this.state.round>=this.state.checkpoint)if(t.success=this.state.cumulativeScore>=this.state.targetScore,t.success){this.state.playerStats.roundsWon++;const e=this.state.cumulativeScore-this.state.targetScore;this.state.currency+=e,this.state.gamePhase=C.CHECKPOINT}else this.state.playerStats.roundsLost++,this.state.gamePhase=C.GAME_END;return t}calculateScore(){const t=this.evaluateAllRules(),e=[];for(const s of this.state.playedCards)s.scoring={baseScore:s.card.baseScore,buffsReceived:[],buffsGiven:[],finalScore:s.card.baseScore};for(const s of t){const r=this.state.playedCards.find(o=>o.card.id===s.sourceCardId),i=this.state.playedCards.find(o=>o.card.id===s.targetCardId);r!=null&&r.scoring&&(i!=null&&i.scoring)&&(r.scoring.buffsGiven.push(s),i.scoring.buffsReceived.push(s),e.includes(s.description)||e.push(s.description))}for(const s of this.state.playedCards){if(!s.scoring)continue;let r=s.scoring.baseScore;if(s.effectBonus&&(r+=s.effectBonus),s.delayedBonuses&&s.delayedBonuses.length>0)for(const i of s.delayedBonuses)i.turnsRemaining===0&&!i.applied&&(r+=i.amount,i.applied=!0);for(const i of s.scoring.buffsReceived)i.isMultiplier||(r+=i.value);s.scoring.finalScore=r}for(const s of this.state.playedCards){if(!s.scoring)continue;let r=s.scoring.finalScore;for(const i of s.scoring.buffsReceived)i.isMultiplier&&(r=Math.floor(r*i.value));s.scoring.finalScore=r}for(const s of this.state.playedCards)if(s.scoring){for(const r of s.scoring.buffsReceived)if(r.isSet){s.scoring.finalScore=r.value;break}}for(const s of this.state.playedCards)s.delayedBonuses&&(s.delayedBonuses=s.delayedBonuses.filter(r=>!r.applied),s.delayedBonuses.length===0&&delete s.delayedBonuses),s.effectBonus!==void 0&&delete s.effectBonus;const a=this.state.playedCards.reduce((s,r)=>{var i;return s+(((i=r.scoring)==null?void 0:i.finalScore)??r.card.baseScore)},0);return{score:a,targetScore:this.state.targetScore,success:!1,synergiesActivated:e,bonusScore:a-this.state.playedCards.reduce((s,r)=>{var i;return s+(((i=r.scoring)==null?void 0:i.finalScore)??r.card.baseScore)},0)}}processPostScoreEffects(){const t={drawCards:a=>this.drawCards(a),findMatchingCards:(a,s)=>this.findMatchingCards(a,s),cardMatchesFilter:(a,s)=>this.cardMatchesFilter(a,s),deckHasMatchingCard:a=>this.deckHasMatchingCard(a),addCardsToPlayerDeck:a=>{a.forEach(s=>this.state.playerDeck.push({...s}))},addCardsToDiscard:a=>{this.state.discardPile.push(...a)},removeCardsFromAllZones:a=>this.removeCardsFromGame(a),emit:a=>this.emit(a)},e=a=>{a.type==="pack_reward_added"&&(this.state.pendingPackRewards||(this.state.pendingPackRewards=[]),this.state.pendingPackRewards.push(a.packId))};this.on(e),this.effectExecutor.executePostScoreEffects(this.state.playedCards,this.state,t),this.off(e)}evaluateAllRules(){const t=[];let e=0;if(this.state.activeModifier){const a=this.state.activeModifier.rule,s=this.findModifierTargets(a);for(const r of s){const i=a.effect.add||a.effect.multiply||a.effect.set||0;t.push({id:`buff_${e++}`,ruleId:a.id,sourceCardId:"council_modifier",targetCardId:r.card.id,description:`COUNCIL: ${a.description}`,value:i,isMultiplier:a.effect.multiply!==void 0,isSet:a.effect.set!==void 0,applied:!1})}}for(const a of this.state.playedCards)for(const s of a.card.rules){if(!this.checkRuleCondition(s,a))continue;const r=this.findRuleTargets(s,a);for(const i of r){const o=this.calculateRuleValue(s,a);t.push({id:`buff_${e++}`,ruleId:s.id,sourceCardId:a.card.id,targetCardId:i.card.id,description:s.description,value:o,isMultiplier:s.effect.multiply!==void 0,isSet:s.effect.set!==void 0,applied:!1})}if(s.effect.returnToHand&&!s.targets.self)for(const i of r)i.returnToHand=!0}return t}findModifierTargets(t){var a;const e=[];for(const s of this.state.playedCards){let r=!1;t.targets.type!==void 0&&(r=s.card.type===t.targets.type),t.targets.color!==void 0&&(r=s.card.color===t.targets.color),t.targets.tag!==void 0&&(r=((a=s.card.tags)==null?void 0:a.includes(t.targets.tag))||!1),r&&e.push(s)}return e}findMatchingCards(t,e){if(!t)return this.state.playedCards.filter(s=>s.card.id!==e.card.id);const a=t.includeSelf??!1;return this.state.playedCards.filter(s=>!(!a&&s.card.id===e.card.id||t.cardId&&s.card.id!==t.cardId||t.type&&s.card.type!==t.type||t.color&&s.card.color!==t.color||t.tag&&!s.card.tags.includes(t.tag)||t.subtype&&s.card.subtype!==t.subtype))}checkRuleCondition(t,e){if(!t.condition)return!0;if(t.condition.position!==void 0&&e.position!==t.condition.position||t.condition.roundState==="last_before_checkpoint"&&this.state.round!==this.state.checkpoint)return!1;if(t.condition.requires){const a=this.findMatchingCards(t.condition.requires,e),s=t.condition.requires.count;if(s===0){if(a.length>0)return!1}else if(s!==void 0){if(a.length<s)return!1}else if(a.length===0)return!1}return!0}findRuleTargets(t,e){if(t.targets.self)return[e];const a=this.state.playedCards.filter(s=>!(s.card.id===e.card.id||t.targets.type&&s.card.type!==t.targets.type||t.targets.color&&s.card.color!==t.targets.color||t.targets.tag&&!s.card.tags.includes(t.targets.tag)||t.targets.subtype&&s.card.subtype!==t.targets.subtype||t.targets.position!==void 0&&s.position!==t.targets.position));return a.length===0?[]:t.targets.limit==="highest_base"?[a.reduce((s,r)=>r.card.baseScore>s.card.baseScore?r:s,a[0])]:a}calculateRuleValue(t,e){var s;let a=0;if(t.effect.add!==void 0?a=t.effect.add:t.effect.multiply!==void 0?a=t.effect.multiply:t.effect.set!==void 0&&(a=t.effect.set),t.effect.perCard){const r=this.findMatchingCards(t.effect.matchRequirements??((s=t.condition)==null?void 0:s.requires),e);a*=r.length}return t.effect.perHandCard&&(a*=this.state.hand.length),a}startNextRound(){if(this.state.gamePhase!==C.SCORE)throw new Error("Cannot start next round in current phase");const t=[],e=[],a=[];for(const r of this.state.playedCards)r.persistsForTurns!==void 0?(r.turnsInPlay=(r.turnsInPlay||0)+1,r.turnsInPlay<r.persistsForTurns?(t.push(r),this.advanceDelayedBonuses(r),this.emit({type:"card_persists",card:r.card,turnsRemaining:r.persistsForTurns-r.turnsInPlay})):r.returnToHand?e.push(r.card):a.push(r.card)):r.returnToHand?e.push(r.card):a.push(r.card);this.state.playedCards=t,e.length>0&&(this.state.hand.push(...e),this.emit({type:"cards_returned_to_hand",cards:e})),this.processPostScoreEffects(),this.state.score=0;const s=Math.max(0,6-this.state.hand.length);if(s>0){const r=this.drawCards(s);r.length>0&&this.emit({type:"cards_drawn",cards:r})}a.length>0&&this.state.discardPile.push(...a),this.state.round++,this.state.gamePhase=C.PLAY,this.emit({type:"round_start",round:this.state.round}),this.generateModifier()}getHand(){return[...this.state.hand]}getPlayedCards(){return[...this.state.playedCards]}getCurrentScore(){return this.state.score}getTargetScore(){return this.state.targetScore}getRound(){return this.state.round}getCheckpoint(){return this.state.checkpoint}getCurrency(){return this.state.currency}getPlayerDeck(){return[...this.state.playerDeck]}getPlayerStats(){return{...this.state.playerStats}}getAvailableSlotCount(){return this.slotManager.getAvailableSlotCount()}getMaxSlotCount(){return this.slotManager.getSlots().length}getCardSlots(){return this.slotManager.getSlots()}enterCheckpoint(){if(this.state.gamePhase!==C.CHECKPOINT)throw new Error("Not at a checkpoint")}continueToNextCheckpoint(){if(this.state.gamePhase!==C.CHECKPOINT)throw new Error("Can only continue from checkpoint phase");this.state.checkpoint+=5,this.state.targetScore=Math.floor(this.state.targetScore*1.5),this.state.deck.length<10&&(this.state.deck.push(...this.state.discardPile),this.state.discardPile=[],this.shuffleDeck(this.state.deck)),this.state.gamePhase=C.SCORE}restartGame(){this.slotManager.reset(),this.state=this.initializeGame()}getDeckDuplicates(){return this.deckManager.getDuplicateGroups(this.state.playerDeck)}getFullDeckGroups(){const t=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playedCards.map(e=>e.card)];return this.deckManager.getDuplicateGroups(t)}canBurnCard(t){return this.deckManager.canBurn(this.state.playerDeck,t)}burnTriple(t){const a=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playerDeck].filter(o=>o.name===t);if(a.length<3)return{success:!1,goldEarned:0};const s=this.deckManager.getRefundValue(a[0].rarity),r=a.slice(0,3),i=[];return r.forEach(o=>{let h=!1;const p=this.state.playerDeck.indexOf(o);if(p>-1&&(i.push(this.state.playerDeck.splice(p,1)[0]),h=!0),!h){const m=this.state.deck.indexOf(o);m>-1&&(i.push(this.state.deck.splice(m,1)[0]),h=!0)}if(!h){const m=this.state.hand.indexOf(o);m>-1&&(i.push(this.state.hand.splice(m,1)[0]),h=!0)}if(!h){const m=this.state.discardPile.indexOf(o);m>-1&&i.push(this.state.discardPile.splice(m,1)[0])}}),this.state.currency+=s,this.emit({type:"cards_burned",cards:i,goldEarned:s}),{success:!0,goldEarned:s}}getDeckRarityDistribution(){return this.deckManager.getRarityDistribution(this.state.playerDeck)}generatePackForSelection(t){const e=this.packGenerator.getPackConfig(t);if(!e||this.state.currency<e.cost)return null;const a=this.packGenerator.generate(t);return{packType:a.packType,cards:a.cards,cost:a.cost}}selectCardFromPack(t,e,a,s){if(this.state.currency<a)return!1;const r=s.find(i=>i.id===e);return r?(this.state.currency-=a,this.state.playerDeck.push({...r}),this.emit({type:"card_purchased",card:r,cost:a}),!0):!1}generatePack(t){const e=this.packGenerator.getPackConfig(t);if(!e||this.state.currency<e.cost)return null;this.state.currency-=e.cost;const a=this.packGenerator.generate(t);return a.cards.forEach(s=>{this.state.playerDeck.push({...s})}),this.emit({type:"pack_opened",cards:a.cards,packType:a.packType}),{packType:a.packType,cards:a.cards,cost:a.cost}}getAvailablePackTypes(){return this.packGenerator.getAvailablePackTypes()}buyBoosterPack(){const t=this.generatePack("base");return t?t.cards:null}getBurnCandidates(){if(this.state.playerDeck.length<3)return null;const t=[...this.state.playerDeck];return this.shuffleDeck(t),t.slice(0,3)}burnCard(t){if(this.state.currency<10)return!1;const a=this.state.playerDeck.findIndex(r=>r.id===t);if(a===-1)return!1;this.state.currency-=10;const s=this.state.playerDeck.splice(a,1)[0];return this.emit({type:"cards_burned",cards:[s],goldEarned:0}),!0}enterShop(){if(this.state.gamePhase!==C.CHECKPOINT)throw new Error("Can only enter shop from checkpoint phase");this.state.gamePhase=C.SHOP}exitShop(){if(this.state.gamePhase!==C.SHOP)throw new Error("Can only exit shop from shop phase");this.reshuffleFromPlayerDeck(),this.state.targetScore=Math.floor(this.state.targetScore*1.2),this.state.checkpoint+=5;const t=Math.floor(this.state.checkpoint/5)-1,e=this.slotManager.checkUnlocks(this.state.round,t,0);this.state.cardSlots=this.slotManager.getSlots(),e>0&&this.emit({type:"slots_unlocked",count:e,totalSlots:this.slotManager.getAvailableSlotCount()}),this.state.cumulativeScore=0,this.state.gamePhase=C.SCORE}getActiveBuffs(){return this.state.playedCards.length===0?[]:this.evaluateAllRules()}generateModifier(){if(!this.state.modifierConfig.enabled)return;const{frequency:t,startRound:e}=this.state.modifierConfig;if(this.state.round<e||(this.state.round-e)%t!==0)return;const a=Math.floor(Math.random()*5),s=fe(a);if(!s)return;const r={id:`modifier_${this.state.round}_${a}`,councilMemberId:a,round:this.state.round,flavorText:s.flavorText,rule:s.rule};this.state.activeModifier=r,this.emit({type:"modifier_generated",modifier:r})}clearModifier(){this.state.activeModifier&&(this.emit({type:"modifier_cleared",modifier:this.state.activeModifier}),this.state.activeModifier=void 0)}getActiveModifier(){return this.state.activeModifier}executeOnPlayEffects(t){const e={drawCards:s=>this.drawCards(s),findMatchingCards:(s,r)=>this.findMatchingCards(s,r),cardMatchesFilter:(s,r)=>this.cardMatchesFilter(s,r),deckHasMatchingCard:s=>this.deckHasMatchingCard(s),addCardsToPlayerDeck:s=>{s.forEach(r=>this.state.playerDeck.push({...r}))},addCardsToDiscard:s=>{this.state.discardPile.push(...s)},removeCardsFromAllZones:s=>this.removeCardsFromGame(s),emit:s=>this.emit(s)},a=s=>{s.type==="pack_bonus_added"&&(s.permanent?this.state.permanentPackBonus+=s.bonus:this.state.packBonusCards+=s.bonus)};this.on(a),this.effectExecutor.executeOnPlayEffects(t,this.state,e),this.off(a)}cardMatchesFilter(t,e){return!(e.color&&t.color!==e.color||e.type&&t.type!==e.type||e.tag&&!t.tags.includes(e.tag)||e.rarity&&t.rarity!==e.rarity)}deckHasMatchingCard(t){return!!(this.state.deck.some(e=>this.cardMatchesFilter(e,t))||this.state.discardPile.some(e=>this.cardMatchesFilter(e,t)))}advanceDelayedBonuses(t){if(t.delayedBonuses)for(const e of t.delayedBonuses)e.turnsRemaining>0&&(e.turnsRemaining-=1)}drawCards(t){const e=[];for(let a=0;a<t;a++){if(this.state.deck.length===0&&this.state.discardPile.length>0){const s=[...this.state.discardPile];this.shuffleDeck(s),this.state.deck=s,this.state.discardPile=[],this.emit({type:"deck_reshuffled"})}if(this.state.deck.length>0){const s=this.state.deck.pop();this.state.hand.push(s),e.push(s)}}return e}debugAddCardToHand(t,e){const a=B(t);if(!a)return;const s=this.cloneCard(a);return this.state.hand.push(s),e!=null&&e.addToPlayerDeck&&this.state.playerDeck.push(this.cloneCard(a)),s}debugAddCardToDeck(t,e){const a=B(t);if(!a)return;const s=(e==null?void 0:e.position)??"top",r=this.cloneCard(a);switch(s){case"bottom":this.state.deck.unshift(r);break;case"shuffle":{const i=Math.floor(Math.random()*(this.state.deck.length+1));this.state.deck.splice(i,0,r);break}case"top":default:this.state.deck.push(r);break}return((e==null?void 0:e.addToPlayerDeck)??!0)&&this.state.playerDeck.push(this.cloneCard(a)),r}debugAddCardToDiscard(t,e){const a=B(t);if(!a)return;const s=this.cloneCard(a);return this.state.discardPile.push(s),((e==null?void 0:e.addToPlayerDeck)??!0)&&this.state.playerDeck.push(this.cloneCard(a)),s}debugAddRandomCards(t,e){const a=[];if(t<=0)return a;for(let s=0;s<t;s++){const r=y[Math.floor(Math.random()*y.length)];if(!r)continue;switch((e==null?void 0:e.destination)??"deck-shuffle"){case"hand":{const o=this.debugAddCardToHand(r.id,{addToPlayerDeck:!0});o&&a.push(o);break}case"deck-top":{const o=this.debugAddCardToDeck(r.id,{position:"top"});o&&a.push(o);break}case"deck-bottom":{const o=this.debugAddCardToDeck(r.id,{position:"bottom"});o&&a.push(o);break}case"discard":{const o=this.debugAddCardToDiscard(r.id);o&&a.push(o);break}case"deck-shuffle":default:{const o=this.debugAddCardToDeck(r.id,{position:"shuffle"});o&&a.push(o);break}}}return a}debugDrawCards(t){return t<=0?[]:this.drawCards(t)}debugRefillHand(){const t=Math.max(0,6-this.state.hand.length);return t===0?[]:this.drawCards(t)}debugClearHand(t){this.state.hand.length!==0&&(((t==null?void 0:t.moveToDiscard)??!0)&&this.state.discardPile.push(...this.state.hand),this.state.hand=[])}debugReshuffleDeck(){this.state.deck.length<=1||this.shuffleDeck(this.state.deck)}removeCardsFromGame(t){const e=[],a=o=>!(t.rarity&&o.rarity!==t.rarity||t.type&&o.type!==t.type||t.tag&&!o.tags.includes(t.tag)),s=this.state.deck.filter(o=>a(o)?(e.push(o),!1):!0);this.state.deck=s;const r=this.state.hand.filter(o=>a(o)?(e.push(o),!1):!0);this.state.hand=r;const i=this.state.discardPile.filter(o=>a(o)?(e.push(o),!1):!0);if(this.state.discardPile=i,e.length>0)for(const o of e){const h=this.state.playerDeck.findIndex(p=>p.id===o.id);h!==-1&&this.state.playerDeck.splice(h,1)}return e}}class b{constructor(t="div",e=""){d(this,"element");d(this,"children",[]);this.element=document.createElement(t),e&&(this.element.className=e)}getElement(){return this.element}addChild(t){this.children.push(t),this.element.appendChild(t.getElement())}removeChild(t){const e=this.children.indexOf(t);e>-1&&(this.children.splice(e,1),this.element.removeChild(t.getElement()))}clearChildren(){this.children.forEach(t=>{this.element.removeChild(t.getElement())}),this.children=[]}setVisible(t){this.element.style.display=t?"":"none"}addClass(t){this.element.classList.add(t)}removeClass(t){this.element.classList.remove(t)}setAttribute(t,e){this.element.setAttribute(t,e)}getAttribute(t){return this.element.getAttribute(t)}}class Me extends b{constructor(){super("div","reaction-bubble");d(this,"duration",1500)}render(){}show(e,a){this.element.textContent=e.text,this.element.className="reaction-bubble",this.element.classList.add(`reaction-${e.type}`);const s=this.element.parentElement;if(s){const r=s.querySelectorAll(".council-seat");if(r[a]){const i=r[a],o=s.getBoundingClientRect(),h=i.getBoundingClientRect(),p=h.left-o.left+h.width/2;this.element.style.left=`${p}px`}}this.element.classList.add("visible"),setTimeout(()=>{this.element.classList.remove("visible")},this.duration)}}const x=[{id:0,name:"LORD VEXOR",title:"Ancient Overlord",backstory:"Conquered three dimensions before breakfast. Believes in traditional villainy and loyal minions.",personality:"Demanding, imperious, values hierarchy and power",preferences:[c.HENCHMAN],auraColor:"#9C27B0"},{id:1,name:"DR. MALICE",title:"Mad Scientist",backstory:"Eight PhDs, zero ethics. Perfected the doomsday device but still seeks the perfect scheme.",personality:"Analytical, critical, obsessed with methodology",preferences:[c.GEAR,c.LOCATION],auraColor:"#00E676"},{id:2,name:"BARON BLACKGOLD",title:"Corporate Villain",backstory:'Built an empire through "aggressive acquisitions." Every scheme is an investment.',personality:"Calculating, business-minded, always evaluating ROI",preferences:[c.CRIME],auraColor:"#FFD700"},{id:3,name:"NIGHTSHADE",title:"Master Infiltrator",backstory:"A ghost in the criminal underworld. Never been caught, never been seen. Appreciates elegance.",personality:"Patient, strategic, values subtlety and craftsmanship",preferences:[],auraColor:"#3F51B5"},{id:4,name:"MADAME MAYHEM",title:"Demolitions Expert",backstory:'Turned explosive expertise into criminal artistry. "Go big or go home" is her motto.',personality:"Direct, action-oriented, values spectacle and boldness",preferences:[],auraColor:"#FF6B00"}];function we(n){return x.find(t=>t.id===n)}class He extends b{constructor(){super("div","demand-banner"),this.element.style.display="none"}render(){}showModifier(t){const e=we(t.councilMemberId);e&&(this.element.innerHTML=`
      <div class="demand-content" data-member-id="${e.id}">
        <div class="demand-header">
          <div class="demand-member-badge" style="border-color: ${e.auraColor}">
            ${e.name}
          </div>
          <div class="demand-flavor">${t.flavorText}</div>
        </div>

        <div class="demand-body">
          <div class="demand-requirement">
            <span class="requirement-label">EFFECT:</span>
            <span class="requirement-text">${t.rule.description}</span>
          </div>
        </div>
      </div>
    `,this.element.style.display="block",this.element.classList.add("active"))}hide(){this.element.classList.remove("active","demand-met"),this.element.style.display="none"}}class _e extends b{constructor(){super("div","game-header");d(this,"roundValue",null);d(this,"checkpointValue",null);d(this,"roundScoreValue",null);d(this,"cumulativeScoreValue",null);d(this,"targetValue",null);d(this,"currencyValue",null);d(this,"scoreFill",null);d(this,"councilSeatsContainer",null);d(this,"reactionBubble");d(this,"demandBanner");this.reactionBubble=new Me,this.demandBanner=new He,this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="council-chamber">
        <!-- Left Column: Demand Banner -->
        <div class="header-left" id="header-left">
          <!-- Demand banner will be appended here -->
        </div>

        <!-- Center Column: Council Title & Seats -->
        <div class="header-center">
          <div class="council-title-banner">
            <div class="title-starburst">
              <h1 class="header-title">THE COUNCIL DECIDES</h1>
            </div>
            <div class="council-subtitle">League of Ultimate Evil - Scheme Approval Board</div>
          </div>

          <div class="council-seats">
            ${x.map(e=>`
              <div class="council-seat-container">
                <div class="council-seat" data-member-id="${e.id}"></div>
                <div class="council-nameplate">${e.name}</div>
              </div>
            `).join("")}
          </div>
        </div>

        <!-- Right Column: Metrics -->
        <div class="header-right">
          <div class="council-metrics">
            <div class="metric-box">
              <span class="metric-label">Audience</span>
              <span class="metric-value">
                <span id="round-value">1</span>/<span id="checkpoint-value">5</span>
              </span>
            </div>

            <div class="metric-box">
              <span class="metric-label">Villain Bucks</span>
              <span class="metric-value" id="currency-value">0</span>
            </div>

            <div class="metric-box">
              <span class="metric-label">This Scheme</span>
              <span class="metric-value" id="round-score-value">0</span>
            </div>

            <div class="metric-box approval-box">
              <span class="metric-label">Council Approval</span>
              <div class="approval-bar">
                <div class="approval-fill" id="score-fill" style="width: 0%"></div>
              </div>
              <span class="approval-text">
                <span id="cumulative-score-value">0</span> / <span id="target-value">75</span>
              </span>
            </div>
          </div>
        </div>
      </div>
    `,this.roundValue=this.element.querySelector("#round-value"),this.checkpointValue=this.element.querySelector("#checkpoint-value"),this.currencyValue=this.element.querySelector("#currency-value"),this.roundScoreValue=this.element.querySelector("#round-score-value"),this.cumulativeScoreValue=this.element.querySelector("#cumulative-score-value"),this.targetValue=this.element.querySelector("#target-value"),this.scoreFill=this.element.querySelector("#score-fill"),this.councilSeatsContainer=this.element.querySelector(".council-seats"),this.councilSeatsContainer&&(this.councilSeatsContainer.style.position="relative",this.councilSeatsContainer.appendChild(this.reactionBubble.getElement()))}render(){}updateRound(e,a){this.roundValue&&(this.roundValue.textContent=e.toString()),this.checkpointValue&&(this.checkpointValue.textContent=a.toString())}updateScore(e,a,s){if(this.roundScoreValue&&(this.roundScoreValue.textContent=e.toString()),this.cumulativeScoreValue&&(this.cumulativeScoreValue.textContent=a.toString()),this.targetValue&&(this.targetValue.textContent=s.toString()),this.scoreFill){const r=Math.min(100,a/s*100);this.scoreFill.style.width=`${r}%`}}updateCurrency(e){this.currencyValue&&(this.currencyValue.textContent=e.toString())}showReaction(e){const a=Math.floor(Math.random()*5);this.reactionBubble.show(e,a)}showModifier(e){this.demandBanner.showModifier(e)}hideModifier(){this.demandBanner.hide()}setupDemandBanner(){const e=document.getElementById("header-left");e&&e.appendChild(this.demandBanner.getElement())}}var S=(n=>(n.DEFAULT="default",n.HOVER="hover",n.SELECTED="selected",n.PLAYABLE="playable",n.DISABLED="disabled",n.BUFFED="buffed",n.PLAYING="playing",n))(S||{});function M(n,t={}){const e=n.baseScore,a=t.finalScore??e,s=a-e;return{card:n,baseScore:e,finalScore:a,scoreChange:s,hasScoreChange:s!==0,buffs:t.buffs??[],buffsReceived:t.buffsReceived??[],buffsGiven:t.buffsGiven??[],uiState:t.uiState??"default",isPlayable:t.isPlayable??!1,isSelected:t.isSelected??!1,onClick:t.onClick,onHover:t.onHover}}class P{constructor(t){d(this,"container");d(this,"displayData");d(this,"scoreElement",null);d(this,"badgeContainer",null);this.displayData=t,this.container=this.createCardElement()}createCardElement(){const t=this.displayData.card,e=document.createElement("div");e.className=this.getCardClasses(),e.setAttribute("data-card-id",t.id),e.setAttribute("data-color",t.color),e.setAttribute("data-type",t.type),e.setAttribute("data-rarity",t.rarity);const a=this.createColorBand();e.appendChild(a);const s=this.createBody();if(e.appendChild(s),this.displayData.buffsReceived.length>0){const r=this.createBuffBadges();this.badgeContainer=r,e.appendChild(r)}return e}createColorBand(){const t=document.createElement("div");t.className="card-color-band";const e=document.createElement("div");return e.className="card-type-badge",e.textContent=this.displayData.card.type.toUpperCase(),t.appendChild(e),t}createBody(){const t=document.createElement("div");t.className="card-body";const e=document.createElement("div");e.className="card-name",e.textContent=this.displayData.card.name,t.appendChild(e);const a=this.createScoreDisplay();if(this.scoreElement=a,t.appendChild(a),this.displayData.card.rules.length>0){const s=this.createRulesSection();t.appendChild(s)}return t}createScoreDisplay(){const t=document.createElement("div");if(t.className="card-score-container",this.displayData.hasScoreChange){t.classList.add("card-score-buffed");const e=document.createElement("div");e.className="card-score-final",e.textContent=this.displayData.finalScore.toString(),t.appendChild(e);const a=document.createElement("div");a.className="card-score-change",a.textContent=`+${this.displayData.scoreChange}`,t.appendChild(a);const s=document.createElement("div");s.className="card-score-base",s.textContent=this.displayData.baseScore.toString(),t.appendChild(s)}else{const e=document.createElement("div");e.className="card-score",e.textContent=this.displayData.baseScore.toString(),t.appendChild(e)}return t}createRulesSection(){const t=document.createElement("div");return t.className="card-rules",this.displayData.card.rules.forEach(e=>{const a=document.createElement("div");a.className="rule-item",a.textContent=e.description,t.appendChild(a)}),t}createBuffBadges(){const t=document.createElement("div");return t.className="buff-badges",this.displayData.buffsReceived.forEach(e=>{const a=document.createElement("div");a.className=`buff-badge ${e.isMultiplier?"multiplier":"additive"}`,a.textContent=e.isMultiplier?`×${e.value}`:`+${e.value}`,a.title=e.description,t.appendChild(a)}),t}getCardClasses(){const t=["card"],e=this.displayData.uiState;return e!==S.DEFAULT&&t.push(`card-${e}`),this.displayData.buffsReceived.length>0&&t.push("card-buffed"),this.displayData.buffsGiven.length>0&&t.push("card-source"),this.displayData.isPlayable&&t.push("card-playable"),this.displayData.isSelected&&t.push("card-selected"),t.join(" ")}update(t){const e=this.displayData;this.displayData=t,(e.uiState!==t.uiState||e.buffsReceived.length!==t.buffsReceived.length||e.buffsGiven.length!==t.buffsGiven.length)&&(this.container.className=this.getCardClasses()),(e.finalScore!==t.finalScore||e.hasScoreChange!==t.hasScoreChange)&&this.updateScore(),e.buffsReceived.length!==t.buffsReceived.length&&this.updateBadges()}updateScore(){if(!this.scoreElement)return;const t=this.scoreElement.parentElement;if(t){const e=this.createScoreDisplay();t.replaceChild(e,this.scoreElement),this.scoreElement=e}}updateBadges(){if(this.badgeContainer&&(this.badgeContainer.remove(),this.badgeContainer=null),this.displayData.buffsReceived.length>0){const t=this.createBuffBadges();this.badgeContainer=t,this.container.appendChild(t)}}getElement(){return this.container}}class N{constructor(t){d(this,"view");d(this,"displayData");this.displayData=t,this.view=new P(t),this.attachEventListeners()}static fromCard(t,e){const a=M(t,{onClick:e});return new N(a)}attachEventListeners(){const t=this.view.getElement();this.displayData.onClick&&t.addEventListener("click",()=>{this.displayData.onClick(this.displayData.card)}),t.addEventListener("mouseenter",()=>{this.handleMouseEnter()}),t.addEventListener("mouseleave",()=>{this.handleMouseLeave()})}handleMouseEnter(){this.displayData.uiState!==S.DISABLED&&(this.updateState(S.HOVER),this.displayData.onHover&&this.displayData.onHover(this.displayData.card))}handleMouseLeave(){this.displayData.isSelected?this.updateState(S.SELECTED):this.displayData.buffsReceived.length>0||this.displayData.buffsGiven.length>0?this.updateState(S.BUFFED):this.displayData.isPlayable?this.updateState(S.PLAYABLE):this.updateState(S.DEFAULT)}updateState(t){this.displayData.uiState!==t&&(this.displayData.uiState=t,this.view.update(this.displayData))}updateDisplayData(t){this.displayData={...this.displayData,...t},t.finalScore!==void 0&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0),this.view.update(this.displayData)}setPlayable(t){this.updateDisplayData({isPlayable:t}),t&&this.displayData.uiState===S.DEFAULT&&this.updateState(S.PLAYABLE)}setSelected(t){this.updateDisplayData({isSelected:t}),this.updateState(t?S.SELECTED:S.DEFAULT)}setBuffs(t,e){this.updateDisplayData({buffsReceived:t,buffsGiven:e}),(t.length>0||e.length>0)&&this.updateState(S.BUFFED)}getCard(){return this.displayData.card}getElement(){return this.view.getElement()}getDisplayData(){return{...this.displayData}}updateCard(t){this.displayData.card=t,this.displayData.baseScore=t.baseScore,this.displayData.finalScore!==this.displayData.baseScore&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0);const e=this.view.getElement(),a=e.parentElement,s=new P(this.displayData);a&&a.replaceChild(s.getElement(),e),this.view=s,this.attachEventListeners()}}class Be extends b{constructor(){super("div","play-area");d(this,"cardsContainer");d(this,"cardComponents",new Map);d(this,"onCardClick");d(this,"maxSlots",3);d(this,"playedCountElement");d(this,"maxCountElement");d(this,"previousSlotCount",3);this.initializeElements()}setOnCardClick(e){this.onCardClick=e}initializeElements(){this.element.innerHTML=`
      <div class="play-area-header">
        <h3 class="area-title">Presenting to Council</h3>
        <div class="scheme-counter">
          <span id="played-count">0</span>/<span id="max-count">3</span> Schemes Presented
        </div>
      </div>
      <div class="play-area-cards" id="play-cards">
        <!-- Card slots will be rendered here -->
      </div>
    `,this.cardsContainer=this.element.querySelector("#play-cards"),this.playedCountElement=this.element.querySelector("#played-count"),this.maxCountElement=this.element.querySelector("#max-count")}render(){}updatePlayedCards(e,a=[],s){this.cardsContainer.innerHTML="",this.cardComponents.clear();const r=s?s.filter(p=>p.state===v.AVAILABLE):[];this.maxSlots=r.length||3;const i=this.maxSlots>this.previousSlotCount,o=this.previousSlotCount,h=[];r.forEach((p,m)=>{const g=document.createElement("div");g.className="scheme-slot",g.dataset.slotPosition=p.position.toString(),i&&m>=o&&(g.classList.add("slot-unlock-animation"),setTimeout(()=>{g.classList.remove("slot-unlock-animation")},1e3));const A=document.createElement("div");A.className="slot-badge",A.textContent=p.label||`SCHEME #${m+1}`,g.appendChild(A);const E=document.createElement("div");E.className="slot-empty",E.textContent="AWAITING SCHEME",g.appendChild(E),h.push(g)}),e.forEach((p,m)=>{var g;if(m<h.length){const A=h[m].querySelector(".slot-empty");A&&A.remove(),h[m].classList.add("active");const E=a.filter(H=>H.targetCardId===p.card.id),k=a.filter(H=>H.sourceCardId===p.card.id),Y=((g=p.scoring)==null?void 0:g.finalScore)??p.card.baseScore,q=M(p.card,{finalScore:Y,buffsReceived:E,buffsGiven:k,onClick:this.onCardClick}),w=new N(q);w.setPlayable(!0),this.cardComponents.set(p.card.id,w),h[m].appendChild(w.getElement())}}),h.forEach(p=>this.cardsContainer.appendChild(p)),this.playedCountElement.textContent=e.length.toString(),this.maxCountElement.textContent=this.maxSlots.toString(),this.previousSlotCount=this.maxSlots}addCard(e){const a=N.fromCard(e);this.cardComponents.set(e.id,a),this.cardsContainer.appendChild(a.getElement()),this.updateCount()}removeCard(e){const a=this.cardComponents.get(e);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(e),this.updateCount())}clearCards(){this.cardsContainer.innerHTML="",this.cardComponents.clear(),this.updateCount()}updateCount(){const e=this.element.querySelector("#played-count");e.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}}class xe extends b{constructor(){super("div","hand-area");d(this,"cardsContainer");d(this,"cardComponents",new Map);d(this,"onCardClick");this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="hand-area-header">
        <h3 class="area-title">Your Scheme Portfolio</h3>
        <div class="card-counter">
          <span id="hand-count">0</span>/6 Schemes
        </div>
      </div>
      <div class="hand-cards" id="hand-cards"></div>
    `,this.cardsContainer=this.element.querySelector("#hand-cards")}render(){}setOnCardClick(e){this.onCardClick=e}updateHand(e){this.cardsContainer.innerHTML="",this.cardComponents.clear(),e.forEach(a=>{const s=N.fromCard(a,this.onCardClick);s.setPlayable(!0),this.cardComponents.set(a.id,s),this.cardsContainer.appendChild(s.getElement())}),this.updateCount()}addCard(e){const a=N.fromCard(e,this.onCardClick);a.setPlayable(!0),this.cardComponents.set(e.id,a),this.cardsContainer.appendChild(a.getElement()),this.updateCount()}removeCard(e){const a=this.cardComponents.get(e);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(e),this.updateCount())}setCardPlayable(e,a){const s=this.cardComponents.get(e);s&&s.setPlayable(a)}setAllCardsPlayable(e){this.cardComponents.forEach(a=>{a.setPlayable(e)})}updateCount(){const e=this.element.querySelector("#hand-count");e.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}}class Ge extends b{constructor(){super("div","game-controls");d(this,"endTurnButton");d(this,"nextRoundButton");d(this,"messageElement");this.initializeElements(),this.setupEventListeners()}initializeElements(){this.element.innerHTML=`
      <div class="controls-left">
        <button id="end-turn-btn" class="btn btn-primary">PRESENT SCHEMES!</button>
        <button id="next-round-btn" class="btn btn-success" disabled>NEXT AUDIENCE</button>
      </div>
      <div class="controls-right">
        <div class="message-display" id="message-display"></div>
      </div>
    `,this.endTurnButton=this.element.querySelector("#end-turn-btn"),this.nextRoundButton=this.element.querySelector("#next-round-btn"),this.messageElement=this.element.querySelector("#message-display")}setupEventListeners(){}render(){}setOnEndTurn(e){this.endTurnButton.addEventListener("click",e)}setOnNextRound(e){this.nextRoundButton.addEventListener("click",e)}updateButtonStates(e,a,s){switch(this.endTurnButton.dataset.slotLimit=String(s),this.nextRoundButton.dataset.slotLimit=String(s),e){case"play":this.endTurnButton.disabled=a===0,this.nextRoundButton.disabled=!0;break;case"score":case"checkpoint":case"game_end":this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!1;break;default:this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!0}}showMessage(e,a="info"){this.messageElement.textContent=e,this.messageElement.className=`message-display show message-${a}`,setTimeout(()=>{this.messageElement.className="message-display"},3e3)}setEndTurnButtonEnabled(e){this.endTurnButton.disabled=!e}setNextRoundButtonEnabled(e){this.nextRoundButton.disabled=!e}}class Ue extends b{constructor(){super("div","game-layout");d(this,"header");d(this,"playArea");d(this,"handArea");d(this,"controls");this.header=new _e,this.playArea=new Be,this.handArea=new xe,this.controls=new Ge,this.setupLayout()}setupLayout(){const e=document.createElement("div");e.className="layout-container",e.appendChild(this.header.getElement()),e.appendChild(this.playArea.getElement()),e.appendChild(this.handArea.getElement()),e.appendChild(this.controls.getElement()),this.element.appendChild(e)}render(){this.header.render(),this.playArea.render(),this.handArea.render(),this.controls.render()}getHeader(){return this.header}getPlayArea(){return this.playArea}getHandArea(){return this.handArea}getControls(){return this.controls}getGameArea(){return{getPlayArea:()=>this.playArea,getHandArea:()=>this.handArea}}getStats(){return this.controls}}class $e extends b{constructor(){super("div","toast-container");d(this,"container");d(this,"activeToasts",new Set);this.setupContainer()}setupContainer(){this.element.style.cssText=`
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      z-index: 9000;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      pointer-events: none;
    `,this.container=this.element}show(e){const{message:a,type:s,duration:r=3e3}=e,i=document.createElement("div");i.className=`toast toast-${s}`,i.style.cssText=`
      pointer-events: auto;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    `,i.innerHTML=`
      <div class="toast-content">
        <div class="toast-icon">${this.getIcon(s)}</div>
        <div class="toast-message">${a}</div>
        <button class="toast-close">×</button>
      </div>
    `,this.container.appendChild(i),this.activeToasts.add(i);const o=i.querySelector(".toast-close");o&&o.addEventListener("click",()=>this.dismiss(i)),setTimeout(()=>{i.style.opacity="1",i.style.transform="translateX(0)"},50),r>0&&setTimeout(()=>{this.dismiss(i)},r)}getIcon(e){switch(e){case"success":return"✓";case"error":return"✗";case"info":return"ⓘ"}}dismiss(e){e.style.opacity="0",e.style.transform="translateX(100%)",setTimeout(()=>{e.parentElement&&e.remove(),this.activeToasts.delete(e)},300)}render(){}}class V extends b{constructor(e){super("div","card-selection-overlay");d(this,"config");d(this,"selectedIndex",null);this.config=e,this.setupOverlay()}setupOverlay(){this.element.style.cssText=`
      position: fixed;
      inset: 0;
      z-index: 5000;
      background: rgba(0, 0, 0, 0.9);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 2rem;
    `;const e=this.createTitle();this.element.appendChild(e);const a=this.createCardsContainer();this.element.appendChild(a);const s=this.createInstructions();this.element.appendChild(s);const r=this.createCancelButton();this.element.appendChild(r)}createTitle(){const e=document.createElement("h2");return e.textContent=this.config.title,e.style.cssText=`
      color: var(--comic-yellow);
      font-family: var(--font-title);
      font-size: 3rem;
      text-shadow: 3px 3px 0 var(--comic-red);
    `,e}createCardsContainer(){const e=document.createElement("div");return e.style.cssText=`
      display: flex;
      gap: 2rem;
      justify-content: center;
      align-items: center;
    `,this.config.cards.forEach((a,s)=>{const r=this.createCardSlot(a,s);e.appendChild(r)}),e}createCardSlot(e,a){const s=document.createElement("div");s.className="card-selection-slot",s.style.cssText=`
      cursor: pointer;
      transition: transform 0.2s ease, filter 0.2s ease;
    `;const r=new P(M(e));return s.appendChild(r.getElement()),s.addEventListener("mouseenter",()=>{s.style.transform="scale(1.1) translateY(-10px)"}),s.addEventListener("mouseleave",()=>{this.selectedIndex!==a&&(s.style.transform="scale(1)")}),s.addEventListener("click",()=>this.handleCardClick(s,e,a)),s}handleCardClick(e,a,s){if(this.selectedIndex!==null)return;this.selectedIndex=s,this.config.onSelect(a)?(e.style.transform="scale(1.2)",e.style.filter="brightness(1.5)",setTimeout(()=>{this.close()},800)):this.close()}createInstructions(){const e=document.createElement("p");return e.textContent=this.config.instruction,e.style.cssText=`
      color: white;
      font-family: var(--font-body);
      font-size: 1.2rem;
    `,e}createCancelButton(){const e=document.createElement("button");return e.textContent="CANCEL",e.style.cssText=`
      padding: 1rem 2rem;
      font-family: var(--font-title);
      font-size: 1.5rem;
      background: #666;
      color: white;
      border: 3px solid #333;
      cursor: pointer;
      transition: all 0.2s ease;
    `,e.addEventListener("click",()=>{var a,s;(s=(a=this.config).onCancel)==null||s.call(a),this.close()}),e.addEventListener("mouseenter",()=>{e.style.background="#888"}),e.addEventListener("mouseleave",()=>{e.style.background="#666"}),e}render(){}show(){document.body.appendChild(this.element)}close(){this.element.remove()}}class Fe extends b{constructor(e){super("div","shop-layout");d(this,"gameEngine");d(this,"activeTab","deck");d(this,"onExitCallback");d(this,"toast");this.gameEngine=e,this.toast=new $e,this.setupLayout(),this.element.appendChild(this.toast.getElement())}setupLayout(){this.element.innerHTML=`
      <!-- Merchant Header -->
      <div class="shop-header">
        <div class="merchant-banner">
          <div class="merchant-title">
            <h1 class="shop-title">BACK-ALLEY DEALS</h1>
            <div class="merchant-subtitle">Proprietor: Cut-Throat Iblis</div>
          </div>
          <div class="shop-currency">
            <span class="currency-label">ILL-GOTTEN GAINS</span>
            <span class="currency-value" id="shop-currency">0</span>
          </div>
        </div>

        <!-- Tab Navigation -->
        <div class="shop-tabs">
          <button class="shop-tab active" data-tab="deck">
            <span class="tab-label">YOUR STASH</span>
          </button>
          <button class="shop-tab" data-tab="packs">
            <span class="tab-label">THE GOODS</span>
          </button>
        </div>
      </div>

      <!-- Tab Content -->
      <div class="shop-content">
        <!-- Deck Tab -->
        <div class="shop-tab-panel active" data-panel="deck">
          <div class="deck-viewer">
            <div class="deck-header">
              <h2>Your Scheme Collection</h2>
              <div class="deck-stats" id="deck-stats"></div>
            </div>
            <div class="deck-cards" id="deck-cards">
              <!-- Cards will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Packs Tab -->
        <div class="shop-tab-panel" data-panel="packs">
          <div class="pack-shop">
            <div class="merchant-speech">
              <div class="speech-bubble">
                "GUARANTEED to ruin heroes! NO REFUNDS!"
              </div>
            </div>
            <div class="pack-list" id="pack-list">
              <!-- Pack options will be rendered here -->
            </div>
          </div>
        </div>
      </div>

      <!-- Footer Controls -->
      <div class="shop-footer">
        <button class="shop-exit-btn" id="shop-exit">
          RETURN TO COUNCIL CHAMBER
        </button>
      </div>
    `,this.attachEventListeners()}attachEventListeners(){this.element.querySelectorAll(".shop-tab").forEach(s=>{s.addEventListener("click",()=>{const r=s.getAttribute("data-tab");this.switchTab(r)})});const a=this.element.querySelector("#shop-exit");a&&a.addEventListener("click",()=>{var s;(s=this.onExitCallback)==null||s.call(this)})}switchTab(e){this.activeTab=e,this.element.querySelectorAll(".shop-tab").forEach(r=>{r.getAttribute("data-tab")===e?r.classList.add("active"):r.classList.remove("active")}),this.element.querySelectorAll(".shop-tab-panel").forEach(r=>{r.getAttribute("data-panel")===e?r.classList.add("active"):r.classList.remove("active")}),this.renderActiveTab()}render(){this.updateCurrency(),this.renderActiveTab()}renderActiveTab(){this.activeTab==="deck"?this.renderDeck():this.renderPackShop()}updateCurrency(){const e=this.element.querySelector("#shop-currency");if(e){const a=this.gameEngine.getState();e.textContent=a.currency.toString()}}renderDeck(){const e=this.element.querySelector("#deck-cards");if(!e)return;const a=this.gameEngine.getFullDeckGroups(),s=this.gameEngine.getDeckDuplicates(),r=this.mergeCardGroups(a,s);if(r.length===0){e.innerHTML='<div class="empty-deck">No schemes in your stash yet!<br>Buy some packs to get started.</div>';return}e.innerHTML="",r.forEach(i=>{const o=i.cards[0],h=document.createElement("div");h.className="deck-card-group";const p=document.createElement("div");p.className="stash-card-wrapper";const m=new P(M(o));p.appendChild(m.getElement());const g=document.createElement("div");g.className="card-overlay",g.innerHTML=`<div class="card-count-badge">×${i.count}</div>`,p.appendChild(g),h.appendChild(p),e.appendChild(h)}),this.updateDeckStats()}mergeCardGroups(e,a){const s=new Map;return e.forEach(r=>{s.set(r.cardName,{...r,inGame:r.count,inStash:0})}),a.forEach(r=>{if(s.has(r.cardName)){const i=s.get(r.cardName);i.cards=[...i.cards,...r.cards],i.count+=r.count,i.inStash=r.count}else s.set(r.cardName,{...r,inGame:0,inStash:r.count})}),s.forEach(r=>{r.canBurn=r.count>=3}),Array.from(s.values())}updateDeckStats(){const e=this.element.querySelector("#deck-stats");if(!e)return;const a=this.gameEngine.getState(),s=this.gameEngine.getDeckRarityDistribution();e.innerHTML=`
      <span>Total: ${a.playerDeck.length}</span>
      <span>Common: ${s.common}</span>
      <span>Uncommon: ${s.uncommon}</span>
      <span>Rare: ${s.rare}</span>
      <span>Legendary: ${s.legendary}</span>
    `}renderPackShop(){const e=this.element.querySelector("#pack-list");if(!e)return;const a=this.gameEngine.getAvailablePackTypes(),s=this.gameEngine.getState(),r=a.map(E=>{const k=s.currency>=E.cost;return`
        <div class="pack-card ${k?"":"disabled"}">
          <div class="pack-header">
            <h3 class="pack-name">${E.name}</h3>
            <div class="pack-cost">${E.cost} BUCKS</div>
          </div>
          <div class="pack-description">${E.description||""}</div>
          <button
            class="pack-buy-btn"
            data-pack-type="${E.id}"
            ${k?"":"disabled"}
          >
            ${k?"BUY NOW!":"TOO POOR!"}
          </button>
        </div>
      `}).join(""),i=10,o=this.gameEngine.getState().playerDeck.length>=3,h=s.currency>=i,p=o&&h;let m="BUY NOW!";o?h||(m="TOO POOR!"):m="NEED 3+ CARDS!";const g=`
      <div class="pack-card ${p?"":"disabled"}">
        <div class="pack-header">
          <h3 class="pack-name">BURN CARD</h3>
          <div class="pack-cost">${i} BUCKS</div>
        </div>
        <div class="pack-description">Remove a card permanently from your deck</div>
        <button
          class="pack-buy-btn"
          data-pack-type="burn"
          ${p?"":"disabled"}
        >
          ${m}
        </button>
      </div>
    `;e.innerHTML=r+g,e.querySelectorAll(".pack-buy-btn").forEach(E=>{E.addEventListener("click",()=>{const k=E.getAttribute("data-pack-type");k==="burn"?this.startBurnCard():k&&this.buyPack(k)})})}buyPack(e){const a=this.gameEngine.generatePackForSelection(e);if(a)this.startPackSelectionCutscene(a);else{const s=this.gameEngine.getAvailablePackTypes().find(i=>i.id===e),r=(s==null?void 0:s.cost)||0;this.toast.show({message:`Not enough Villain Bucks! Need ${r}, have ${this.gameEngine.getCurrency()}`,type:"error",duration:3e3})}}startPackSelectionCutscene(e){new V({cards:e.cards,title:"Pick your scheme!",instruction:"Click a card to add it to your deck",onSelect:s=>this.gameEngine.selectCardFromPack(e.packType,s.id,e.cost,e.cards)?(this.toast.show({message:`Added ${s.name} to your deck!`,type:"success",duration:3e3}),this.render(),!0):!1}).show()}startBurnCard(){const e=this.gameEngine.getBurnCandidates();if(!e){this.toast.show({message:"Need at least 3 cards in your deck to burn!",type:"error",duration:3e3});return}new V({cards:e,title:"Burn a card",instruction:"Click a card to destroy it permanently - this cannot be undone!",onSelect:s=>this.gameEngine.burnCard(s.id)?(this.toast.show({message:`Burned ${s.name}!`,type:"success",duration:3e3}),this.render(),!0):(this.toast.show({message:"Not enough currency! Need 10 bucks to burn.",type:"error",duration:3e3}),!1)}).show()}onExit(e){this.onExitCallback=e}}class Ve extends b{constructor(e){super("div","devtools-panel");d(this,"gameEngine");d(this,"isOpen",!1);d(this,"onStateChangeCallback");this.gameEngine=e,this.setupLayout(),this.attachEventListeners(),this.hide()}setupLayout(){this.element.innerHTML=`
      <div class="devtools-header">
        <div class="devtools-title">
          <span class="debug-badge">DEBUG</span>
          <span>Developer Tools</span>
        </div>
        <button class="devtools-close" id="devtools-close">×</button>
      </div>

      <div class="devtools-tabs">
        <button class="devtools-tab active" data-tab="currency">Currency</button>
        <button class="devtools-tab" data-tab="deck">Deck</button>
        <button class="devtools-tab" data-tab="game">Game State</button>
        <button class="devtools-tab" data-tab="info">Info</button>
      </div>

      <div class="devtools-content">
        <!-- Currency Tab -->
        <div class="devtools-tab-panel active" data-panel="currency">
          <h3>Currency Manipulation</h3>
          <div class="devtools-section">
            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="add-currency" data-amount="50">+50</button>
              <button class="devtools-btn" data-action="add-currency" data-amount="100">+100</button>
              <button class="devtools-btn" data-action="add-currency" data-amount="500">+500</button>
              <button class="devtools-btn" data-action="set-currency" data-amount="0">Reset to 0</button>
            </div>
            <div class="devtools-input-group">
              <input type="number" id="currency-input" placeholder="Exact amount" value="100" />
              <button class="devtools-btn" data-action="set-currency-input">Set</button>
            </div>
            <div class="devtools-info" id="current-currency">Current: 0</div>
          </div>
        </div>

        <!-- Deck Tab -->
        <div class="devtools-tab-panel" data-panel="deck">
          <h3>Deck &amp; Hand Management</h3>
          <div class="devtools-section">
            <div class="devtools-input-group">
              <select id="card-select" style="flex: 1;">
                <option value="">Select a card...</option>
              </select>
            </div>
            <div class="devtools-input-group">
              <select id="card-destination" style="flex: 1;">
                <option value="hand">Add to Hand</option>
                <option value="deck-top">Add to Top of Deck</option>
                <option value="deck-bottom">Add to Bottom of Deck</option>
                <option value="deck-shuffle">Add to Deck (Shuffle In)</option>
                <option value="discard">Add to Discard</option>
              </select>
              <button class="devtools-btn" data-action="add-selected-card">Add</button>
            </div>

            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="add-random-cards" data-count="3">+3 Random (Deck)</button>
              <button class="devtools-btn" data-action="reshuffle-deck">Reshuffle Draw Pile</button>
              <button class="devtools-btn" data-action="clear-deck">Clear Player Deck</button>
            </div>

            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="refill-hand">Refill Hand to 6</button>
              <button class="devtools-btn" data-action="draw-one">Draw 1 Card</button>
              <button class="devtools-btn" data-action="clear-hand">Clear Hand</button>
            </div>

            <div class="devtools-info" id="deck-info">Player deck: 0 cards</div>
            <div class="devtools-info" id="hand-info">Hand: 0 cards</div>
            <div class="devtools-info" id="discard-info">Discard: 0 cards</div>
          </div>
        </div>

        <!-- Game State Tab -->
        <div class="devtools-tab-panel" data-panel="game">
          <h3>Game State Control</h3>
          <div class="devtools-section">
            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="jump-checkpoint">Jump to Checkpoint (Round 5)</button>
              <button class="devtools-btn" data-action="force-shop">Force Shop Phase</button>
            </div>
            <div class="devtools-input-group">
              <label>Round:</label>
              <input type="number" id="round-input" min="1" value="1" />
              <button class="devtools-btn" data-action="set-round">Set</button>
            </div>
            <div class="devtools-input-group">
              <label>Target Score:</label>
              <input type="number" id="target-input" min="1" value="75" />
              <button class="devtools-btn" data-action="set-target">Set</button>
            </div>
            <div class="devtools-info" id="game-info">
              Round: 1 | Phase: play | Target: 75
            </div>
          </div>
        </div>

        <!-- Info Tab -->
        <div class="devtools-tab-panel" data-panel="info">
          <h3>Keyboard Shortcuts</h3>
          <div class="devtools-section">
            <div class="shortcut-list">
              <div class="shortcut-item">
                <kbd>\`</kbd>
                <span>Toggle DevTools</span>
              </div>
              <div class="shortcut-item">
                <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>
                <span>Toggle DevTools (alternative)</span>
              </div>
            </div>
            <div class="devtools-warning">
              ⚠️ DevTools are only available in development mode
            </div>
          </div>
        </div>
      </div>
    `,this.populateCardSelect()}populateCardSelect(){const e=this.element.querySelector("#card-select");e&&y.forEach(a=>{const s=document.createElement("option");s.value=a.id,s.textContent=`${a.name} (${a.type}, ${a.rarity})`,e.appendChild(s)})}attachEventListeners(){const e=this.element.querySelector("#devtools-close");e==null||e.addEventListener("click",()=>this.hide()),this.element.querySelectorAll(".devtools-tab").forEach(s=>{s.addEventListener("click",()=>{const r=s.getAttribute("data-tab");this.switchTab(r)})}),this.element.addEventListener("click",s=>{const r=s.target,i=r.getAttribute("data-action");i&&this.handleAction(i,r)}),document.addEventListener("keydown",s=>{s.key==="`"&&(s.preventDefault(),this.toggle()),s.ctrlKey&&s.shiftKey&&s.key==="D"&&(s.preventDefault(),this.toggle())})}switchTab(e){this.element.querySelectorAll(".devtools-tab").forEach(r=>{r.getAttribute("data-tab")===e?r.classList.add("active"):r.classList.remove("active")}),this.element.querySelectorAll(".devtools-tab-panel").forEach(r=>{r.getAttribute("data-panel")===e?r.classList.add("active"):r.classList.remove("active")}),this.updateInfo()}handleAction(e,a){var s,r;switch(e){case"add-currency":{const i=parseInt(a.getAttribute("data-amount")||"0");this.gameEngine.state.currency+=i;break}case"set-currency":{const i=parseInt(a.getAttribute("data-amount")||"0");this.gameEngine.state.currency=i;break}case"set-currency-input":{const i=this.element.querySelector("#currency-input"),o=parseInt(i.value||"0");this.gameEngine.state.currency=o;break}case"add-random-cards":{const i=parseInt(a.getAttribute("data-count")||"3"),o=a.getAttribute("data-destination");this.gameEngine.debugAddRandomCards(i,{destination:o??"deck-shuffle"});break}case"add-selected-card":{const o=this.element.querySelector("#card-select").value,h=((s=this.element.querySelector("#card-destination"))==null?void 0:s.value)||"hand";if(o)switch(h){case"deck-top":this.gameEngine.debugAddCardToDeck(o,{position:"top"});break;case"deck-bottom":this.gameEngine.debugAddCardToDeck(o,{position:"bottom"});break;case"deck-shuffle":this.gameEngine.debugAddCardToDeck(o,{position:"shuffle"});break;case"discard":this.gameEngine.debugAddCardToDiscard(o);break;case"hand":default:this.gameEngine.debugAddCardToHand(o);break}break}case"clear-deck":{this.gameEngine.state.playerDeck=[],this.gameEngine.state.deck=[],this.gameEngine.state.discardPile=[];break}case"refill-hand":{this.gameEngine.debugRefillHand();break}case"clear-hand":{this.gameEngine.debugClearHand();break}case"draw-one":{this.gameEngine.debugDrawCards(1);break}case"reshuffle-deck":{this.gameEngine.debugReshuffleDeck();break}case"jump-checkpoint":{this.gameEngine.state.round=5,this.gameEngine.state.cumulativeScore=this.gameEngine.state.targetScore;break}case"force-shop":{this.gameEngine.state.gamePhase="shop";break}case"set-round":{const i=this.element.querySelector("#round-input");this.gameEngine.state.round=parseInt(i.value||"1");break}case"set-target":{const i=this.element.querySelector("#target-input");this.gameEngine.state.targetScore=parseInt(i.value||"75");break}}this.updateInfo(),(r=this.onStateChangeCallback)==null||r.call(this)}updateInfo(){const e=this.gameEngine.getState(),a=this.element.querySelector("#current-currency");a&&(a.textContent=`Current: ${e.currency}`);const s=this.element.querySelector("#deck-info");s&&(s.textContent=`Player deck: ${e.playerDeck.length} cards | Draw pile: ${e.deck.length} cards`);const r=this.element.querySelector("#hand-info");if(r){const m=e.hand.length===1?"card":"cards";r.textContent=`Hand: ${e.hand.length} ${m}`}const i=this.element.querySelector("#discard-info");if(i){const m=e.discardPile.length===1?"card":"cards";i.textContent=`Discard: ${e.discardPile.length} ${m}`}const o=this.element.querySelector("#game-info");o&&(o.textContent=`Round: ${e.round} | Phase: ${e.gamePhase} | Target: ${e.targetScore}`);const h=this.element.querySelector("#round-input");h&&(h.value=e.round.toString());const p=this.element.querySelector("#target-input");p&&(p.value=e.targetScore.toString())}toggle(){this.isOpen?this.hide():this.show()}show(){this.isOpen=!0,this.element.classList.add("open"),this.updateInfo()}hide(){this.isOpen=!1,this.element.classList.remove("open")}onStateChange(e){this.onStateChangeCallback=e}render(){}}class Ye{constructor(){d(this,"container");this.container=document.createElement("div"),this.container.className="comic-effects-container",document.body.appendChild(this.container)}show(t,e,a){const s=document.createElement("div");s.className="comic-effect",s.textContent=t,s.style.left=`${e}px`,s.style.top=`${a}px`,this.container.appendChild(s),setTimeout(()=>{s.classList.add("active")},10),setTimeout(()=>{s.remove()},1e3)}showRandom(t,e){const a=["POW!","BAM!","WHAM!","ZAP!","BOOM!","KAPOW!","SMASH!"],s=a[Math.floor(Math.random()*a.length)];this.show(s,t,e)}showForCardType(t,e,a){const r={crime:["SCHEME!","PLOT!","HEIST!"],henchman:["HIRED!","RECRUITED!","GOON!"],location:["LAIR!","HIDEOUT!","BASE!"],gear:["GADGET!","WEAPON!","TECH!"]}[t.toLowerCase()]||["POW!"],i=r[Math.floor(Math.random()*r.length)];this.show(i,e,a)}}class qe{constructor(){d(this,"container");d(this,"isPlaying",!1);this.container=document.createElement("div"),this.container.className="score-cutscene-container",this.container.style.display="none"}async play(t,e,a){if(this.isPlaying)return;this.isPlaying=!0;let s=!1;const r=()=>{s=!0,this.skip()},i=document.querySelector(".game-layout");if(!i){a();return}if(i.classList.add("cutscene-mode"),this.buildCutsceneOverlay(t,e),i.appendChild(this.container),this.container.style.display="flex",setTimeout(()=>{s||(document.addEventListener("click",r,{once:!0}),document.addEventListener("keydown",o=>{(o.key===" "||o.key==="Escape")&&r()},{once:!0}))},300),await this.wait(100),this.container.classList.add("active"),!s){for(let o=0;o<t.length&&!s;o++)await this.animateCard(o),await this.wait(600);s||(await this.animateTotal(),await this.wait(1200))}await this.cleanup(i),this.isPlaying=!1,a()}buildCutsceneOverlay(t,e){this.container.innerHTML=`
      <div class="cutscene-letterbox cutscene-letterbox-top"></div>

      <div class="cutscene-content">
        <div class="cutscene-cards">
          ${t.map((a,s)=>`
            <div class="cutscene-card" data-index="${s}">
              <div class="cutscene-card-name">${a.card.name}</div>
              <div class="cutscene-card-type">${a.card.type}</div>

              <div class="cutscene-scoring-area">
                <div class="base-score-display">
                  <div class="score-label-small">BASE</div>
                  <div class="score-base" data-base="${a.baseScore}">${a.baseScore}</div>
                </div>

                ${a.bonusScore>0||a.synergies.length>0?`
                  <div class="synergy-effects">
                    ${a.synergies.map(r=>`
                      <div class="synergy-shout">${this.getSynergyShout(r)}</div>
                    `).join("")}
                    ${a.bonusScore>0?`
                      <div class="bonus-score-anim">+${a.bonusScore}</div>
                    `:""}
                  </div>
                `:""}

                <div class="final-score-burst">
                  <div class="burst-inner">
                    <div class="score-final" data-final="${a.totalScore}">${a.totalScore}</div>
                    <div class="score-suffix">PTS!</div>
                  </div>
                </div>
              </div>
            </div>
          `).join("")}
        </div>

        <div class="cutscene-total">
          <div class="total-label">TOTAL SCORE</div>
          <div class="total-value">${e}</div>
          <div class="total-suffix">POINTS!</div>
        </div>
      </div>

      <div class="cutscene-letterbox cutscene-letterbox-bottom">
        <div class="skip-hint">Click or press SPACE to skip</div>
      </div>
    `}getSynergyShout(t){const e=["COMBO!","SYNERGY!","BOOM!","POW!","WHAM!","KAPOW!","NICE!","SWEET!"],a=t.length%e.length;return e[a]}async animateCard(t){const e=this.container.querySelector(`.cutscene-card[data-index="${t}"]`);if(!e)return;e.classList.add("active"),await this.wait(400);const a=e.querySelector(".base-score-display");a&&(a.classList.add("show"),await this.wait(300));const s=e.querySelectorAll(".synergy-shout");for(const o of Array.from(s))o.classList.add("show"),await this.wait(200);const r=e.querySelector(".bonus-score-anim");r&&(r.classList.add("show"),await this.wait(300));const i=e.querySelector(".final-score-burst");return i&&(i.classList.add("show"),await this.wait(400)),this.wait(100)}async animateTotal(){const t=this.container.querySelector(".cutscene-total");if(t)return t.classList.add("active"),this.wait(400)}skip(){this.container.querySelectorAll(".cutscene-card").forEach(a=>{a.classList.add("active"),a.querySelectorAll(".base-score-display, .synergy-shout, .bonus-score-anim, .final-score-burst").forEach(s=>s.classList.add("show"))});const e=this.container.querySelector(".cutscene-total");e&&e.classList.add("active")}async cleanup(t){this.container.classList.remove("active"),await this.wait(300),t.classList.remove("cutscene-mode"),this.container.style.display="none",this.container.remove()}wait(t){return new Promise(e=>setTimeout(e,t))}isActive(){return this.isPlaying}}class We extends b{constructor(t){super("div","error-container"),this.buildErrorUI(t)}buildErrorUI(t){const e=document.createElement("div");e.className="error-content";const a=document.createElement("h2");a.textContent=t.title,e.appendChild(a);const s=document.createElement("p");if(s.textContent=t.message,e.appendChild(s),t.showReloadButton!==!1){const r=document.createElement("button");r.className="btn btn-primary",r.textContent="Reload Page",r.addEventListener("click",()=>location.reload()),e.appendChild(r)}this.element.appendChild(e)}render(){}show(){document.body.appendChild(this.element)}close(){this.element.remove()}}var f=(n=>(n.POSITIVE="positive",n.NEUTRAL="neutral",n.NEGATIVE="negative",n))(f||{});c.HENCHMAN,f.POSITIVE,f.NEUTRAL,f.POSITIVE,f.NEUTRAL,f.POSITIVE,c.CRIME,f.POSITIVE,f.POSITIVE,f.NEUTRAL,f.POSITIVE,f.NEGATIVE,c.LOCATION,f.POSITIVE,f.POSITIVE,f.NEUTRAL,f.POSITIVE,f.NEUTRAL,c.GEAR,f.POSITIVE,f.POSITIVE,f.NEUTRAL,f.POSITIVE,f.NEUTRAL,f.POSITIVE,f.POSITIVE,f.POSITIVE,f.POSITIVE,f.POSITIVE,f.NEUTRAL,f.NEUTRAL,f.NEUTRAL,f.NEUTRAL,f.NEUTRAL,f.NEGATIVE,f.NEGATIVE,f.NEGATIVE,f.NEGATIVE,f.NEGATIVE;const ze={0:{henchman_positive:["LOYAL SERVANTS!","BUILD YOUR ARMY!","PROPER MINIONS!","KNOW YOUR PLACE!"],henchman_neutral:["MORE SUBJECTS!","EXPENDABLE PAWNS!"],crime_positive:["DEMONSTRATE POWER!","CONQUER!","DOMINATE!"],gear_neutral:["TOOLS OF CONQUEST!","ADEQUATE ARMAMENT!"],location_positive:["CLAIM TERRITORY!","EXPAND YOUR DOMAIN!"],high_score:["EXCELLENT!","WORTHY!","THIS PLEASES ME!"],medium_score:["ACCEPTABLE!","PROCEED!"],low_score:["INSUFFICIENT!","PATHETIC!","YOU DARE?!"]},1:{henchman_neutral:["TEST SUBJECTS!","ADEQUATE SPECIMENS!"],crime_neutral:["INTERESTING HYPOTHESIS!","VIABLE APPROACH!"],gear_positive:["FASCINATING DEVICE!","CLEVER ENGINEERING!","INGENIOUS!"],location_positive:["EXCELLENT LAB!","PROPER FACILITIES!","IDEAL WORKSPACE!"],high_score:["SCIENTIFICALLY SOUND!","IMPRESSIVE DATA!","OPTIMAL RESULTS!"],medium_score:["ADEQUATE METHODOLOGY!","ACCEPTABLE VARIABLES!"],low_score:["FLAWED LOGIC!","POOR EXECUTION!","AMATEUR SCIENCE!"]},2:{henchman_neutral:["CHEAP LABOR!","OVERHEAD COSTS!"],crime_positive:["PROFITABLE!","EXCELLENT ROI!","SMART INVESTMENT!","LIQUID ASSETS!"],crime_neutral:["ACCEPTABLE RETURNS!","CALCULATE THE MARGINS!"],gear_neutral:["DEPRECIATING ASSET!","OPERATIONAL EXPENSE!"],location_neutral:["REAL ESTATE VALUE!","OVERHEAD COSTS!"],high_score:["MAXIMUM PROFIT!","EXCELLENT YIELD!","OUTSTANDING RETURNS!"],medium_score:["MODEST GAINS!","BREAK EVEN!"],low_score:["POOR INVESTMENT!","WASTED CAPITAL!","CUTTING LOSSES!"]},3:{henchman_neutral:["USEFUL PAWNS!","DISPOSABLE!"],crime_positive:["ELEGANT!","SUBTLE APPROACH!","WELL CRAFTED!"],crime_neutral:["TOO OBVIOUS!","LACKS FINESSE!"],gear_positive:["PRECISE TOOL!","REFINED!"],location_positive:["STRATEGIC POSITION!","IDEAL VANTAGE!"],high_score:["MASTERFUL!","FLAWLESS EXECUTION!","PERFECTION!"],medium_score:["ADEQUATE!","FUNCTIONAL!"],low_score:["CLUMSY!","AMATEURISH!","SLOPPY!"]},4:{henchman_positive:["BRING THE CHAOS!","MORE BODIES!","UNLEASH THEM!"],crime_positive:["SPECTACULAR!","GO BIG!","MAXIMUM IMPACT!","EXPLOSIVE!"],gear_positive:["DESTRUCTIVE!","POWERFUL TOOL!","BOOM MATERIAL!"],location_neutral:["BLOW IT UP LATER!","GOOD TARGET!"],high_score:["MAGNIFICENT!","EXPLOSIVE SUCCESS!","SPECTACULAR!"],medium_score:["NOT BAD!","DECENT BANG!"],low_score:["WEAK!","WHERE'S THE SPECTACLE?!","BORING!"]}};function Ke(n,t,e){const a=x[n],s=ze[n];if(!s)return null;let r=[];const i=a.preferences.includes(t);if(e>=8?r=s.high_score||[]:e<=3?r=s.low_score||[]:e>=4&&e<=7&&(r=s.medium_score||[]),r.length===0){const p=i?"positive":"neutral",m=`${t.toLowerCase()}_${p}`;if(r=s[m]||[],r.length===0){const g=Object.keys(s).filter(A=>A.startsWith(t.toLowerCase()));if(g.length>0){const A=g[Math.floor(Math.random()*g.length)];r=s[A]||[]}}}if(r.length===0){const p=Object.keys(s);if(p.length>0){const m=p[Math.floor(Math.random()*p.length)];r=s[m]||[]}}if(r.length===0)return null;const o=r[Math.floor(Math.random()*r.length)];let h=f.NEUTRAL;return e>=8||i?h=f.POSITIVE:e<=3&&(h=f.NEGATIVE),{text:o,type:h}}function Xe(n,t){const e=Math.floor(Math.random()*5);return Ke(e,n,t)}class je{constructor(t){d(this,"gameEngine");d(this,"layout");d(this,"shopLayout");d(this,"devTools");d(this,"comicEffect");d(this,"scoreCutscene");d(this,"isInitialized",!1);d(this,"slotLimit",3);try{this.gameEngine=t??new Pe,this.layout=new Ue,this.shopLayout=new Fe(this.gameEngine),this.devTools=new Ve(this.gameEngine),this.comicEffect=new Ye,this.scoreCutscene=new qe,this.initializeApp(),this.setupEventListeners(),this.setupShopListeners(),this.setupDevToolsListeners(),this.layout.getHeader().setupDemandBanner(),this.updateDisplay(),this.showWelcomeMessage(),this.isInitialized=!0}catch(e){console.error("Failed to initialize app:",e),this.handleInitializationError()}}initializeApp(){document.body.appendChild(this.layout.getElement()),document.body.appendChild(this.shopLayout.getElement()),this.shopLayout.getElement().style.display="none",document.body.appendChild(this.devTools.getElement()),this.loadStyles()}loadStyles(){}setupShopListeners(){this.shopLayout.onExit(()=>{this.exitShop()})}setupDevToolsListeners(){this.devTools.onStateChange(()=>{this.updateDisplay()})}setupEventListeners(){this.layout.getGameArea().getHandArea().setOnCardClick(t=>{this.playCard(t)}),this.layout.getGameArea().getPlayArea().setOnCardClick(t=>{this.unplayCard(t)}),this.layout.getControls().setOnEndTurn(()=>{this.endTurn()}),this.layout.getControls().setOnNextRound(()=>{this.gameEngine.getState().gamePhase==="game_end"?this.handleGameOver():this.startNextRound()}),this.gameEngine.on(t=>{t.type==="slots_unlocked"&&this.layout.getControls().showMessage(`🎉 NEW SLOT UNLOCKED! You can now play ${t.totalSlots} schemes per round!`,"success")})}syncSlotLimit(){const t=this.gameEngine.getAvailableSlotCount();return this.slotLimit=t,t}getSlotLimit(){return this.slotLimit}updateDisplay(){console.time("[Performance] getState");const t=this.gameEngine.getState();if(console.timeEnd("[Performance] getState"),t.gamePhase===C.SHOP){this.layout.getElement().style.display="none",this.shopLayout.getElement().style.display="flex",this.shopLayout.render();return}if(t.gamePhase===C.CHECKPOINT){this.gameEngine.enterShop(),this.updateDisplay();return}this.layout.getElement().style.display="flex",this.shopLayout.getElement().style.display="none";const e=this.syncSlotLimit();this.layout.getHeader().updateRound(t.round,t.checkpoint),this.layout.getHeader().updateScore(t.score,t.cumulativeScore,t.targetScore),this.layout.getHeader().updateCurrency(t.currency),console.time("[Performance] getActiveBuffs");const a=this.gameEngine.getActiveBuffs();console.timeEnd("[Performance] getActiveBuffs"),console.time("[Performance] updateHand"),this.layout.getGameArea().getHandArea().updateHand(t.hand),console.timeEnd("[Performance] updateHand"),console.time("[Performance] updatePlayedCards"),this.layout.getGameArea().getPlayArea().updatePlayedCards(t.playedCards,a,t.cardSlots),console.timeEnd("[Performance] updatePlayedCards"),this.layout.getControls().updateButtonStates(t.gamePhase,t.playedCards.length,e);const s=this.gameEngine.getActiveModifier();s?this.layout.getHeader().showModifier(s):this.layout.getHeader().hideModifier()}playCard(t){const e=this.syncSlotLimit(),a=this.gameEngine.getPlayedCards();if(a.length>=e){this.layout.getControls().showMessage(`You can only play ${e} cards right now.`,"error");return}if(this.gameEngine.playCard(t.id,a.length)){const r=window.innerWidth/2,i=window.innerHeight/2;this.comicEffect.showForCardType(t.type,r,i);const o=Xe(t.type,t.baseScore);o&&this.layout.getHeader().showReaction(o),this.updateDisplay();const p=this.getSlotLimit()-this.gameEngine.getPlayedCards().length;p>0?this.layout.getControls().showMessage(`Played ${t.name}! ${p} cards remaining.`,"success"):this.layout.getControls().showMessage(`Played ${t.name}! Ready to end turn.`,"success")}else this.layout.getControls().showMessage("Cannot play that card!","error")}unplayCard(t){this.gameEngine.unplayCard(t.id)?(this.updateDisplay(),this.layout.getControls().showMessage(`Returned ${t.name} to hand.`,"info")):this.layout.getControls().showMessage("Cannot return that card!","error")}endTurn(){try{console.time("[Performance] endTurn"),console.time("[Performance] gameEngine.endTurn");const t=this.gameEngine.endTurn();console.timeEnd("[Performance] gameEngine.endTurn");const a=this.gameEngine.getPlayedCards().map(s=>{var r,i,o,h,p,m;return{card:s.card,baseScore:((r=s.scoring)==null?void 0:r.baseScore)||s.card.baseScore,bonusScore:(((i=s.scoring)==null?void 0:i.finalScore)||0)-(((o=s.scoring)==null?void 0:o.baseScore)||s.card.baseScore),totalScore:((h=s.scoring)==null?void 0:h.finalScore)||s.card.baseScore,synergies:((m=(p=s.scoring)==null?void 0:p.buffsReceived)==null?void 0:m.map(g=>g.description))||[]}});this.scoreCutscene.play(a,t.score,()=>{console.time("[Performance] updateDisplay"),this.updateDisplay(),console.timeEnd("[Performance] updateDisplay"),console.timeEnd("[Performance] endTurn");const s=this.gameEngine.getState();if(s.gamePhase==="checkpoint")this.layout.getControls().showMessage(`Checkpoint ${s.checkpoint} reached! Score: ${s.cumulativeScore}/${s.targetScore}. Welcome to the shop!`,"success");else if(s.gamePhase==="game_end")this.layout.getControls().showMessage(`Game Over! Failed to reach ${s.targetScore} by round ${s.checkpoint}. Score: ${s.cumulativeScore}. Starting over...`,"error");else{const r=t.synergiesActivated.length>0?` Synergies: ${t.synergiesActivated.join(", ")}`:"";this.layout.getControls().showMessage(`Round ${s.round} complete! Scored ${t.score} points.${r} Total: ${s.cumulativeScore}/${s.targetScore}`,"info")}})}catch{this.layout.getControls().showMessage("Cannot end turn right now!","error")}}startNextRound(){this.gameEngine.startNextRound(),this.updateDisplay();const t=this.gameEngine.getState();this.layout.getControls().showMessage(`Round ${t.round} started! Checkpoint at round ${t.checkpoint}. Total: ${t.cumulativeScore}/${t.targetScore}`,"info")}exitShop(){this.gameEngine.exitShop(),this.startNextRound();const t=this.gameEngine.getState(),e=this.gameEngine.getPlayerDeck().length;this.layout.getControls().showMessage(`Back to the Council! New target: ${t.targetScore}. Deck size: ${e} schemes`,"success")}handleGameOver(){this.gameEngine.restartGame(),this.updateDisplay(),this.showWelcomeMessage()}showWelcomeMessage(){const t=this.gameEngine.getTargetScore(),e=this.gameEngine.getCheckpoint(),a=this.syncSlotLimit();this.layout.getControls().showMessage(`Welcome! Reach ${t} points by round ${e}. Play up to ${a} cards per round from your hand of 6!`,"info")}getGameEngine(){return this.gameEngine}getLayout(){return this.layout}isReady(){return this.isInitialized}destroy(){try{this.layout&&this.layout.getElement().remove(),this.isInitialized=!1}catch(t){console.error("Error during app cleanup:",t)}}handleInitializationError(){new We({title:"Failed to Load Game",message:"There was an error initializing the game. Please refresh the page to try again.",showReloadButton:!0}).show()}}document.addEventListener("DOMContentLoaded",()=>{const n=new je;typeof window<"u"&&(window.gameApp=n)});
