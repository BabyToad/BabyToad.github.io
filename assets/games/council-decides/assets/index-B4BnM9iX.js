var I=Object.defineProperty;var G=(i,e,t)=>e in i?I(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var d=(i,e,t)=>G(i,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function a(s){if(s.ep)return;s.ep=!0;const n=t(s);fetch(s.href,n)}})();var u=(i=>(i.DRAW="draw",i.PLAY="play",i.SCORE="score",i.ROUND_END="round_end",i.CHECKPOINT="checkpoint",i.GAME_END="game_end",i))(u||{}),r=(i=>(i.HENCHMAN="henchman",i.LOCATION="location",i.CRIME="crime",i.GEAR="gear",i))(r||{}),c=(i=>(i.GOON="goon",i.THUG="thug",i.ASSASSIN="assassin",i.HACKER="hacker",i.WAREHOUSE="warehouse",i.LAB="lab",i.HIDEOUT="hideout",i.BASE="base",i.HEIST="heist",i.SABOTAGE="sabotage",i.INFILTRATION="infiltration",i.TERROR="terror",i.WEAPON="weapon",i.TOOL="tool",i.VEHICLE="vehicle",i.TECH="tech",i))(c||{});const D={id:"armed_goons",description:"Gives +3 to all Goons",type:"aura",targets:{subtype:c.GOON},effect:{add:3}},O={id:"cyber_enhanced",description:"Gives +5 to all Hackers",type:"aura",targets:{subtype:c.HACKER},effect:{add:5}},T={id:"quick_getaway",description:"Gives +2 to all Crimes",type:"aura",targets:{type:r.CRIME},effect:{add:2}},m={id:"henchman_network",description:"+2 for each other Henchman",type:"conditional",targets:{self:!0},condition:{requires:{type:r.HENCHMAN,count:1}},effect:{add:2,perCard:!0}},R={id:"perfect_target",description:"+5 if Location is present",type:"conditional",targets:{self:!0},condition:{requires:{type:r.LOCATION}},effect:{add:5}},L={id:"equipped_saboteur",description:"+3 for each Gear card",type:"conditional",targets:{self:!0},condition:{requires:{type:r.GEAR,count:1}},effect:{add:3,perCard:!0}},f={id:"strategic_location",description:"Doubles all Henchman scores",type:"multiplier",targets:{type:r.HENCHMAN},effect:{multiply:2}},w={id:"high_tech_lab",description:"Triples score of Tech gear",type:"multiplier",targets:{subtype:c.TECH},effect:{multiply:3}},_={id:"strategic_planning",description:"+5 if played first",type:"conditional",targets:{self:!0},condition:{position:0},effect:{add:5}},B={id:"finishing_move",description:"+3 if played last",type:"conditional",targets:{self:!0},condition:{position:2},effect:{add:3}},H=[{id:"goon_1",name:"Street Goon",type:r.HENCHMAN,subtype:c.GOON,baseScore:2,description:"A basic thug for your schemes",rules:[m],rarity:"common",cost:1},{id:"goon_2",name:"Professional Goon",type:r.HENCHMAN,subtype:c.GOON,baseScore:3,description:"A more experienced street thug",rules:[m],rarity:"uncommon",cost:2},{id:"goon_3",name:"Elite Goon",type:r.HENCHMAN,subtype:c.GOON,baseScore:4,description:"The best muscle money can buy",rules:[m],rarity:"rare",cost:3},{id:"thug_1",name:"Heavy Thug",type:r.HENCHMAN,subtype:c.THUG,baseScore:3,description:"A strong enforcer for your operations",rules:[m],rarity:"common",cost:2},{id:"thug_2",name:"Brutal Thug",type:r.HENCHMAN,subtype:c.THUG,baseScore:4,description:"Intimidation specialist",rules:[m],rarity:"uncommon",cost:2},{id:"thug_3",name:"Demolition Thug",type:r.HENCHMAN,subtype:c.THUG,baseScore:4,description:"Specializes in making things go boom",rules:[m],rarity:"rare",cost:3},{id:"assassin_1",name:"Silent Assassin",type:r.HENCHMAN,subtype:c.ASSASSIN,baseScore:4,description:"A deadly operative for precision work",rules:[m],rarity:"uncommon",cost:3},{id:"assassin_2",name:"Master Assassin",type:r.HENCHMAN,subtype:c.ASSASSIN,baseScore:5,description:"Elite killer with no conscience",rules:[m],rarity:"rare",cost:4},{id:"hacker_1",name:"Cyber Hacker",type:r.HENCHMAN,subtype:c.HACKER,baseScore:3,description:"A tech-savvy operative for digital crimes",rules:[m],rarity:"uncommon",cost:2},{id:"hacker_2",name:"Elite Hacker",type:r.HENCHMAN,subtype:c.HACKER,baseScore:4,description:"Can break any system",rules:[m],rarity:"rare",cost:3},{id:"mastermind_1",name:"The Mastermind",type:r.HENCHMAN,subtype:c.THUG,baseScore:3,description:"Best when leading the operation",rules:[m,_],rarity:"rare",cost:3},{id:"warehouse_1",name:"Abandoned Warehouse",type:r.LOCATION,subtype:c.WAREHOUSE,baseScore:1,description:"Perfect hideout - doubles henchman effectiveness",rules:[f],rarity:"common",cost:1},{id:"warehouse_2",name:"Secure Warehouse",type:r.LOCATION,subtype:c.WAREHOUSE,baseScore:2,description:"Well-protected storage - doubles henchman effectiveness",rules:[f],rarity:"uncommon",cost:2},{id:"warehouse_3",name:"Port Warehouse",type:r.LOCATION,subtype:c.WAREHOUSE,baseScore:2,description:"Strategic docks location - doubles henchman effectiveness",rules:[f],rarity:"uncommon",cost:2},{id:"lab_1",name:"Secret Lab",type:r.LOCATION,subtype:c.LAB,baseScore:2,description:"High-tech facility - triples tech gear power",rules:[w],rarity:"uncommon",cost:2},{id:"lab_2",name:"Advanced Research Lab",type:r.LOCATION,subtype:c.LAB,baseScore:3,description:"Cutting-edge technology - triples tech gear power",rules:[w],rarity:"rare",cost:3},{id:"hideout_1",name:"Safe House",type:r.LOCATION,subtype:c.HIDEOUT,baseScore:1,description:"A secure place to plan operations",rules:[f],rarity:"common",cost:1},{id:"hideout_2",name:"Fortified Hideout",type:r.LOCATION,subtype:c.HIDEOUT,baseScore:2,description:"Nearly impregnable stronghold",rules:[f],rarity:"uncommon",cost:2},{id:"hideout_3",name:"Penthouse Hideout",type:r.LOCATION,subtype:c.HIDEOUT,baseScore:3,description:"Luxury base with great city views",rules:[f],rarity:"rare",cost:3},{id:"base_1",name:"Underground Base",type:r.LOCATION,subtype:c.BASE,baseScore:3,description:"Secure headquarters - doubles henchman effectiveness",rules:[f],rarity:"rare",cost:4},{id:"base_2",name:"Command Center",type:r.LOCATION,subtype:c.BASE,baseScore:4,description:"Central hub - doubles henchman effectiveness",rules:[f],rarity:"legendary",cost:5},{id:"heist_1",name:"Bank Heist",type:r.CRIME,subtype:c.HEIST,baseScore:8,description:"Classic money-grabbing operation",rules:[R],rarity:"common",cost:2},{id:"heist_2",name:"Casino Heist",type:r.CRIME,subtype:c.HEIST,baseScore:10,description:"Hit the jackpot, literally",rules:[R],rarity:"uncommon",cost:3},{id:"heist_3",name:"Museum Heist",type:r.CRIME,subtype:c.HEIST,baseScore:12,description:"Steal priceless artifacts",rules:[R],rarity:"rare",cost:4},{id:"heist_4",name:"Armored Car Heist",type:r.CRIME,subtype:c.HEIST,baseScore:9,description:"Rob money in transit",rules:[R],rarity:"common",cost:2},{id:"sabotage_1",name:"Industrial Sabotage",type:r.CRIME,subtype:c.SABOTAGE,baseScore:9,description:"Disrupt enemy operations",rules:[L],rarity:"common",cost:2},{id:"sabotage_2",name:"Data Center Sabotage",type:r.CRIME,subtype:c.SABOTAGE,baseScore:11,description:"Bring down their digital infrastructure",rules:[L],rarity:"uncommon",cost:3},{id:"infiltration_1",name:"Corporate Infiltration",type:r.CRIME,subtype:c.INFILTRATION,baseScore:10,description:"Infiltrate and gather intelligence",rules:[],rarity:"uncommon",cost:3},{id:"infiltration_2",name:"Government Infiltration",type:r.CRIME,subtype:c.INFILTRATION,baseScore:12,description:"Access classified information",rules:[],rarity:"rare",cost:4},{id:"terror_1",name:"Intimidation Campaign",type:r.CRIME,subtype:c.TERROR,baseScore:8,description:"Spread fear through the city",rules:[B],rarity:"common",cost:2},{id:"terror_2",name:"Citywide Terror",type:r.CRIME,subtype:c.TERROR,baseScore:11,description:"Paralyze the entire city with fear",rules:[B],rarity:"rare",cost:4},{id:"baseball_bat",name:"Baseball Bat",type:r.GEAR,subtype:c.WEAPON,baseScore:1,description:"Simple but effective - arms your goons",rules:[D],rarity:"common",cost:1},{id:"knife",name:"Combat Knife",type:r.GEAR,subtype:c.WEAPON,baseScore:2,description:"Silent and deadly - arms your goons",rules:[D],rarity:"common",cost:1},{id:"pistol",name:"Pistol",type:r.GEAR,subtype:c.WEAPON,baseScore:3,description:"Standard criminal firearm - arms your goons",rules:[D],rarity:"uncommon",cost:2},{id:"rifle",name:"Assault Rifle",type:r.GEAR,subtype:c.WEAPON,baseScore:5,description:"Military-grade weaponry - arms your goons",rules:[D],rarity:"rare",cost:3},{id:"crowbar",name:"Crowbar",type:r.GEAR,subtype:c.TOOL,baseScore:2,description:"Perfect for breaking and entering",rules:[],rarity:"common",cost:1},{id:"lockpicks",name:"Lockpick Set",type:r.GEAR,subtype:c.TOOL,baseScore:3,description:"Silent entry specialist tools",rules:[],rarity:"uncommon",cost:2},{id:"explosives",name:"Explosives",type:r.GEAR,subtype:c.TOOL,baseScore:4,description:"When subtlety fails",rules:[],rarity:"rare",cost:3},{id:"getaway_car",name:"Getaway Car",type:r.GEAR,subtype:c.VEHICLE,baseScore:3,description:"Fast escape - boosts crime scores",rules:[T],rarity:"uncommon",cost:2},{id:"motorcycle",name:"Sport Motorcycle",type:r.GEAR,subtype:c.VEHICLE,baseScore:2,description:"Quick and agile - boosts crime scores",rules:[T],rarity:"common",cost:1},{id:"helicopter",name:"Helicopter",type:r.GEAR,subtype:c.VEHICLE,baseScore:5,description:"Ultimate escape - boosts crime scores",rules:[T],rarity:"legendary",cost:4},{id:"hacking_rig",name:"Hacking Rig",type:r.GEAR,subtype:c.TECH,baseScore:4,description:"Advanced computer setup - empowers hackers",rules:[O],rarity:"uncommon",cost:3},{id:"surveillance_kit",name:"Surveillance Kit",type:r.GEAR,subtype:c.TECH,baseScore:3,description:"Keep tabs on your targets - empowers hackers",rules:[O],rarity:"uncommon",cost:2}];class ${constructor(e){d(this,"state");this.state=this.initializeGame(e)}initializeGame(e){const t=e?[...e]:[...H];return this.shuffleDeck(t),{round:1,targetScore:75,hand:t.splice(0,7),playedCards:[],score:0,cumulativeScore:0,checkpoint:5,currency:0,playerDeck:[],deck:t,discardPile:[],playerStats:{totalScore:0,roundsWon:0,roundsLost:0,cardsPlayed:0,synergiesActivated:0},gamePhase:u.PLAY}}shuffleDeck(e){for(let t=e.length-1;t>0;t--){const a=Math.floor(Math.random()*(t+1));[e[t],e[a]]=[e[a],e[t]]}}getState(){return{...this.state}}playCard(e,t){if(this.state.gamePhase!==u.PLAY||this.state.playedCards.length>=3)return!1;const a=this.state.hand.findIndex(o=>o.id===e);if(a===-1)return!1;const n={card:this.state.hand[a],position:t};return this.state.hand.splice(a,1),this.state.playedCards.push(n),this.state.playerStats.cardsPlayed++,!0}unplayCard(e){if(this.state.gamePhase!==u.PLAY)return!1;const t=this.state.playedCards.findIndex(s=>s.card.id===e);if(t===-1)return!1;const a=this.state.playedCards.splice(t,1)[0];return this.state.hand.push(a.card),!0}endTurn(){if(this.state.gamePhase!==u.PLAY)throw new Error("Cannot end turn in current phase");const e=this.calculateScore();return this.state.score=e.score,this.state.cumulativeScore+=e.score,this.state.gamePhase=u.SCORE,this.state.playerStats.totalScore=this.state.cumulativeScore,this.state.playerStats.synergiesActivated+=e.synergiesActivated.length,this.awardCurrency(e),this.state.round>=this.state.checkpoint&&(e.success=this.state.cumulativeScore>=this.state.targetScore,e.success?(this.state.playerStats.roundsWon++,this.state.currency+=50,this.state.gamePhase=u.CHECKPOINT):(this.state.playerStats.roundsLost++,this.state.gamePhase=u.GAME_END)),e}calculateScore(){const e=this.evaluateAllRules(),t=[];for(const s of this.state.playedCards)s.scoring={baseScore:s.card.baseScore,buffsReceived:[],buffsGiven:[],finalScore:s.card.baseScore};for(const s of e){const n=this.state.playedCards.find(l=>l.card.id===s.sourceCardId),o=this.state.playedCards.find(l=>l.card.id===s.targetCardId);n!=null&&n.scoring&&(o!=null&&o.scoring)&&(n.scoring.buffsGiven.push(s),o.scoring.buffsReceived.push(s),t.includes(s.description)||t.push(s.description))}for(const s of this.state.playedCards){if(!s.scoring)continue;let n=s.scoring.baseScore;for(const o of s.scoring.buffsReceived)o.isMultiplier||(n+=o.value);s.scoring.finalScore=n}for(const s of this.state.playedCards){if(!s.scoring)continue;let n=s.scoring.finalScore;for(const o of s.scoring.buffsReceived)o.isMultiplier&&(n=Math.floor(n*o.value));s.scoring.finalScore=n}const a=this.state.playedCards.reduce((s,n)=>{var o;return s+(((o=n.scoring)==null?void 0:o.finalScore)||n.card.baseScore)},0);return{score:a,targetScore:this.state.targetScore,success:!1,synergiesActivated:t,bonusScore:a-this.state.playedCards.reduce((s,n)=>s+n.card.baseScore,0)}}evaluateAllRules(){const e=[];let t=0;for(const a of this.state.playedCards)for(const s of a.card.rules){if(!this.checkRuleCondition(s,a))continue;const n=this.findRuleTargets(s,a);for(const o of n){const l=this.calculateRuleValue(s,a);e.push({id:`buff_${t++}`,ruleId:s.id,sourceCardId:a.card.id,targetCardId:o.card.id,description:s.description,value:l,isMultiplier:s.effect.multiply!==void 0,applied:!1})}}return e}checkRuleCondition(e,t){if(!e.condition)return!0;if(e.condition.position!==void 0&&t.position!==e.condition.position)return!1;if(e.condition.requires){const a=e.condition.requires,s=this.state.playedCards.filter(o=>!(o.card.id===t.card.id||a.type&&o.card.type!==a.type||a.subtype&&o.card.subtype!==a.subtype)),n=a.count||1;if(s.length<n)return!1}return!0}findRuleTargets(e,t){const a=[];if(e.targets.self)return[t];for(const s of this.state.playedCards)s.card.id!==t.card.id&&(e.targets.type&&s.card.type!==e.targets.type||e.targets.subtype&&s.card.subtype!==e.targets.subtype||e.targets.position!==void 0&&s.position!==e.targets.position||a.push(s));return a}calculateRuleValue(e,t){var s;let a=0;if(e.effect.add!==void 0?a=e.effect.add:e.effect.multiply!==void 0&&(a=e.effect.multiply),e.effect.perCard&&((s=e.condition)!=null&&s.requires)){const n=e.condition.requires,o=this.state.playedCards.filter(l=>!(l.card.id===t.card.id||n.type&&l.card.type!==n.type||n.subtype&&l.card.subtype!==n.subtype));a*=o.length}return a}startNextRound(){if(this.state.gamePhase!==u.SCORE)throw new Error("Cannot start next round in current phase");this.state.discardPile.push(...this.state.playedCards.map(t=>t.card)),this.state.playedCards=[],this.state.score=0;const e=7-this.state.hand.length;for(let t=0;t<e&&this.state.deck.length>0;t++)this.state.hand.push(this.state.deck.pop());this.state.round++,this.state.gamePhase=u.PLAY}getHand(){return[...this.state.hand]}getPlayedCards(){return[...this.state.playedCards]}getCurrentScore(){return this.state.score}getTargetScore(){return this.state.targetScore}getRound(){return this.state.round}getCheckpoint(){return this.state.checkpoint}getCurrency(){return this.state.currency}getPlayerDeck(){return[...this.state.playerDeck]}getPlayerStats(){return{...this.state.playerStats}}awardCurrency(e){let t=0;t+=10,t+=e.synergiesActivated.length*5,this.state.currency+=t}enterCheckpoint(){if(this.state.gamePhase!==u.CHECKPOINT)throw new Error("Not at a checkpoint")}continueToNextCheckpoint(){if(this.state.gamePhase!==u.CHECKPOINT)throw new Error("Can only continue from checkpoint phase");this.state.checkpoint+=5,this.state.targetScore=Math.floor(this.state.targetScore*1.5),this.state.deck.length<10&&(this.state.deck.push(...this.state.discardPile),this.state.discardPile=[],this.shuffleDeck(this.state.deck)),this.state.gamePhase=u.SCORE}restartGame(){this.state=this.initializeGame()}buyBoosterPack(){if(this.state.currency<30)return null;this.state.currency-=30;const t=[...H],a=[];for(let s=0;s<3;s++){const n=Math.floor(Math.random()*t.length);a.push(t[n])}return a}addCardToPlayerDeck(e){this.state.playerDeck.push({...e})}mergePlayerDeckIntoGame(){const e=[...H,...this.state.playerDeck];this.shuffleDeck(e),this.state.deck=e,this.state.discardPile=[]}getActiveBuffs(){return this.state.playedCards.length===0?[]:this.evaluateAllRules()}}class S{constructor(e="div",t=""){d(this,"element");d(this,"children",[]);this.element=document.createElement(e),t&&(this.element.className=t)}getElement(){return this.element}addChild(e){this.children.push(e),this.element.appendChild(e.getElement())}removeChild(e){const t=this.children.indexOf(e);t>-1&&(this.children.splice(t,1),this.element.removeChild(e.getElement()))}clearChildren(){this.children.forEach(e=>{this.element.removeChild(e.getElement())}),this.children=[]}setVisible(e){this.element.style.display=e?"":"none"}addClass(e){this.element.classList.add(e)}removeClass(e){this.element.classList.remove(e)}setAttribute(e,t){this.element.setAttribute(e,t)}getAttribute(e){return this.element.getAttribute(e)}}class V extends S{constructor(){super("div","game-header");d(this,"roundValue",null);d(this,"checkpointValue",null);d(this,"roundScoreValue",null);d(this,"cumulativeScoreValue",null);d(this,"targetValue",null);d(this,"currencyValue",null);d(this,"scoreFill",null);this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <h1 class="header-title">The Council Decides</h1>
      <div class="header-info">
        <div class="info-item">
          <span class="info-label">Round:</span>
          <span class="info-value" id="round-value">1</span>
        </div>
        <div class="info-item">
          <span class="info-label">Checkpoint:</span>
          <span class="info-value" id="checkpoint-value">5</span>
        </div>
        <div class="info-item">
          <span class="info-label">Currency:</span>
          <span class="info-value highlight" id="currency-value">0</span>
        </div>
        <div class="info-item">
          <span class="info-label">This Round:</span>
          <span class="info-value highlight" id="round-score-value">0</span>
        </div>
        <div class="info-item score-progress">
          <span class="info-label">Total Score:</span>
          <span class="info-value highlight" id="cumulative-score-value">0</span>
          <div class="score-bar">
            <div class="score-fill" id="score-fill" style="width: 0%"></div>
          </div>
          <span class="info-value" id="target-value">75</span>
        </div>
      </div>
    `,this.roundValue=this.element.querySelector("#round-value"),this.checkpointValue=this.element.querySelector("#checkpoint-value"),this.currencyValue=this.element.querySelector("#currency-value"),this.roundScoreValue=this.element.querySelector("#round-score-value"),this.cumulativeScoreValue=this.element.querySelector("#cumulative-score-value"),this.targetValue=this.element.querySelector("#target-value"),this.scoreFill=this.element.querySelector("#score-fill")}render(){}updateRound(t,a){this.roundValue&&(this.roundValue.textContent=t.toString()),this.checkpointValue&&(this.checkpointValue.textContent=a.toString())}updateScore(t,a,s){if(this.roundScoreValue&&(this.roundScoreValue.textContent=t.toString()),this.cumulativeScoreValue&&(this.cumulativeScoreValue.textContent=a.toString()),this.targetValue&&(this.targetValue.textContent=s.toString()),this.scoreFill){const n=Math.min(100,a/s*100);this.scoreFill.style.width=`${n}%`}}updateCurrency(t){this.currencyValue&&(this.currencyValue.textContent=t.toString())}}var h=(i=>(i.DEFAULT="default",i.HOVER="hover",i.SELECTED="selected",i.PLAYABLE="playable",i.DISABLED="disabled",i.BUFFED="buffed",i.PLAYING="playing",i))(h||{});function P(i,e={}){const t=i.baseScore,a=e.finalScore??t,s=a-t;return{card:i,baseScore:t,finalScore:a,scoreChange:s,hasScoreChange:s!==0,buffs:e.buffs??[],buffsReceived:e.buffsReceived??[],buffsGiven:e.buffsGiven??[],uiState:e.uiState??"default",isPlayable:e.isPlayable??!1,isSelected:e.isSelected??!1,onClick:e.onClick,onHover:e.onHover}}class M{constructor(e){d(this,"container");d(this,"displayData");d(this,"scoreElement",null);d(this,"badgeContainer",null);this.displayData=e,this.container=this.createCardElement()}createCardElement(){const e=this.displayData.card,t=this.getTypeColor(e.type),a=this.getRarityColor(e.rarity),s=document.createElement("div");s.className=this.getCardClasses(),s.setAttribute("data-card-id",e.id);const n=document.createElement("div");n.className="card-inner",n.style.borderColor=t;const o=this.createHeader(t);n.appendChild(o);const l=this.createBody();n.appendChild(l);const y=this.createFooter(a);if(n.appendChild(y),e.rules.length>0){const p=this.createRulesSection();n.appendChild(p)}if(s.appendChild(n),this.displayData.buffsReceived.length>0){const p=this.createBuffBadges();this.badgeContainer=p,s.appendChild(p)}const C=this.createTooltip();return s.appendChild(C),s}createHeader(e){const t=document.createElement("div");t.className="card-header";const a=document.createElement("h3");a.className="card-name",a.textContent=this.displayData.card.name;const s=document.createElement("div");return s.className="card-type",s.style.backgroundColor=e,s.textContent=this.displayData.card.type.toUpperCase(),t.appendChild(a),t.appendChild(s),t}createBody(){const e=document.createElement("div");e.className="card-body";const t=this.createScoreDisplay();this.scoreElement=t,e.appendChild(t);const a=document.createElement("p");return a.className="card-description",a.textContent=this.displayData.card.description,e.appendChild(a),e}createScoreDisplay(){const e=document.createElement("div");if(e.className="card-score-container",this.displayData.hasScoreChange){e.classList.add("card-score-buffed");const t=document.createElement("div");t.className="card-score-final",t.textContent=this.displayData.finalScore.toString(),e.appendChild(t);const a=document.createElement("div");a.className="card-score-change",a.textContent=`+${this.displayData.scoreChange}`,e.appendChild(a);const s=document.createElement("div");s.className="card-score-base",s.textContent=this.displayData.baseScore.toString(),e.appendChild(s)}else{const t=document.createElement("div");t.className="card-score",t.textContent=this.displayData.baseScore.toString(),e.appendChild(t)}return e}createFooter(e){const t=document.createElement("div");t.className="card-footer";const a=document.createElement("div");a.className="card-rarity",a.style.color=e,a.textContent=this.displayData.card.rarity.toUpperCase();const s=document.createElement("div");return s.className="card-cost",s.textContent=`Cost: ${this.displayData.card.cost}`,t.appendChild(a),t.appendChild(s),t}createRulesSection(){const e=document.createElement("div");e.className="card-synergies";const t=document.createElement("div");return t.className="synergy-title",t.textContent="Rules:",e.appendChild(t),this.displayData.card.rules.forEach(a=>{const s=document.createElement("div");s.className="synergy-item",s.textContent=a.description,e.appendChild(s)}),e}createTooltip(){const e=this.displayData.card,t=document.createElement("div");t.className="card-tooltip";const a=document.createElement("div");a.className="card-tooltip-title",a.textContent=e.name,t.appendChild(a);const s=document.createElement("div");s.className="card-tooltip-section";const n=document.createElement("div");n.className="card-tooltip-label",n.textContent="Type",s.appendChild(n);const o=document.createElement("div");o.className="card-tooltip-text",o.textContent=`${e.type.toUpperCase()}${e.subtype?` - ${e.subtype}`:""}`,s.appendChild(o),t.appendChild(s);const l=document.createElement("div");l.className="card-tooltip-section";const y=document.createElement("div");y.className="card-tooltip-label",y.textContent="Description",l.appendChild(y);const C=document.createElement("div");if(C.className="card-tooltip-text",C.textContent=e.description,l.appendChild(C),t.appendChild(l),e.rules.length>0){const g=document.createElement("div");g.className="card-tooltip-section";const b=document.createElement("div");b.className="card-tooltip-label",b.textContent="Rules",g.appendChild(b);const k=document.createElement("div");k.className="card-tooltip-rules",e.rules.forEach(x=>{const N=document.createElement("div");N.className="card-tooltip-rule",N.textContent=x.description,k.appendChild(N)}),g.appendChild(k),t.appendChild(g)}const p=document.createElement("div");p.className="card-tooltip-section";const v=document.createElement("div");v.className="card-tooltip-label",v.textContent="Stats",p.appendChild(v);const A=document.createElement("div");return A.className="card-tooltip-text",A.innerHTML=`<strong>Base Score:</strong> ${e.baseScore}<br><strong>Rarity:</strong> ${e.rarity}<br><strong>Cost:</strong> ${e.cost}`,p.appendChild(A),t.appendChild(p),t}createBuffBadges(){const e=document.createElement("div");return e.className="buff-badges",this.displayData.buffsReceived.forEach(t=>{const a=document.createElement("div");a.className=`buff-badge ${t.isMultiplier?"multiplier":"additive"}`,a.textContent=t.isMultiplier?`×${t.value}`:`+${t.value}`,a.title=t.description,e.appendChild(a)}),e}getCardClasses(){const e=["card"],t=this.displayData.uiState;return t!==h.DEFAULT&&e.push(`card-${t}`),this.displayData.buffsReceived.length>0&&e.push("card-buffed"),this.displayData.buffsGiven.length>0&&e.push("card-source"),this.displayData.isPlayable&&e.push("card-playable"),this.displayData.isSelected&&e.push("card-selected"),e.join(" ")}update(e){const t=this.displayData;this.displayData=e,(t.uiState!==e.uiState||t.buffsReceived.length!==e.buffsReceived.length||t.buffsGiven.length!==e.buffsGiven.length)&&(this.container.className=this.getCardClasses()),(t.finalScore!==e.finalScore||t.hasScoreChange!==e.hasScoreChange)&&this.updateScore(),t.buffsReceived.length!==e.buffsReceived.length&&this.updateBadges()}updateScore(){if(!this.scoreElement)return;const e=this.scoreElement.parentElement;if(e){const t=this.createScoreDisplay();e.replaceChild(t,this.scoreElement),this.scoreElement=t}}updateBadges(){if(this.badgeContainer&&(this.badgeContainer.remove(),this.badgeContainer=null),this.displayData.buffsReceived.length>0){const e=this.createBuffBadges();this.badgeContainer=e,this.container.appendChild(e)}}getElement(){return this.container}getTypeColor(e){switch(e){case r.HENCHMAN:return"#8B4513";case r.LOCATION:return"#228B22";case r.CRIME:return"#DC143C";case r.GEAR:return"#4169E1";default:return"#666"}}getRarityColor(e){switch(e){case"common":return"#C0C0C0";case"uncommon":return"#32CD32";case"rare":return"#4169E1";case"legendary":return"#FFD700";default:return"#666"}}}class E{constructor(e){d(this,"view");d(this,"displayData");this.displayData=e,this.view=new M(e),this.attachEventListeners()}static fromCard(e,t){const a=P(e,{onClick:t});return new E(a)}attachEventListeners(){const e=this.view.getElement();this.displayData.onClick&&e.addEventListener("click",()=>{this.displayData.onClick(this.displayData.card)}),e.addEventListener("mouseenter",()=>{this.handleMouseEnter()}),e.addEventListener("mouseleave",()=>{this.handleMouseLeave()})}handleMouseEnter(){this.displayData.uiState!==h.DISABLED&&(this.updateState(h.HOVER),this.displayData.onHover&&this.displayData.onHover(this.displayData.card))}handleMouseLeave(){this.displayData.isSelected?this.updateState(h.SELECTED):this.displayData.buffsReceived.length>0||this.displayData.buffsGiven.length>0?this.updateState(h.BUFFED):this.displayData.isPlayable?this.updateState(h.PLAYABLE):this.updateState(h.DEFAULT)}updateState(e){this.displayData.uiState!==e&&(this.displayData.uiState=e,this.view.update(this.displayData))}updateDisplayData(e){this.displayData={...this.displayData,...e},e.finalScore!==void 0&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0),this.view.update(this.displayData)}setPlayable(e){this.updateDisplayData({isPlayable:e}),e&&this.displayData.uiState===h.DEFAULT&&this.updateState(h.PLAYABLE)}setSelected(e){this.updateDisplayData({isSelected:e}),this.updateState(e?h.SELECTED:h.DEFAULT)}setBuffs(e,t){this.updateDisplayData({buffsReceived:e,buffsGiven:t}),(e.length>0||t.length>0)&&this.updateState(h.BUFFED)}getCard(){return this.displayData.card}getElement(){return this.view.getElement()}getDisplayData(){return{...this.displayData}}updateCard(e){this.displayData.card=e,this.displayData.baseScore=e.baseScore,this.displayData.finalScore!==this.displayData.baseScore&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0);const t=this.view.getElement(),a=t.parentElement,s=new M(this.displayData);a&&a.replaceChild(s.getElement(),t),this.view=s,this.attachEventListeners()}}class q extends S{constructor(){super("div","play-area");d(this,"cardsContainer");d(this,"cardComponents",new Map);d(this,"onCardClick");this.initializeElements()}setOnCardClick(t){this.onCardClick=t}initializeElements(){this.element.innerHTML=`
      <div class="play-area-header">
        <h3 class="area-title">Play Area</h3>
        <div class="card-counter">
          <span id="played-count">0</span>/3
        </div>
      </div>
      <div class="play-area-cards" id="play-cards">
        <!-- Card slots will be rendered here -->
        <div class="card-slot">Slot 1</div>
        <div class="card-slot">Slot 2</div>
        <div class="card-slot">Slot 3</div>
      </div>
    `,this.cardsContainer=this.element.querySelector("#play-cards")}render(){}updatePlayedCards(t,a=[]){this.cardsContainer.innerHTML="",this.cardComponents.clear();const s=[];for(let o=0;o<3;o++){const l=document.createElement("div");l.className="card-slot",l.textContent=`Slot ${o+1}`,s.push(l)}t.forEach((o,l)=>{var y;if(l<3){s[l].innerHTML="",s[l].classList.add("active");const C=a.filter(b=>b.targetCardId===o.card.id),p=a.filter(b=>b.sourceCardId===o.card.id),v=((y=o.scoring)==null?void 0:y.finalScore)??o.card.baseScore,A=P(o.card,{finalScore:v,buffsReceived:C,buffsGiven:p,onClick:this.onCardClick}),g=new E(A);g.setPlayable(!0),this.cardComponents.set(o.card.id,g),s[l].appendChild(g.getElement())}}),s.forEach(o=>this.cardsContainer.appendChild(o));const n=this.element.querySelector("#played-count");n.textContent=t.length.toString()}addCard(t){const a=E.fromCard(t);this.cardComponents.set(t.id,a),this.cardsContainer.appendChild(a.getElement()),this.updateCount()}removeCard(t){const a=this.cardComponents.get(t);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(t),this.updateCount())}clearCards(){this.cardsContainer.innerHTML="",this.cardComponents.clear(),this.updateCount()}updateCount(){const t=this.element.querySelector("#played-count");t.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}}class z extends S{constructor(){super("div","hand-area");d(this,"cardsContainer");d(this,"cardComponents",new Map);d(this,"onCardClick");this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="hand-area-header">
        <h3 class="area-title">Your Hand</h3>
        <div class="card-counter">
          <span id="hand-count">0</span>/7
        </div>
      </div>
      <div class="hand-cards" id="hand-cards"></div>
    `,this.cardsContainer=this.element.querySelector("#hand-cards")}render(){}setOnCardClick(t){this.onCardClick=t}updateHand(t){this.cardsContainer.innerHTML="",this.cardComponents.clear(),t.forEach(a=>{const s=E.fromCard(a,this.onCardClick);s.setPlayable(!0),this.cardComponents.set(a.id,s),this.cardsContainer.appendChild(s.getElement())}),this.updateCount()}addCard(t){const a=E.fromCard(t,this.onCardClick);a.setPlayable(!0),this.cardComponents.set(t.id,a),this.cardsContainer.appendChild(a.getElement()),this.updateCount()}removeCard(t){const a=this.cardComponents.get(t);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(t),this.updateCount())}setCardPlayable(t,a){const s=this.cardComponents.get(t);s&&s.setPlayable(a)}setAllCardsPlayable(t){this.cardComponents.forEach(a=>{a.setPlayable(t)})}updateCount(){const t=this.element.querySelector("#hand-count");t.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}}class F extends S{constructor(){super("div","game-controls");d(this,"endTurnButton");d(this,"nextRoundButton");d(this,"messageElement");this.initializeElements(),this.setupEventListeners()}initializeElements(){this.element.innerHTML=`
      <div class="controls-left">
        <button id="end-turn-btn" class="btn btn-primary">End Turn</button>
        <button id="next-round-btn" class="btn btn-success" disabled>Next Round</button>
      </div>
      <div class="controls-right">
        <div class="message-display" id="message-display"></div>
      </div>
    `,this.endTurnButton=this.element.querySelector("#end-turn-btn"),this.nextRoundButton=this.element.querySelector("#next-round-btn"),this.messageElement=this.element.querySelector("#message-display")}setupEventListeners(){}render(){}setOnEndTurn(t){this.endTurnButton.addEventListener("click",t)}setOnNextRound(t){this.nextRoundButton.addEventListener("click",t)}updateButtonStates(t,a){switch(t){case"play":this.endTurnButton.disabled=a===0,this.nextRoundButton.disabled=!0;break;case"score":case"checkpoint":case"game_end":this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!1;break;default:this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!0}}showMessage(t,a="info"){this.messageElement.textContent=t,this.messageElement.className=`message-display show message-${a}`,setTimeout(()=>{this.messageElement.className="message-display"},3e3)}setEndTurnButtonEnabled(t){this.endTurnButton.disabled=!t}setNextRoundButtonEnabled(t){this.nextRoundButton.disabled=!t}}class W extends S{constructor(){super("div","game-layout");d(this,"header");d(this,"playArea");d(this,"handArea");d(this,"controls");this.header=new V,this.playArea=new q,this.handArea=new z,this.controls=new F,this.setupLayout()}setupLayout(){const t=document.createElement("div");t.className="layout-container",t.appendChild(this.header.getElement()),t.appendChild(this.playArea.getElement()),t.appendChild(this.handArea.getElement()),t.appendChild(this.controls.getElement()),this.element.appendChild(t)}render(){this.header.render(),this.playArea.render(),this.handArea.render(),this.controls.render()}getHeader(){return this.header}getPlayArea(){return this.playArea}getHandArea(){return this.handArea}getControls(){return this.controls}getGameArea(){return{getPlayArea:()=>this.playArea,getHandArea:()=>this.handArea}}getStats(){return this.controls}}class U extends S{constructor(){super("div","shop-modal");d(this,"currency",0);d(this,"onBuyBooster");d(this,"onSkip");d(this,"buyButton");d(this,"skipButton");d(this,"currencyDisplay");this.element.style.display="none",this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="shop-overlay"></div>
      <div class="shop-content">
        <h2 class="shop-title">Checkpoint Reached!</h2>
        <div class="shop-info">
          <p class="shop-message">Welcome to the shop. Purchase booster packs to improve your deck!</p>
          <div class="currency-display">
            <span class="currency-label">Your Currency:</span>
            <span class="currency-amount" id="shop-currency">0</span>
          </div>
        </div>
        <div class="shop-items">
          <div class="shop-item">
            <div class="item-header">
              <h3 class="item-name">Booster Pack</h3>
              <span class="item-cost">30 currency</span>
            </div>
            <p class="item-description">Choose 1 card from 3 random options to add to your deck</p>
            <button id="buy-booster-btn" class="btn btn-primary">Buy Booster Pack</button>
          </div>
        </div>
        <div class="shop-actions">
          <button id="skip-shop-btn" class="btn btn-success">Skip & Continue</button>
        </div>
      </div>
    `,this.buyButton=this.element.querySelector("#buy-booster-btn"),this.skipButton=this.element.querySelector("#skip-shop-btn"),this.currencyDisplay=this.element.querySelector("#shop-currency"),this.buyButton.addEventListener("click",()=>{this.onBuyBooster&&this.onBuyBooster()}),this.skipButton.addEventListener("click",()=>{this.onSkip&&this.onSkip()})}render(){}show(t){this.currency=t,this.updateCurrencyDisplay(),this.updateBuyButtonState(),this.element.style.display="flex"}hide(){this.element.style.display="none"}updateCurrency(t){this.currency=t,this.updateCurrencyDisplay(),this.updateBuyButtonState()}updateCurrencyDisplay(){this.currencyDisplay&&(this.currencyDisplay.textContent=this.currency.toString())}updateBuyButtonState(){this.buyButton&&(this.buyButton.disabled=this.currency<30)}setOnBuyBooster(t){this.onBuyBooster=t}setOnSkip(t){this.onSkip=t}}class Y extends S{constructor(){super("div","booster-modal");d(this,"cardComponents",[]);d(this,"onCardSelected");d(this,"cardsContainer");this.element.style.display="none",this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="booster-overlay"></div>
      <div class="booster-content">
        <h2 class="booster-title">Choose One Card</h2>
        <p class="booster-message">Select a card to add to your deck</p>
        <div class="booster-cards" id="booster-cards">
          <!-- Cards will be rendered here -->
        </div>
      </div>
    `,this.cardsContainer=this.element.querySelector("#booster-cards")}render(){}show(t){if(t.length!==3)throw new Error("Booster pack must have exactly 3 cards");this.cardsContainer.innerHTML="",this.cardComponents=[],t.forEach(a=>{const s=P(a,{onClick:()=>{this.onCardSelected&&this.onCardSelected(a)}}),n=new E(s);n.setPlayable(!0),this.cardComponents.push(n);const o=document.createElement("div");o.className="booster-card-wrapper",o.appendChild(n.getElement()),this.cardsContainer.appendChild(o)}),this.element.style.display="flex"}hide(){this.element.style.display="none",this.cardsContainer.innerHTML="",this.cardComponents=[]}setOnCardSelected(t){this.onCardSelected=t}}class K{constructor(){d(this,"gameEngine");d(this,"layout");d(this,"shop");d(this,"boosterPack");d(this,"isInitialized",!1);try{this.gameEngine=new $,this.layout=new W,this.shop=new U,this.boosterPack=new Y,this.initializeApp(),this.setupEventListeners(),this.setupShopListeners(),this.updateDisplay(),this.showWelcomeMessage(),this.isInitialized=!0}catch(e){console.error("Failed to initialize app:",e),this.handleInitializationError()}}initializeApp(){document.body.appendChild(this.layout.getElement()),document.body.appendChild(this.shop.getElement()),document.body.appendChild(this.boosterPack.getElement()),this.loadStyles()}loadStyles(){}setupShopListeners(){this.shop.setOnBuyBooster(()=>{const e=this.gameEngine.buyBoosterPack();e?(this.shop.updateCurrency(this.gameEngine.getCurrency()),this.boosterPack.show(e)):this.layout.getControls().showMessage("Not enough currency!","error")}),this.shop.setOnSkip(()=>{this.exitShop()}),this.boosterPack.setOnCardSelected(e=>{this.gameEngine.addCardToPlayerDeck(e),this.boosterPack.hide(),this.layout.getControls().showMessage(`Added ${e.name} to your deck!`,"success")})}setupEventListeners(){this.layout.getGameArea().getHandArea().setOnCardClick(e=>{this.playCard(e)}),this.layout.getGameArea().getPlayArea().setOnCardClick(e=>{this.unplayCard(e)}),this.layout.getControls().setOnEndTurn(()=>{this.endTurn()}),this.layout.getControls().setOnNextRound(()=>{const e=this.gameEngine.getState();e.gamePhase==="checkpoint"?this.handleCheckpoint():e.gamePhase==="game_end"?this.handleGameOver():this.startNextRound()})}updateDisplay(){console.time("[Performance] getState");const e=this.gameEngine.getState();console.timeEnd("[Performance] getState"),this.layout.getHeader().updateRound(e.round,e.checkpoint),this.layout.getHeader().updateScore(e.score,e.cumulativeScore,e.targetScore),this.layout.getHeader().updateCurrency(e.currency),console.time("[Performance] getActiveBuffs");const t=this.gameEngine.getActiveBuffs();console.timeEnd("[Performance] getActiveBuffs"),console.time("[Performance] updateHand"),this.layout.getGameArea().getHandArea().updateHand(e.hand),console.timeEnd("[Performance] updateHand"),console.time("[Performance] updatePlayedCards"),this.layout.getGameArea().getPlayArea().updatePlayedCards(e.playedCards,t),console.timeEnd("[Performance] updatePlayedCards"),this.layout.getControls().updateButtonStates(e.gamePhase,e.playedCards.length)}playCard(e){const t=this.gameEngine.getPlayedCards();if(t.length>=3){this.layout.getControls().showMessage("You can only play 3 cards per turn!","error");return}if(this.gameEngine.playCard(e.id,t.length)){this.updateDisplay();const s=3-this.gameEngine.getPlayedCards().length;s>0?this.layout.getControls().showMessage(`Played ${e.name}! ${s} cards remaining.`,"success"):this.layout.getControls().showMessage(`Played ${e.name}! Ready to end turn.`,"success")}else this.layout.getControls().showMessage("Cannot play that card!","error")}unplayCard(e){this.gameEngine.unplayCard(e.id)?(this.updateDisplay(),this.layout.getControls().showMessage(`Returned ${e.name} to hand.`,"info")):this.layout.getControls().showMessage("Cannot return that card!","error")}endTurn(){try{console.time("[Performance] endTurn"),console.time("[Performance] gameEngine.endTurn");const e=this.gameEngine.endTurn();console.timeEnd("[Performance] gameEngine.endTurn"),console.time("[Performance] updateDisplay"),this.updateDisplay(),console.timeEnd("[Performance] updateDisplay"),console.timeEnd("[Performance] endTurn");const t=this.gameEngine.getState();if(t.gamePhase==="checkpoint")this.layout.getControls().showMessage(`Checkpoint ${t.checkpoint} reached! Score: ${t.cumulativeScore}/${t.targetScore}. Welcome to the shop!`,"success");else if(t.gamePhase==="game_end")this.layout.getControls().showMessage(`Game Over! Failed to reach ${t.targetScore} by round ${t.checkpoint}. Score: ${t.cumulativeScore}. Starting over...`,"error");else{const a=e.synergiesActivated.length>0?` Synergies: ${e.synergiesActivated.join(", ")}`:"";this.layout.getControls().showMessage(`Round ${t.round} complete! Scored ${e.score} points.${a} Total: ${t.cumulativeScore}/${t.targetScore}`,"info")}}catch{this.layout.getControls().showMessage("Cannot end turn right now!","error")}}startNextRound(){this.gameEngine.startNextRound(),this.updateDisplay();const e=this.gameEngine.getState();this.layout.getControls().showMessage(`Round ${e.round} started! Checkpoint at round ${e.checkpoint}. Total: ${e.cumulativeScore}/${e.targetScore}`,"info")}handleCheckpoint(){const e=this.gameEngine.getCurrency();this.shop.show(e)}exitShop(){this.shop.hide(),this.gameEngine.mergePlayerDeckIntoGame(),this.gameEngine.continueToNextCheckpoint(),this.startNextRound();const e=this.gameEngine.getPlayerDeck().length;this.layout.getControls().showMessage(`Continuing to next checkpoint! New target: ${this.gameEngine.getTargetScore()}. Deck size: ${e} bonus cards`,"success")}handleGameOver(){this.gameEngine.restartGame(),this.updateDisplay(),this.showWelcomeMessage()}showWelcomeMessage(){const e=this.gameEngine.getTargetScore(),t=this.gameEngine.getCheckpoint();this.layout.getControls().showMessage(`Welcome! Reach ${e} points by round ${t}. Play up to 3 cards per round!`,"info")}getGameEngine(){return this.gameEngine}getLayout(){return this.layout}isReady(){return this.isInitialized}destroy(){try{this.layout&&this.layout.getElement().remove(),this.isInitialized=!1}catch(e){console.error("Error during app cleanup:",e)}}handleInitializationError(){const e=document.createElement("div");e.className="error-container",e.innerHTML=`
      <div class="error-content">
        <h2>Failed to Load Game</h2>
        <p>There was an error initializing the game. Please refresh the page to try again.</p>
        <button onclick="location.reload()" class="btn btn-primary">Reload Page</button>
      </div>
    `,document.body.appendChild(e)}}document.addEventListener("DOMContentLoaded",()=>{const i=new K;typeof window<"u"&&(window.gameApp=i)});
