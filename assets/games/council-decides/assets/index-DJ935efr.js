var V=Object.defineProperty;var Y=(n,t,e)=>t in n?V(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var l=(n,t,e)=>Y(n,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function e(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(s){if(s.ep)return;s.ep=!0;const i=e(s);fetch(s.href,i)}})();var v=(n=>(n.DRAW="draw",n.PLAY="play",n.SCORE="score",n.ROUND_END="round_end",n.CHECKPOINT="checkpoint",n.SHOP="shop",n.GAME_END="game_end",n))(v||{}),c=(n=>(n.HENCHMAN="henchman",n.LOCATION="location",n.CRIME="crime",n.GEAR="gear",n))(c||{}),d=(n=>(n.CITY="city",n.SCIENCE="science",n.NATURE="nature",n.OCCULT="occult",n.CHAOS="chaos",n))(d||{}),f=(n=>(n.GOON="goon",n.SPECIALIST="specialist",n.ANIMAL="animal",n.HEIST="heist",n.SABOTAGE="sabotage",n.INFILTRATION="infiltration",n.TERROR="terror",n.WEAPON="weapon",n.TOOL="tool",n.VEHICLE="vehicle",n.TECH="tech",n))(f||{});const z={id:"armed_goons",description:"Gives +3 to all City Henchmen",type:"aura",targets:{color:d.CITY,type:c.HENCHMAN},effect:{add:3}},W={id:"cyber_enhanced",description:"Gives +5 to all Science Henchmen",type:"aura",targets:{color:d.SCIENCE,type:c.HENCHMAN},effect:{add:5}},K={id:"quick_getaway",description:"Gives +2 to all Crimes",type:"aura",targets:{type:c.CRIME},effect:{add:2}},x={id:"henchman_network",description:"+2 for each other Henchman",type:"conditional",targets:{self:!0},condition:{requires:{type:c.HENCHMAN,count:1}},effect:{add:2,perCard:!0}},j={id:"perfect_target",description:"+5 if Location is present",type:"conditional",targets:{self:!0},condition:{requires:{type:c.LOCATION}},effect:{add:5}},Z={id:"equipped_saboteur",description:"+3 for each Gear card",type:"conditional",targets:{self:!0},condition:{requires:{type:c.GEAR,count:1}},effect:{add:3,perCard:!0}},X={id:"weapon_researcher",description:"+5 for each Gear card",type:"conditional",targets:{self:!0},condition:{requires:{type:c.GEAR,count:1}},effect:{add:5,perCard:!0}},Q={id:"pack_mentality",description:"+2 for each other Nature Henchman",type:"conditional",targets:{self:!0},condition:{requires:{color:d.NATURE,type:c.HENCHMAN,count:1}},effect:{add:2,perCard:!0}},J={id:"lazy_goon_persist",description:"Stays for 2 turns",type:"aura",targets:{self:!0},effect:{persistTurns:2}},ee={id:"stray_cat_draw",description:"Draw 2 cards if no other Nature Henchmen",type:"conditional",targets:{self:!0},condition:{requires:{color:d.NATURE,type:c.HENCHMAN,count:0}},effect:{drawCards:2}},te={id:"baseball_bat_city_boost",description:"+4 if City Henchman present",type:"conditional",targets:{self:!0},condition:{requires:{color:d.CITY,type:c.HENCHMAN,count:1}},effect:{add:4}},se={id:"secret_lab_draw",description:"Draw 1 card for every Science card on the board",type:"conditional",targets:{self:!0},effect:{drawCardsPerMatch:1,matchRequirements:{color:d.SCIENCE}}},ae={id:"gear_amplifier",description:"Doubles all Gear effects",type:"multiplier",targets:{type:c.GEAR},effect:{multiply:2}},ie={id:"animal_pack",description:"Gives +5 to all Nature Henchmen",type:"aura",targets:{color:d.NATURE,type:c.HENCHMAN},effect:{add:5}},re={id:"wilderness_multiplier",description:"Doubles all Nature cards",type:"multiplier",targets:{color:d.NATURE},effect:{multiply:2}},ne={id:"eco_terror_boost",description:"+5 if a Nature Henchman is present",type:"conditional",targets:{self:!0},condition:{requires:{color:d.NATURE,type:c.HENCHMAN,count:1}},effect:{add:5}},oe={id:"rogue_ai_learning",description:"Doubles all Science Henchmen",type:"multiplier",targets:{color:d.SCIENCE,type:c.HENCHMAN},effect:{multiply:2}},ce={id:"particle_accelerator",description:"Gives +3 to all Science cards",type:"aura",targets:{color:d.SCIENCE},effect:{add:3}},de={id:"criminal_speech",description:"Gives +5 to all City Henchmen",type:"aura",targets:{color:d.CITY,type:c.HENCHMAN},effect:{add:5}},le={id:"science_equipment",description:"Doubles Science Henchmen",type:"multiplier",targets:{type:c.HENCHMAN,color:d.SCIENCE},effect:{multiply:2}},ue={id:"grenade_debuff",description:"All City Henchmen have -3 EP",type:"aura",targets:{color:d.CITY,type:c.HENCHMAN},effect:{add:-3}},he={id:"overly_motivated",description:"Doubles all Crime scores",type:"multiplier",targets:{type:c.CRIME},effect:{multiply:2}},pe={id:"city_centre_goons",description:"Doubles City Henchmen",type:"multiplier",targets:{color:d.CITY,type:c.HENCHMAN},effect:{multiply:2}},fe={id:"city_centre_crimes",description:"Doubles City Crimes",type:"multiplier",targets:{color:d.CITY,type:c.CRIME},effect:{multiply:2}},me={id:"the_loner_debuff",description:"-15 EP if another Henchman is present",type:"conditional",targets:{self:!0},condition:{requires:{type:c.HENCHMAN,count:1}},effect:{add:-15}},ge={id:"deep_pockets_hand_scaling",description:"+3 per card in hand",type:"conditional",targets:{self:!0},effect:{add:3,perHandCard:!0}},ye={id:"plant_a_bomb",description:"Stays in play and gains +15 EP next turn",type:"aura",targets:{self:!0},effect:{persistTurns:2,delayedAdd:{amount:15,turns:1}}},Ce={id:"plagiarize_double",description:"Double the highest EP Gear if a Science Henchman is present",type:"multiplier",targets:{type:c.GEAR,limit:"highest_base"},condition:{requires:{type:c.HENCHMAN,color:d.SCIENCE,count:1}},effect:{multiply:2}},Ee={id:"robbery_draw",description:"Draw 1 card for every City Henchman on the board",type:"conditional",targets:{self:!0},effect:{drawCardsPerMatch:1,matchRequirements:{color:d.CITY,type:c.HENCHMAN}}},ve={id:"tyrannosaurus_mechs",description:"Remove all common City Henchmen and gain +10 EP for each removed",type:"conditional",targets:{self:!0},effect:{removeCards:{rarity:"common",type:c.HENCHMAN,tag:f.GOON},bonusPerRemovedCard:10}},be={id:"sixth_gta",description:"Becomes 100 EP if this is the last turn before the quota ends",type:"conditional",targets:{self:!0},condition:{roundState:"last_before_checkpoint"},effect:{set:100}},Se={id:"smartest_person_pack",description:"If this is the only card on the board, gain a Super-Dubai-Pack reward",type:"conditional",targets:{self:!0},condition:{requires:{count:0}},effect:{grantPack:{packId:"super_dubai"}}},Te={id:"strategic_location",description:"Doubles all Henchman scores",type:"multiplier",targets:{type:c.HENCHMAN},effect:{multiply:2}},Ae={id:"high_tech_lab",description:"Triples score of Science cards",type:"multiplier",targets:{color:d.SCIENCE},effect:{multiply:3}},ke={id:"strategic_planning",description:"+5 if played first",type:"conditional",targets:{self:!0},condition:{position:0},effect:{add:5}},Ie={id:"finishing_move",description:"+3 if played last",type:"conditional",targets:{self:!0},condition:{position:2},effect:{add:3}},C=[{id:"goon_1",name:"Goon",type:c.HENCHMAN,color:d.CITY,tags:[f.GOON],baseScore:3,description:"Reliable muscle for your criminal enterprise",rules:[x],rarity:"common",cost:2},{id:"specialist_1",name:"Specialist",type:c.HENCHMAN,color:d.CITY,tags:[f.SPECIALIST],baseScore:4,description:"Skilled operative for precision work",rules:[x],rarity:"uncommon",cost:3},{id:"mastermind_1",name:"The Mastermind",type:c.HENCHMAN,color:d.CITY,tags:[f.GOON],baseScore:3,description:"Best when leading the operation",rules:[x,ke],rarity:"rare",cost:3},{id:"wolf_1",name:"Wolf",type:c.HENCHMAN,color:d.NATURE,tags:[f.ANIMAL],baseScore:3,description:"Adds +2 score for each other Nature Henchman",rules:[Q],rarity:"common",cost:2},{id:"mad_scientist_1",name:"Mad Scientist",type:c.HENCHMAN,color:d.SCIENCE,tags:[f.SPECIALIST],baseScore:2,description:"Doubles the effect of all Gear on the board",rules:[ae],rarity:"common",cost:2},{id:"weapon_researcher_1",name:"Weapon Researcher",type:c.HENCHMAN,color:d.SCIENCE,tags:[f.SPECIALIST],baseScore:2,description:"Gets +5 for every Gear on the board",rules:[X],rarity:"common",cost:2},{id:"lazy_goon_1",name:"Lazy Goon",type:c.HENCHMAN,color:d.CITY,tags:[f.GOON],baseScore:4,description:"Stays on the board for 2 turns",rules:[J],rarity:"common",cost:2},{id:"stray_cat_1",name:"Stray Cat",type:c.HENCHMAN,color:d.NATURE,tags:[f.ANIMAL],baseScore:6,description:"Draw 2 cards if no other Nature Henchmen",rules:[ee],rarity:"uncommon",cost:3},{id:"the_loner",name:"The Loner",type:c.HENCHMAN,color:d.CITY,tags:[f.GOON],baseScore:15,description:"Gets -15 EP if other Henchmen are present",rules:[me],rarity:"common",cost:5},{id:"bear",name:"Bear",type:c.HENCHMAN,color:d.NATURE,tags:[f.ANIMAL],baseScore:15,description:"A massive predator",rules:[],rarity:"common",cost:5},{id:"pack_alpha",name:"Pack Alpha",type:c.HENCHMAN,color:d.NATURE,tags:[f.ANIMAL],baseScore:8,description:"Leads the pack - gives +5 to all Nature Henchmen",rules:[ie],rarity:"rare",cost:5},{id:"rogue_ai",name:"Rogue AI",type:c.HENCHMAN,color:d.SCIENCE,tags:[f.SPECIALIST],baseScore:6,description:"Advanced intelligence - doubles all Science Henchmen",rules:[oe],rarity:"rare",cost:5},{id:"cybernetic_goon",name:"Cybernetic Goon",type:c.HENCHMAN,color:d.SCIENCE,tags:[f.GOON],baseScore:5,description:"Enhanced muscle for high-tech heists",rules:[x],rarity:"uncommon",cost:3},{id:"mysterious_fortune_teller",name:"Mysterious Fortune Teller",type:c.HENCHMAN,color:d.OCCULT,tags:[],baseScore:20,description:"Sees all possible futures",rules:[],rarity:"legendary",cost:15},{id:"warehouse_1",name:"Hideout",type:c.LOCATION,color:d.CITY,tags:[],baseScore:2,description:"Secret base - doubles henchman effectiveness",rules:[Te],rarity:"common",cost:2},{id:"lab_1",name:"Research Lab",type:c.LOCATION,color:d.SCIENCE,tags:[],baseScore:2,description:"High-tech facility - triples all Science cards",rules:[Ae],rarity:"uncommon",cost:2},{id:"secret_lab_klauncel",name:"The Secret Lab",type:c.LOCATION,color:d.SCIENCE,tags:[],baseScore:0,description:"Draw 1 card for every Science card on the board",rules:[se],rarity:"common",cost:4},{id:"the_wilderness",name:"The Wilderness",type:c.LOCATION,color:d.NATURE,tags:[],baseScore:0,description:"Untamed frontier - doubles all Nature cards",rules:[re],rarity:"uncommon",cost:3},{id:"sinister_particle_accelerator",name:"Sinister Particle Accelerator",type:c.LOCATION,color:d.SCIENCE,tags:[],baseScore:1,description:"Mad science facility - gives +3 to all Science cards",rules:[ce],rarity:"rare",cost:4},{id:"heist_1",name:"Heist",type:c.CRIME,color:d.CITY,tags:[f.HEIST],baseScore:10,description:"Major theft operation - bonus with a Location",rules:[j],rarity:"common",cost:3},{id:"sabotage_1",name:"Sabotage",type:c.CRIME,color:d.CHAOS,tags:[f.SABOTAGE],baseScore:9,description:"Disrupt operations - bonus per Gear equipped",rules:[Z],rarity:"common",cost:2},{id:"infiltration_1",name:"Infiltration",type:c.CRIME,color:d.CITY,tags:[f.INFILTRATION],baseScore:10,description:"Infiltrate and gather intelligence",rules:[],rarity:"uncommon",cost:3},{id:"terror_1",name:"Terror Attack",type:c.CRIME,color:d.CHAOS,tags:[f.TERROR],baseScore:8,description:"Spread fear - bonus if played last",rules:[Ie],rarity:"common",cost:2},{id:"eco_terrorism",name:"Eco-Terrorism",type:c.CRIME,color:d.NATURE,tags:[f.TERROR],baseScore:15,description:"Unleash nature's fury - bonus if a Nature Henchman is present",rules:[ne],rarity:"rare",cost:5},{id:"baseball_bat_klauncel",name:"Baseball Bat",type:c.GEAR,color:d.CITY,tags:[f.WEAPON],baseScore:6,description:"+4 if City Henchman present",rules:[te],rarity:"common",cost:2},{id:"knife",name:"Weapon",type:c.GEAR,color:d.CITY,tags:[f.WEAPON],baseScore:3,description:"Standard armament - gives +3 to all City Henchmen",rules:[z],rarity:"common",cost:2},{id:"crowbar",name:"Tool",type:c.GEAR,color:d.CITY,tags:[f.TOOL],baseScore:3,description:"Useful equipment for various jobs",rules:[],rarity:"common",cost:2},{id:"getaway_car",name:"Getaway Vehicle",type:c.GEAR,color:d.CITY,tags:[f.VEHICLE],baseScore:3,description:"Fast escape - gives +2 to all Crimes",rules:[K],rarity:"common",cost:2},{id:"hacking_rig",name:"Tech Equipment",type:c.GEAR,color:d.SCIENCE,tags:[f.TECH],baseScore:4,description:"Advanced tech - gives +5 to all Science Henchmen",rules:[W],rarity:"uncommon",cost:3},{id:"failed_experiment",name:"Failed Experiment",type:c.HENCHMAN,color:d.SCIENCE,tags:[f.SPECIALIST],baseScore:50,description:"The result of pushing science too far",rules:[],rarity:"legendary",cost:50},{id:"gun",name:"Big Gun",type:c.GEAR,color:d.CITY,tags:[f.WEAPON],baseScore:11,description:"A big gun",rules:[],rarity:"common",cost:5},{id:"grenade",name:"Grenade",type:c.GEAR,color:d.CHAOS,tags:[f.WEAPON],baseScore:15,description:"Powerful but risky - your City Henchmen take -3 EP",rules:[ue],rarity:"common",cost:8},{id:"science_equipment",name:"Science Equipment",type:c.GEAR,color:d.SCIENCE,tags:[f.TECH],baseScore:4,description:"Doubles the power of Science Henchmen",rules:[le],rarity:"common",cost:3},{id:"criminally_good_speech",name:"Criminally Good Speech",type:c.CRIME,color:d.CITY,tags:[f.HEIST],baseScore:5,description:"Rally your City Henchmen with an inspiring speech",rules:[de],rarity:"common",cost:3},{id:"robbery",name:"Robbery",type:c.CRIME,color:d.CITY,tags:[f.HEIST],baseScore:6,description:"Draw 1 card for every City Henchman on the board",rules:[Ee],rarity:"common",cost:4},{id:"plant_a_bomb",name:"Plant a Bomb",type:c.CRIME,color:d.CITY,tags:[f.SABOTAGE],baseScore:1,description:"Gain 15 EP next turn and stay on the board",rules:[ye],rarity:"common",cost:3},{id:"plagiarize",name:"Plagiarize",type:c.CRIME,color:d.SCIENCE,tags:[f.INFILTRATION],baseScore:7,description:"Double the highest EP Gear if a Science Henchman is present",rules:[Ce],rarity:"common",cost:4},{id:"sixth_grand_theft_auto",name:"6th Grand Theft Auto",type:c.CRIME,color:d.CITY,tags:[f.HEIST],baseScore:20,description:"Counts as 100 EP if it's the last turn before the quota ends",rules:[be],rarity:"legendary",cost:10},{id:"unleash_animals_zoo",name:"Unleash the Animals in the Zoo",type:c.CRIME,color:d.NATURE,tags:[f.TERROR],baseScore:12,description:"Chaos erupts as wild beasts run free",rules:[],rarity:"common",cost:5},{id:"overly_motivated_goon",name:"Overly Motivated Goon",type:c.HENCHMAN,color:d.CITY,tags:[f.GOON],baseScore:4,description:"Your Crimes give double EP this turn",rules:[he],rarity:"common",cost:2},{id:"city_centre",name:"City Centre",type:c.LOCATION,color:d.CITY,tags:[],baseScore:0,description:"City Henchmen and City Crimes give double the EP",rules:[pe,fe],rarity:"common",cost:4},{id:"tyrannosaurus_mechs",name:"Tyrannosaurus Mechs",type:c.HENCHMAN,color:d.CITY,tags:[f.GOON],baseScore:0,description:"Remove all common City Henchmen from your hand, deck, and discard. Gain +10 EP for each removed",rules:[ve],rarity:"legendary",cost:50},{id:"smartest_person_alive",name:"Smartest Person Alive",type:c.HENCHMAN,color:d.SCIENCE,tags:[f.SPECIALIST],baseScore:30,description:"If this is the only card on the board, gain a Super-Dubai-Pack reward",rules:[Se],rarity:"legendary",cost:50},{id:"really_deep_pockets",name:"REALLY Deep Pockets",type:c.GEAR,color:d.SCIENCE,tags:[],baseScore:0,description:"Has +3 EP for every card in your hand",rules:[ge],rarity:"common",cost:2},{id:"nuclear_power_plant",name:"Nuclear Power Plant",type:c.LOCATION,color:d.SCIENCE,tags:[],baseScore:0,description:"Supercharge that mf: Doubles all Gear. Your Nature cards give no EP this turn.",rules:[{id:"nuclear_gear_double",description:"Doubles all Gear",type:"multiplier",targets:{type:c.GEAR},effect:{multiply:2}},{id:"nuclear_nature_disable",description:"Nature cards give no EP",type:"multiplier",targets:{color:d.NATURE},effect:{multiply:0}}],rarity:"legendary",cost:50},{id:"pollutas_relaxing_oasis",name:"Polluta's Relaxing Oasis",type:c.LOCATION,color:d.NATURE,tags:[],baseScore:0,description:"Contractually binding vacation: Your cards give no EP this turn, but triple EP next turn. Stays for 2 turns.",rules:[{id:"polluta_disable_city_t1",description:"City cards give no EP on turn 1",type:"multiplier",targets:{color:d.CITY},condition:{turnsInPlay:0},effect:{multiply:0}},{id:"polluta_disable_science_t1",description:"Science cards give no EP on turn 1",type:"multiplier",targets:{color:d.SCIENCE},condition:{turnsInPlay:0},effect:{multiply:0}},{id:"polluta_disable_nature_t1",description:"Nature cards give no EP on turn 1",type:"multiplier",targets:{color:d.NATURE},condition:{turnsInPlay:0},effect:{multiply:0}},{id:"polluta_disable_occult_t1",description:"Occult cards give no EP on turn 1",type:"multiplier",targets:{color:d.OCCULT},condition:{turnsInPlay:0},effect:{multiply:0}},{id:"polluta_disable_chaos_t1",description:"Chaos cards give no EP on turn 1",type:"multiplier",targets:{color:d.CHAOS},condition:{turnsInPlay:0},effect:{multiply:0}},{id:"polluta_triple_city_t2",description:"City cards give 3x EP on turn 2",type:"multiplier",targets:{color:d.CITY},condition:{turnsInPlay:1},effect:{multiply:3}},{id:"polluta_triple_science_t2",description:"Science cards give 3x EP on turn 2",type:"multiplier",targets:{color:d.SCIENCE},condition:{turnsInPlay:1},effect:{multiply:3}},{id:"polluta_triple_nature_t2",description:"Nature cards give 3x EP on turn 2",type:"multiplier",targets:{color:d.NATURE},condition:{turnsInPlay:1},effect:{multiply:3}},{id:"polluta_triple_occult_t2",description:"Occult cards give 3x EP on turn 2",type:"multiplier",targets:{color:d.OCCULT},condition:{turnsInPlay:1},effect:{multiply:3}},{id:"polluta_triple_chaos_t2",description:"Chaos cards give 3x EP on turn 2",type:"multiplier",targets:{color:d.CHAOS},condition:{turnsInPlay:1},effect:{multiply:3}},{id:"polluta_persist",description:"Stays for 2 turns",type:"aura",targets:{self:!0},effect:{persistTurns:2}}],rarity:"legendary",cost:50},{id:"steal_the_heroes_capes",name:"Steal the Heroes' Capes",type:c.CRIME,color:d.CITY,tags:[f.HEIST],baseScore:30,description:"Tempted by the power: If there are only common City Henchmen on the board, give them +30 EP this turn.",rules:[{id:"steal_capes_buff_common_goons",description:"Give common City Henchmen +30 EP if only common City Henchmen are present",type:"conditional",targets:{color:d.CITY,type:c.HENCHMAN,rarity:"common"},condition:{requiresAll:[{color:d.CITY,type:c.HENCHMAN,rarity:"common",count:1},{color:d.CITY,type:c.HENCHMAN,rarity:"uncommon",count:0},{color:d.CITY,type:c.HENCHMAN,rarity:"rare",count:0},{color:d.CITY,type:c.HENCHMAN,rarity:"legendary",count:0}]},effect:{add:30}}],rarity:"legendary",cost:50}];function U(n){return C.find(t=>t.id===n)}const B=[C.find(n=>n.id==="lazy_goon_1"),C.find(n=>n.id==="overly_motivated_goon"),C.find(n=>n.id==="overly_motivated_goon"),C.find(n=>n.id==="the_loner"),C.find(n=>n.id==="mad_scientist_1"),C.find(n=>n.id==="weapon_researcher_1"),C.find(n=>n.id==="bear"),C.find(n=>n.id==="gun"),C.find(n=>n.id==="gun"),C.find(n=>n.id==="baseball_bat_klauncel"),C.find(n=>n.id==="science_equipment"),C.find(n=>n.id==="criminally_good_speech"),C.find(n=>n.id==="plant_a_bomb"),C.find(n=>n.id==="unleash_animals_zoo"),C.find(n=>n.id==="city_centre")];if(B.length!==15)throw new Error(`Starter deck must have 15 cards, found ${B.length}`);if(B.some(n=>!n))throw new Error("Starter deck contains undefined cards - check card IDs");const Ne={enabled:!0,frequency:2,startRound:2},we={0:[{flavorText:"PUSHBERGER demands URBAN DEVELOPMENT!",rule:{id:"pushberger_city",description:"All CITY cards get +4",type:"aura",targets:{color:d.CITY},effect:{add:4}}},{flavorText:"PUSHBERGER expects METROPOLITAN CRIME!",rule:{id:"pushberger_crime",description:"All CRIMES get +3",type:"aura",targets:{type:c.CRIME},effect:{add:3}}},{flavorText:"PUSHBERGER values STRATEGIC LOCATIONS!",rule:{id:"pushberger_locations",description:"All LOCATIONS get +3",type:"aura",targets:{type:c.LOCATION},effect:{add:3}}}],1:[{flavorText:"PLAGIARIZA demands SCIENCE!",rule:{id:"plagiariza_science",description:"All SCIENCE cards get +4",type:"aura",targets:{color:d.SCIENCE},effect:{add:4}}},{flavorText:"PLAGIARIZA requires proper EQUIPMENT!",rule:{id:"plagiariza_gear",description:"All GEAR gets +3",type:"aura",targets:{type:c.GEAR},effect:{add:3}}},{flavorText:"PLAGIARIZA values HENCHMEN!",rule:{id:"plagiariza_henchmen",description:"All HENCHMEN get +3",type:"aura",targets:{type:c.HENCHMAN},effect:{add:3}}}],2:[{flavorText:"POLLUTA demands ENVIRONMENTAL CHAOS!",rule:{id:"polluta_nature",description:"All NATURE cards get +4",type:"aura",targets:{color:d.NATURE},effect:{add:4}}},{flavorText:"POLLUTA expects ECOLOGICAL DEVASTATION!",rule:{id:"polluta_locations",description:"All LOCATIONS get +3",type:"aura",targets:{type:c.LOCATION},effect:{add:3}}},{flavorText:"POLLUTA values HENCHMEN!",rule:{id:"polluta_henchmen",description:"All HENCHMEN get +3",type:"aura",targets:{type:c.HENCHMAN},effect:{add:3}}}]};function Pe(n){const t=we[n];return!t||t.length===0?null:t[Math.floor(Math.random()*t.length)]}const Re={common:5,uncommon:10,rare:20,legendary:50};class Le{getDuplicateGroups(t){const e=new Map;t.forEach(s=>{const i=s.name;e.has(i)||e.set(i,[]),e.get(i).push(s)});const a=[];return e.forEach((s,i)=>{a.push({cardName:i,cards:[...s],count:s.length,canBurn:s.length>=3})}),a}canBurn(t,e){return t.filter(s=>s.name===e).length>=3}burnTriple(t,e){const a=t.filter(u=>u.name===e);if(a.length<3)return{success:!1,goldEarned:0,cardsRemoved:[]};const s=a.slice(0,3),i=[];s.forEach(u=>{const h=t.indexOf(u);h>-1&&i.push(t.splice(h,1)[0])});const r=s[0].rarity;return{success:!0,goldEarned:this.getRefundValue(r),cardsRemoved:i}}getRefundValue(t){return Re[t]||0}getUniqueCardNames(t){const e=new Set;return t.forEach(a=>e.add(a.name)),Array.from(e).sort()}getRarityDistribution(t){const e={common:0,uncommon:0,rare:0,legendary:0};return t.forEach(a=>{e[a.rarity]!==void 0&&e[a.rarity]++}),e}}const Me=[{id:"base",name:"Mystery Pack",cost:30,description:"3 random schemes! Last card has rare chance!",slots:[{rarities:[{rarity:"common",weight:1}]},{rarities:[{rarity:"common",weight:1}]},{rarities:[{rarity:"common",weight:70},{rarity:"uncommon",weight:20},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}]}]},{id:"deluxe",name:"Deluxe Pack",cost:100,description:"Better chances at rare schemes!",slots:[{rarities:[{rarity:"uncommon",weight:70},{rarity:"rare",weight:25},{rarity:"legendary",weight:5}]},{rarities:[{rarity:"uncommon",weight:50},{rarity:"rare",weight:50}]},{rarities:[{rarity:"rare",weight:70},{rarity:"legendary",weight:30}]}]},{id:"city-pack",name:"Urban Schemes",cost:40,description:"City-colored schemes only!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.CITY},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.CITY},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.CITY}]},{id:"science-pack",name:"Mad Science",cost:40,description:"Science-colored schemes only!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.SCIENCE},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.SCIENCE},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.SCIENCE}]},{id:"nature-pack",name:"Wild Mayhem",cost:40,description:"Nature-colored schemes only!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.NATURE},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.NATURE},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],colorFilter:d.NATURE}]},{id:"henchman-pack",name:"Minion Roster",cost:40,description:"Henchmen only!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.HENCHMAN},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.HENCHMAN},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.HENCHMAN}]},{id:"location-pack",name:"Evil Lairs",cost:40,description:"Locations only!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.LOCATION},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.LOCATION},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.LOCATION}]},{id:"crime-pack",name:"Criminal Plots",cost:40,description:"Crimes only!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.CRIME},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.CRIME},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.CRIME}]},{id:"gear-pack",name:"Evil Arsenal",cost:40,description:"Gear only!",slots:[{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.GEAR},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.GEAR},{rarities:[{rarity:"common",weight:60},{rarity:"uncommon",weight:30},{rarity:"rare",weight:9},{rarity:"legendary",weight:1}],typeFilter:c.GEAR}]}];class De{constructor(t){l(this,"configs");l(this,"rarityBoosts");this.configs=new Map,this.rarityBoosts=new Map,(t||Me).forEach(a=>{this.configs.set(a.id,a)})}generate(t){const e=this.configs.get(t);if(!e)throw new Error(`Unknown pack type: ${t}`);const a=e.slots.map((i,r)=>this.rollCard(i,r)),s={packType:e.id,cards:a,cost:e.cost};return this.rarityBoosts.clear(),s}rollCard(t,e){const a=this.applyBoost(t.rarities,e),s=this.weightedRandom(a);let i=C.filter(r=>r.rarity===s);return t.typeFilter&&(i=i.filter(r=>r.type===t.typeFilter)),t.colorFilter&&(i=i.filter(r=>r.color===t.colorFilter)),i.length===0&&(i=C),i[Math.floor(Math.random()*i.length)]}weightedRandom(t){const e=t.reduce((s,i)=>s+i.weight,0);let a=Math.random()*e;for(const s of t)if(a-=s.weight,a<=0)return s.rarity;return t[0].rarity}applyBoost(t,e){const a=this.rarityBoosts.get(e);return!a||a===0?t:t.map(s=>({...s,weight:s.rarity==="legendary"?s.weight*a:s.weight}))}setRarityBoost(t,e){this.rarityBoosts.set(t,e)}getAvailablePackTypes(){return Array.from(this.configs.values())}getPackConfig(t){return this.configs.get(t)}registerPackType(t){this.configs.set(t.id,t)}}var k=(n=>(n.LOCKED="locked",n.AVAILABLE="available",n.DISABLED="disabled",n))(k||{});const Oe=[{type:"round",value:1,slotPosition:0,description:"Starting slot"},{type:"round",value:1,slotPosition:1,description:"Starting slot"},{type:"round",value:1,slotPosition:2,description:"Starting slot"},{type:"checkpoint",value:1,slotPosition:3,description:"Unlock after first checkpoint"},{type:"checkpoint",value:2,slotPosition:4,description:"Unlock after second checkpoint"}],He=5;class _e{constructor(t=Oe){l(this,"slots");l(this,"unlockConditions");this.unlockConditions=t,this.slots=this.initializeSlots()}initializeSlots(){const t=[];for(let e=0;e<He;e++)t.push({id:`slot_${e}`,position:e,state:k.LOCKED,modifiers:[]});return t}getSlots(){return this.slots.map(t=>({...t,modifiers:[...t.modifiers||[]]}))}getAvailableSlots(){return this.slots.filter(t=>t.state===k.AVAILABLE)}getAvailableSlotCount(){return this.getAvailableSlots().length}hasAvailableSlot(){return this.getAvailableSlotCount()>0}getSlot(t){return t<0||t>=this.slots.length?null:{...this.slots[t],modifiers:[...this.slots[t].modifiers||[]]}}unlockSlot(t){if(t<0||t>=this.slots.length)return!1;const e=this.slots[t];return e.state!==k.LOCKED?!1:(e.state=k.AVAILABLE,!0)}lockSlot(t){return t<0||t>=this.slots.length?!1:(this.slots[t].state=k.LOCKED,delete this.slots[t].disabledUntilRound,!0)}disableSlot(t,e){if(t<0||t>=this.slots.length)return!1;const a=this.slots[t];return a.state===k.LOCKED?!1:(a.state=k.DISABLED,e!==void 0&&(a.disabledUntilRound=e),!0)}enableSlot(t){if(t<0||t>=this.slots.length)return!1;const e=this.slots[t];return e.state===k.DISABLED?(e.state=k.AVAILABLE,delete e.disabledUntilRound,!0):!1}addSlotModifier(t,e){if(t<0||t>=this.slots.length)return!1;const a=this.slots[t];return a.modifiers||(a.modifiers=[]),a.modifiers.push(e),!0}removeSlotModifier(t,e){if(t<0||t>=this.slots.length)return!1;const a=this.slots[t];if(!a.modifiers)return!1;const s=a.modifiers.length;return a.modifiers=a.modifiers.filter(i=>i.id!==e),a.modifiers.length<s}getSlotModifiers(t){const e=this.getSlot(t);return(e==null?void 0:e.modifiers)||[]}checkUnlocks(t,e,a=0){let s=0;for(const i of this.unlockConditions){if(this.slots[i.slotPosition].state!==k.LOCKED)continue;let o=!1;switch(i.type){case"round":o=t>=i.value;break;case"checkpoint":o=e>=i.value;break;case"currency_spent":o=a>=i.value;break}o&&this.unlockSlot(i.slotPosition)&&s++}return s}autoEnableSlots(t){let e=0;for(const a of this.slots)a.state===k.DISABLED&&a.disabledUntilRound!==void 0&&t>=a.disabledUntilRound&&(this.enableSlot(a.position),e++);return e}reset(){this.slots=this.initializeSlots()}setSlotLabel(t,e){return t<0||t>=this.slots.length?!1:(this.slots[t].label=e,!0)}setSlotIconClass(t,e){return t<0||t>=this.slots.length?!1:(this.slots[t].iconClass=e,!0)}}class xe{constructor(){l(this,"handlers",[])}register(t){this.handlers.push(t),this.handlers.sort((e,a)=>(e.priority??100)-(a.priority??100))}registerAll(t){t.forEach(e=>this.register(e))}getHandlers(t){return this.handlers.filter(e=>e.canHandle(t))}getAllHandlers(){return[...this.handlers]}clear(){this.handlers=[]}get count(){return this.handlers.length}}class Be{constructor(){l(this,"registry");this.registry=new xe}registerHandlers(t){this.registry.registerAll(t)}executeOnPlayEffects(t,e,a){for(const s of t.card.rules){if(s.effect.drawCards!==void 0||s.effect.drawCardsPerMatch!==void 0||s.effect.drawUntil!==void 0)continue;const r={playedCard:t,rule:s,state:e,drawCards:a.drawCards,findMatchingCards:a.findMatchingCards,cardMatchesFilter:a.cardMatchesFilter,deckHasMatchingCard:a.deckHasMatchingCard,addCardsToPlayerDeck:a.addCardsToPlayerDeck,addCardsToDiscard:a.addCardsToDiscard,removeCardsFromAllZones:a.removeCardsFromAllZones,emit:a.emit},o=this.registry.getHandlers(s.effect);for(const u of o)u.execute(r)}}executePostScoreEffects(t,e,a){const s=new Set;for(const i of t)for(const r of i.card.rules){const o=r.effect.drawCards!==void 0||r.effect.drawCardsPerMatch!==void 0||r.effect.drawUntil!==void 0,u=r.effect.grantPack!==void 0;if(!o&&!u)continue;const h={playedCard:i,rule:r,state:e,drawCards:a.drawCards,findMatchingCards:a.findMatchingCards,cardMatchesFilter:a.cardMatchesFilter,deckHasMatchingCard:a.deckHasMatchingCard,addCardsToPlayerDeck:a.addCardsToPlayerDeck,addCardsToDiscard:a.addCardsToDiscard,removeCardsFromAllZones:a.removeCardsFromAllZones,emit:a.emit},p=`${i.card.id}-${r.id}`;if(s.has(p))continue;s.add(p);const g=this.registry.getHandlers(r.effect);for(const E of g)E.execute(h)}}getRegistry(){return this.registry}}class w{constructor(){l(this,"priority",100)}isConditionMet(t){const{rule:e,playedCard:a,findMatchingCards:s}=t;if(!e.condition)return!0;if(e.condition.position!==void 0&&a.position!==e.condition.position||e.condition.roundState==="last_before_checkpoint"&&t.state.round!==t.state.checkpoint)return!1;if(e.condition.requires){const i=s(e.condition.requires,a),r=e.condition.requires.count;return r===0?i.length===0:r!==void 0?i.length>=r:i.length>0}if(e.condition.requiresAll)for(const i of e.condition.requiresAll){const r=s(i,a),o=i.count;if(o===0){if(r.length>0)return!1}else if(o!==void 0){if(r.length<o)return!1}else if(r.length===0)return!1}return!0}}class Ge extends w{constructor(){super(...arguments);l(this,"priority",10)}canHandle(e){return e.drawCards!==void 0}execute(e){const a=e.rule.effect.drawCards;if(!a||!this.isConditionMet(e))return;const s=e.drawCards(a);if(s.length>0){const i=`Draw ${s.length} card${s.length>1?"s":""}`;e.emit({type:"cards_drawn",cards:s,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:i,value:s.length})}}}class Ue extends w{constructor(){super(...arguments);l(this,"priority",11)}canHandle(e){return e.drawCardsPerMatch!==void 0}execute(e){var o;const a=e.rule.effect.drawCardsPerMatch;if(!a||!this.isConditionMet(e))return;const s=e.rule.effect.matchRequirements??((o=e.rule.condition)==null?void 0:o.requires),r=e.findMatchingCards(s,e.playedCard).length*a;if(r>0){const u=e.drawCards(r);if(u.length>0){const h=`Draw ${u.length} card${u.length>1?"s":""}`;e.emit({type:"cards_drawn",cards:u,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:h,value:u.length})}}}}class Fe extends w{constructor(){super(...arguments);l(this,"priority",12)}canHandle(e){return e.drawUntil!==void 0}execute(e){const a=e.rule.effect.drawUntil;if(!a||!this.isConditionMet(e)||!e.deckHasMatchingCard(a))return;const s=[];let i=!1;for(;!i;){const r=e.drawCards(1);if(r.length===0)break;s.push(...r);const o=r[r.length-1];e.cardMatchesFilter(o,a)&&(i=!0)}if(s.length>0){const r=`Draw ${s.length} card${s.length>1?"s":""}`;e.emit({type:"cards_drawn",cards:s,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:r,value:s.length})}}}class $e extends w{constructor(){super(...arguments);l(this,"priority",5)}canHandle(e){return e.persistTurns!==void 0||e.returnToHand!==void 0}execute(e){const a=e.rule.effect;a.persistTurns!==void 0&&(e.playedCard.persistsForTurns=a.persistTurns,e.playedCard.turnsInPlay=0,e.emit({type:"card_persists",card:e.playedCard.card,turnsRemaining:a.persistTurns})),a.returnToHand&&e.rule.targets.self&&(e.playedCard.returnToHand=!0)}}class qe extends w{constructor(){super(...arguments);l(this,"priority",20)}canHandle(e){return e.modifyPacks!==void 0}execute(e){const a=e.rule.effect.modifyPacks;if(!a||!this.isConditionMet(e))return;const s=e.rule.effect.modifyPacksPermanent??!1;e.emit({type:"pack_bonus_added",bonus:a,triggeredBy:e.playedCard.card,permanent:s});const i=`Next pack +${a} card${a>1?"s":""}`;e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:i,value:a})}}class Ve extends w{constructor(){super(...arguments);l(this,"priority",6)}canHandle(e){return e.delayedAdd!==void 0}execute(e){const a=e.rule.effect.delayedAdd;a&&this.isConditionMet(e)&&(e.playedCard.delayedBonuses||(e.playedCard.delayedBonuses=[]),e.playedCard.delayedBonuses.push({amount:a.amount,turnsRemaining:a.turns,applied:!1}))}}class Ye extends w{constructor(){super(...arguments);l(this,"priority",30)}canHandle(e){return e.addCardsToDeck!==void 0||e.removeCards!==void 0}execute(e){const a=e.rule.effect;this.isConditionMet(e)&&(a.addCardsToDeck&&this.addCardsToDeck(e),a.removeCards&&this.removeCards(e))}addCardsToDeck(e){const a=e.rule.effect.addCardsToDeck;let s=C;if(a.rarity&&(s=s.filter(o=>o.rarity===a.rarity)),a.type&&(s=s.filter(o=>o.type===a.type)),a.tag&&(s=s.filter(o=>o.tags.includes(a.tag))),a.color&&(s=s.filter(o=>o.color===a.color)),s.length===0||a.count<=0)return;const i=[];for(let o=0;o<a.count;o++){const h={...s[Math.floor(Math.random()*s.length)]};i.push(h)}e.addCardsToPlayerDeck(i),e.addCardsToDiscard(i);const r=`Added ${i.length} card${i.length>1?"s":""} to deck`;e.emit({type:"cards_added_to_deck",cards:i,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:r,value:i.length})}removeCards(e){const a=e.rule.effect.removeCards,s=e.removeCardsFromAllZones(a);if(s.length>0){const i=`Removed ${s.length} card${s.length>1?"s":""} from game`;if(e.emit({type:"cards_removed",cards:s,reason:`Removed by ${e.playedCard.card.name}`,triggeredBy:e.playedCard.card}),e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:i,value:s.length}),e.rule.effect.bonusPerRemovedCard&&s.length>0){const r=s.length*e.rule.effect.bonusPerRemovedCard;e.playedCard.effectBonus=(e.playedCard.effectBonus||0)+r;const o=`Gain ${r} EP from removed cards`;e.emit({type:"effect_triggered",card:e.playedCard.card,effectDescription:o,value:r})}}}}class ze extends w{constructor(){super(...arguments);l(this,"priority",50)}canHandle(e){return e.grantPack!==void 0}execute(e){const a=e.rule.effect.grantPack;a&&this.isConditionMet(e)&&e.emit({type:"pack_reward_added",packId:a.packId,triggeredBy:e.playedCard.card})}}class We{constructor(t){l(this,"state");l(this,"eventListeners",[]);l(this,"deckManager");l(this,"packGenerator");l(this,"slotManager");l(this,"effectExecutor");this.deckManager=new Le,this.packGenerator=new De,this.slotManager=new _e,this.effectExecutor=new Be,this.effectExecutor.registerHandlers([new Ge,new Ue,new Fe,new $e,new qe,new Ve,new Ye,new ze]),this.state=this.initializeGame(t)}on(t){this.eventListeners.push(t)}off(t){const e=this.eventListeners.indexOf(t);e>-1&&this.eventListeners.splice(e,1)}emit(t){for(const e of this.eventListeners)e(t)}initializeGame(t){const e=t?[...t]:[...B];this.slotManager.checkUnlocks(1,0,0);const a={round:1,targetScore:75,hand:[],playedCards:[],score:0,cumulativeScore:0,checkpoint:5,currency:0,playerDeck:e,deck:[],discardPile:[],playerStats:{totalScore:0,roundsWon:0,roundsLost:0,cardsPlayed:0,synergiesActivated:0},gamePhase:v.PLAY,cardSlots:this.slotManager.getSlots(),cardPlayCounts:new Map,packBonusCards:0,permanentPackBonus:0,pendingPackRewards:[],freePacks:new Map,activeModifier:void 0,modifierConfig:{...Ne}};return this.state=a,this.reshuffleFromPlayerDeck(),this.state}shuffleDeck(t){for(let e=t.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[t[e],t[a]]=[t[a],t[e]]}}cloneCard(t){const e=globalThis.structuredClone;return typeof e=="function"?e(t):JSON.parse(JSON.stringify(t))}reshuffleFromPlayerDeck(){const t=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playedCards.map(s=>s.card)],e=this.state.playerDeck.length-t.length;if(e>0){const s=new Set(t.map(r=>r.id)),i=this.state.playerDeck.filter(r=>!s.has(r.id));for(let r=0;r<e&&r<i.length;r++)t.push({...i[r]})}this.shuffleDeck(t),this.state.deck=t,this.state.hand=[],this.state.discardPile=[],this.state.playedCards=[];const a=Math.min(6,this.state.deck.length);for(let s=0;s<a;s++)this.state.hand.push(this.state.deck.pop())}getState(){return{...this.state}}playCard(t,e){if(this.state.gamePhase!==v.PLAY)return!1;const a=this.slotManager.getAvailableSlotCount();if(this.state.playedCards.length>=a)return!1;const s=this.state.hand.findIndex(u=>u.id===t);if(s===-1)return!1;const i=this.state.hand[s],r={card:i,position:e};this.state.hand.splice(s,1),this.state.playedCards.push(r),this.state.playerStats.cardsPlayed++;const o=this.state.cardPlayCounts.get(i.name)||0;return this.state.cardPlayCounts.set(i.name,o+1),this.emit({type:"card_played",card:i,position:e}),this.executeOnPlayEffects(r),!0}unplayCard(t){if(this.state.gamePhase!==v.PLAY)return!1;const e=this.state.playedCards.findIndex(s=>s.card.id===t);if(e===-1)return!1;const a=this.state.playedCards.splice(e,1)[0];return this.state.hand.push(a.card),this.emit({type:"card_unplayed",card:a.card}),!0}endTurn(){if(this.state.gamePhase!==v.PLAY)throw new Error("Cannot end turn in current phase");const t=this.calculateScore();this.state.score=t.score,this.state.cumulativeScore+=t.score,this.state.gamePhase=v.SCORE,this.state.playerStats.totalScore=this.state.cumulativeScore,this.state.playerStats.synergiesActivated+=t.synergiesActivated.length;const e=[...this.state.playedCards];if(this.processPostScoreEffects(e),this.clearModifier(),this.state.round>=this.state.checkpoint)if(t.success=this.state.cumulativeScore>=this.state.targetScore,t.success){this.state.playerStats.roundsWon++;const a=this.state.cumulativeScore-this.state.targetScore;this.state.currency+=a,this.state.gamePhase=v.CHECKPOINT}else this.state.playerStats.roundsLost++,this.state.gamePhase=v.GAME_END;return t}calculateScore(){const t=this.evaluateAllRules(),e=[];for(const s of this.state.playedCards)s.scoring={baseScore:s.card.baseScore,buffsReceived:[],buffsGiven:[],finalScore:s.card.baseScore};for(const s of t){const i=this.state.playedCards.find(o=>o.card.id===s.sourceCardId),r=this.state.playedCards.find(o=>o.card.id===s.targetCardId);i!=null&&i.scoring&&(r!=null&&r.scoring)&&(i.scoring.buffsGiven.push(s),r.scoring.buffsReceived.push(s),e.includes(s.description)||e.push(s.description))}for(const s of this.state.playedCards){if(!s.scoring)continue;let i=s.scoring.baseScore;if(s.effectBonus&&(i+=s.effectBonus),s.delayedBonuses&&s.delayedBonuses.length>0)for(const r of s.delayedBonuses)r.turnsRemaining===0&&!r.applied&&(i+=r.amount,r.applied=!0);for(const r of s.scoring.buffsReceived)r.isMultiplier||(i+=r.value);s.scoring.finalScore=i}for(const s of this.state.playedCards){if(!s.scoring)continue;let i=s.scoring.finalScore;for(const r of s.scoring.buffsReceived)r.isMultiplier&&(i=Math.floor(i*r.value));s.scoring.finalScore=i}for(const s of this.state.playedCards)if(s.scoring){for(const i of s.scoring.buffsReceived)if(i.isSet){s.scoring.finalScore=i.value;break}}for(const s of this.state.playedCards)s.delayedBonuses&&(s.delayedBonuses=s.delayedBonuses.filter(i=>!i.applied),s.delayedBonuses.length===0&&delete s.delayedBonuses),s.effectBonus!==void 0&&delete s.effectBonus;const a=this.state.playedCards.reduce((s,i)=>{var r;return s+(((r=i.scoring)==null?void 0:r.finalScore)??i.card.baseScore)},0);return{score:a,targetScore:this.state.targetScore,success:!1,synergiesActivated:e,bonusScore:a-this.state.playedCards.reduce((s,i)=>{var r;return s+(((r=i.scoring)==null?void 0:r.finalScore)??i.card.baseScore)},0)}}processPostScoreEffects(t){const e={drawCards:s=>this.drawCards(s),findMatchingCards:(s,i)=>this.findMatchingCardsInList(t,s,i),cardMatchesFilter:(s,i)=>this.cardMatchesFilter(s,i),deckHasMatchingCard:s=>this.deckHasMatchingCard(s),addCardsToPlayerDeck:s=>{s.forEach(i=>this.state.playerDeck.push({...i}))},addCardsToDiscard:s=>{this.state.discardPile.push(...s)},removeCardsFromAllZones:s=>this.removeCardsFromGame(s),emit:s=>this.emit(s)},a=s=>{s.type==="pack_reward_added"&&(this.state.pendingPackRewards||(this.state.pendingPackRewards=[]),this.state.pendingPackRewards.push(s.packId))};this.on(a),this.effectExecutor.executePostScoreEffects(t,this.state,e),this.off(a)}evaluateAllRules(){const t=[];let e=0;if(this.state.activeModifier){const a=this.state.activeModifier.rule,s=this.findModifierTargets(a);for(const i of s){const r=a.effect.add||a.effect.multiply||a.effect.set||0;t.push({id:`buff_${e++}`,ruleId:a.id,sourceCardId:"council_modifier",targetCardId:i.card.id,description:`COUNCIL: ${a.description}`,value:r,isMultiplier:a.effect.multiply!==void 0,isSet:a.effect.set!==void 0,applied:!1})}}for(const a of this.state.playedCards)for(const s of a.card.rules){if(!this.checkRuleCondition(s,a))continue;const i=this.findRuleTargets(s,a);for(const r of i){const o=this.calculateRuleValue(s,a);t.push({id:`buff_${e++}`,ruleId:s.id,sourceCardId:a.card.id,targetCardId:r.card.id,description:s.description,value:o,isMultiplier:s.effect.multiply!==void 0,isSet:s.effect.set!==void 0,applied:!1})}if(s.effect.returnToHand&&!s.targets.self)for(const r of i)r.returnToHand=!0}return t}findModifierTargets(t){var a;const e=[];for(const s of this.state.playedCards){let i=!1;t.targets.type!==void 0&&(i=s.card.type===t.targets.type),t.targets.color!==void 0&&(i=s.card.color===t.targets.color),t.targets.tag!==void 0&&(i=((a=s.card.tags)==null?void 0:a.includes(t.targets.tag))||!1),i&&e.push(s)}return e}findMatchingCards(t,e){return this.findMatchingCardsInList(this.state.playedCards,t,e)}findMatchingCardsInList(t,e,a){if(!e)return t.filter(i=>i.card.id!==a.card.id);const s=e.includeSelf??!1;return t.filter(i=>!(!s&&i.card.id===a.card.id||e.cardId&&i.card.id!==e.cardId||e.type&&i.card.type!==e.type||e.color&&i.card.color!==e.color||e.tag&&!i.card.tags.includes(e.tag)||e.rarity&&i.card.rarity!==e.rarity||e.subtype&&i.card.subtype!==e.subtype))}checkRuleCondition(t,e){if(!t.condition)return!0;if(t.condition.position!==void 0&&e.position!==t.condition.position||t.condition.roundState==="last_before_checkpoint"&&this.state.round!==this.state.checkpoint)return!1;if(t.condition.requires){const a=this.findMatchingCards(t.condition.requires,e),s=t.condition.requires.count;if(s===0){if(a.length>0)return!1}else if(s!==void 0){if(a.length<s)return!1}else if(a.length===0)return!1}if(t.condition.requiresAll)for(const a of t.condition.requiresAll){const s=this.findMatchingCards(a,e),i=a.count;if(i===0){if(s.length>0)return!1}else if(i!==void 0){if(s.length<i)return!1}else if(s.length===0)return!1}return!0}findRuleTargets(t,e){if(t.targets.self)return[e];const a=this.state.playedCards.filter(s=>!(s.card.id===e.card.id||t.targets.type&&s.card.type!==t.targets.type||t.targets.color&&s.card.color!==t.targets.color||t.targets.tag&&!s.card.tags.includes(t.targets.tag)||t.targets.rarity&&s.card.rarity!==t.targets.rarity||t.targets.subtype&&s.card.subtype!==t.targets.subtype||t.targets.position!==void 0&&s.position!==t.targets.position));return a.length===0?[]:t.targets.limit==="highest_base"?[a.reduce((s,i)=>i.card.baseScore>s.card.baseScore?i:s,a[0])]:a}calculateRuleValue(t,e){var s;let a=0;if(t.effect.add!==void 0?a=t.effect.add:t.effect.multiply!==void 0?a=t.effect.multiply:t.effect.set!==void 0&&(a=t.effect.set),t.effect.perCard){const i=this.findMatchingCards(t.effect.matchRequirements??((s=t.condition)==null?void 0:s.requires),e);a*=i.length}return t.effect.perHandCard&&(a*=this.state.hand.length),a}startNextRound(){if(this.state.gamePhase!==v.SCORE)throw new Error("Cannot start next round in current phase");const t=[],e=[],a=[];for(const i of this.state.playedCards)i.persistsForTurns!==void 0?(i.turnsInPlay=(i.turnsInPlay||0)+1,i.turnsInPlay<i.persistsForTurns?(t.push(i),this.advanceDelayedBonuses(i),this.emit({type:"card_persists",card:i.card,turnsRemaining:i.persistsForTurns-i.turnsInPlay})):i.returnToHand?e.push(i.card):a.push(i.card)):i.returnToHand?e.push(i.card):a.push(i.card);this.state.playedCards=t,e.length>0&&(this.state.hand.push(...e),this.emit({type:"cards_returned_to_hand",cards:e})),this.state.score=0;const s=Math.max(0,6-this.state.hand.length);if(s>0){const i=this.drawCards(s);i.length>0&&this.emit({type:"cards_drawn",cards:i})}a.length>0&&this.state.discardPile.push(...a),this.state.round++,this.state.gamePhase=v.PLAY,this.emit({type:"round_start",round:this.state.round}),this.generateModifier()}getHand(){return[...this.state.hand]}getPlayedCards(){return[...this.state.playedCards]}getCurrentScore(){return this.state.score}getTargetScore(){return this.state.targetScore}getRound(){return this.state.round}getCheckpoint(){return this.state.checkpoint}getCurrency(){return this.state.currency}getPlayerDeck(){return[...this.state.playerDeck]}getPlayerStats(){return{...this.state.playerStats}}getAvailableSlotCount(){return this.slotManager.getAvailableSlotCount()}getMaxSlotCount(){return this.slotManager.getSlots().length}getCardSlots(){return this.slotManager.getSlots()}enterCheckpoint(){if(this.state.gamePhase!==v.CHECKPOINT)throw new Error("Not at a checkpoint")}continueToNextCheckpoint(){if(this.state.gamePhase!==v.CHECKPOINT)throw new Error("Can only continue from checkpoint phase");this.state.checkpoint+=5,this.state.targetScore=Math.floor(this.state.targetScore*1.5),this.state.deck.length<10&&(this.state.deck.push(...this.state.discardPile),this.state.discardPile=[],this.shuffleDeck(this.state.deck)),this.state.gamePhase=v.SCORE}restartGame(){this.slotManager.reset(),this.state=this.initializeGame()}getDeckDuplicates(){return this.deckManager.getDuplicateGroups(this.state.playerDeck)}getFullDeckGroups(){const t=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playedCards.map(e=>e.card)];return this.deckManager.getDuplicateGroups(t)}canBurnCard(t){return this.deckManager.canBurn(this.state.playerDeck,t)}burnTriple(t){const a=[...this.state.deck,...this.state.hand,...this.state.discardPile,...this.state.playerDeck].filter(o=>o.name===t);if(a.length<3)return{success:!1,goldEarned:0};const s=this.deckManager.getRefundValue(a[0].rarity),i=a.slice(0,3),r=[];return i.forEach(o=>{let u=!1;const h=this.state.playerDeck.indexOf(o);if(h>-1&&(r.push(this.state.playerDeck.splice(h,1)[0]),u=!0),!u){const p=this.state.deck.indexOf(o);p>-1&&(r.push(this.state.deck.splice(p,1)[0]),u=!0)}if(!u){const p=this.state.hand.indexOf(o);p>-1&&(r.push(this.state.hand.splice(p,1)[0]),u=!0)}if(!u){const p=this.state.discardPile.indexOf(o);p>-1&&r.push(this.state.discardPile.splice(p,1)[0])}}),this.state.currency+=s,this.emit({type:"cards_burned",cards:r,goldEarned:s}),{success:!0,goldEarned:s}}getDeckRarityDistribution(){return this.deckManager.getRarityDistribution(this.state.playerDeck)}generatePackForSelection(t){const e=this.packGenerator.getPackConfig(t);if(!e)return null;const s=(this.state.freePacks.get(t)||0)>0;if(!s&&this.state.currency<e.cost)return null;const i=this.packGenerator.generate(t);return{packType:i.packType,cards:i.cards,cost:s?0:i.cost,isFree:s}}selectCardFromPack(t,e,a,s,i){const r=s.find(o=>o.id===e);if(!r)return!1;if(i){const o=this.state.freePacks.get(t)||0;if(o<=0)return!1;this.state.freePacks.set(t,o-1)}else{if(this.state.currency<a)return!1;this.state.currency-=a}return this.state.playerDeck.push({...r}),this.emit({type:"card_purchased",card:r,cost:a}),!0}generatePack(t){const e=this.packGenerator.getPackConfig(t);if(!e||this.state.currency<e.cost)return null;this.state.currency-=e.cost;const a=this.packGenerator.generate(t);return a.cards.forEach(s=>{this.state.playerDeck.push({...s})}),this.emit({type:"pack_opened",cards:a.cards,packType:a.packType}),{packType:a.packType,cards:a.cards,cost:a.cost}}getAvailablePackTypes(){return this.packGenerator.getAvailablePackTypes()}buyBoosterPack(){const t=this.generatePack("base");return t?t.cards:null}getBurnCandidates(){if(this.state.playerDeck.length<3)return null;const t=[...this.state.playerDeck];return this.shuffleDeck(t),t.slice(0,3)}burnCard(t){if(this.state.currency<10)return!1;const a=this.state.playerDeck.findIndex(i=>i.id===t);if(a===-1)return!1;this.state.currency-=10;const s=this.state.playerDeck.splice(a,1)[0];return this.emit({type:"cards_burned",cards:[s],goldEarned:0}),!0}enterShop(){if(this.state.gamePhase!==v.CHECKPOINT)throw new Error("Can only enter shop from checkpoint phase");const t=this.state.freePacks.get("base")||0;this.state.freePacks.set("base",t+1),this.state.gamePhase=v.SHOP,this.emit({type:"free_pack_granted",packType:"base",quantity:1})}exitShop(){if(this.state.gamePhase!==v.SHOP)throw new Error("Can only exit shop from shop phase");this.reshuffleFromPlayerDeck(),this.state.targetScore=Math.floor(this.state.targetScore*1.2),this.state.checkpoint+=5;const t=Math.floor(this.state.checkpoint/5)-1,e=this.slotManager.checkUnlocks(this.state.round,t,0);this.state.cardSlots=this.slotManager.getSlots(),e>0&&this.emit({type:"slots_unlocked",count:e,totalSlots:this.slotManager.getAvailableSlotCount()}),this.state.cumulativeScore=0,this.state.gamePhase=v.SCORE}getActiveBuffs(){return this.state.playedCards.length===0?[]:this.evaluateAllRules()}generateModifier(){if(!this.state.modifierConfig.enabled)return;const{frequency:t,startRound:e}=this.state.modifierConfig;if(this.state.round<e||(this.state.round-e)%t!==0)return;const a=Math.floor(Math.random()*3),s=Pe(a);if(!s)return;const i={id:`modifier_${this.state.round}_${a}`,councilMemberId:a,round:this.state.round,flavorText:s.flavorText,rule:s.rule};this.state.activeModifier=i,this.emit({type:"modifier_generated",modifier:i})}clearModifier(){this.state.activeModifier&&(this.emit({type:"modifier_cleared",modifier:this.state.activeModifier}),this.state.activeModifier=void 0)}getActiveModifier(){return this.state.activeModifier}executeOnPlayEffects(t){const e={drawCards:s=>this.drawCards(s),findMatchingCards:(s,i)=>this.findMatchingCards(s,i),cardMatchesFilter:(s,i)=>this.cardMatchesFilter(s,i),deckHasMatchingCard:s=>this.deckHasMatchingCard(s),addCardsToPlayerDeck:s=>{s.forEach(i=>this.state.playerDeck.push({...i}))},addCardsToDiscard:s=>{this.state.discardPile.push(...s)},removeCardsFromAllZones:s=>this.removeCardsFromGame(s),emit:s=>this.emit(s)},a=s=>{s.type==="pack_bonus_added"&&(s.permanent?this.state.permanentPackBonus+=s.bonus:this.state.packBonusCards+=s.bonus)};this.on(a),this.effectExecutor.executeOnPlayEffects(t,this.state,e),this.off(a)}cardMatchesFilter(t,e){return!(e.color&&t.color!==e.color||e.type&&t.type!==e.type||e.tag&&!t.tags.includes(e.tag)||e.rarity&&t.rarity!==e.rarity)}deckHasMatchingCard(t){return!!(this.state.deck.some(e=>this.cardMatchesFilter(e,t))||this.state.discardPile.some(e=>this.cardMatchesFilter(e,t)))}advanceDelayedBonuses(t){if(t.delayedBonuses)for(const e of t.delayedBonuses)e.turnsRemaining>0&&(e.turnsRemaining-=1)}drawCards(t){const e=[];for(let a=0;a<t;a++){if(this.state.deck.length===0&&this.state.discardPile.length>0){const s=[...this.state.discardPile];this.shuffleDeck(s),this.state.deck=s,this.state.discardPile=[],this.emit({type:"deck_reshuffled"})}if(this.state.deck.length>0){const s=this.state.deck.pop();this.state.hand.push(s),e.push(s)}}return e}debugAddCardToHand(t,e){const a=U(t);if(!a)return;const s=this.cloneCard(a);return this.state.hand.push(s),e!=null&&e.addToPlayerDeck&&this.state.playerDeck.push(this.cloneCard(a)),s}debugAddCardToDeck(t,e){const a=U(t);if(!a)return;const s=(e==null?void 0:e.position)??"top",i=this.cloneCard(a);switch(s){case"bottom":this.state.deck.unshift(i);break;case"shuffle":{const r=Math.floor(Math.random()*(this.state.deck.length+1));this.state.deck.splice(r,0,i);break}case"top":default:this.state.deck.push(i);break}return((e==null?void 0:e.addToPlayerDeck)??!0)&&this.state.playerDeck.push(this.cloneCard(a)),i}debugAddCardToDiscard(t,e){const a=U(t);if(!a)return;const s=this.cloneCard(a);return this.state.discardPile.push(s),((e==null?void 0:e.addToPlayerDeck)??!0)&&this.state.playerDeck.push(this.cloneCard(a)),s}debugAddRandomCards(t,e){const a=[];if(t<=0)return a;for(let s=0;s<t;s++){const i=C[Math.floor(Math.random()*C.length)];if(!i)continue;switch((e==null?void 0:e.destination)??"deck-shuffle"){case"hand":{const o=this.debugAddCardToHand(i.id,{addToPlayerDeck:!0});o&&a.push(o);break}case"deck-top":{const o=this.debugAddCardToDeck(i.id,{position:"top"});o&&a.push(o);break}case"deck-bottom":{const o=this.debugAddCardToDeck(i.id,{position:"bottom"});o&&a.push(o);break}case"discard":{const o=this.debugAddCardToDiscard(i.id);o&&a.push(o);break}case"deck-shuffle":default:{const o=this.debugAddCardToDeck(i.id,{position:"shuffle"});o&&a.push(o);break}}}return a}debugDrawCards(t){return t<=0?[]:this.drawCards(t)}debugRefillHand(){const t=Math.max(0,6-this.state.hand.length);return t===0?[]:this.drawCards(t)}debugClearHand(t){this.state.hand.length!==0&&(((t==null?void 0:t.moveToDiscard)??!0)&&this.state.discardPile.push(...this.state.hand),this.state.hand=[])}debugReshuffleDeck(){this.state.deck.length<=1||this.shuffleDeck(this.state.deck)}removeCardsFromGame(t){const e=[],a=o=>!(t.rarity&&o.rarity!==t.rarity||t.type&&o.type!==t.type||t.tag&&!o.tags.includes(t.tag)),s=this.state.deck.filter(o=>a(o)?(e.push(o),!1):!0);this.state.deck=s;const i=this.state.hand.filter(o=>a(o)?(e.push(o),!1):!0);this.state.hand=i;const r=this.state.discardPile.filter(o=>a(o)?(e.push(o),!1):!0);if(this.state.discardPile=r,e.length>0)for(const o of e){const u=this.state.playerDeck.findIndex(h=>h.id===o.id);u!==-1&&this.state.playerDeck.splice(u,1)}return e}}class A{constructor(t="div",e=""){l(this,"element");l(this,"children",[]);this.element=document.createElement(t),e&&(this.element.className=e)}getElement(){return this.element}addChild(t){this.children.push(t),this.element.appendChild(t.getElement())}removeChild(t){const e=this.children.indexOf(t);e>-1&&(this.children.splice(e,1),this.element.removeChild(t.getElement()))}clearChildren(){this.children.forEach(t=>{this.element.removeChild(t.getElement())}),this.children=[]}setVisible(t){this.element.style.display=t?"":"none"}addClass(t){this.element.classList.add(t)}removeClass(t){this.element.classList.remove(t)}setAttribute(t,e){this.element.setAttribute(t,e)}getAttribute(t){return this.element.getAttribute(t)}}class Ke extends A{constructor(){super("div","reaction-bubble");l(this,"duration",1500)}render(){}show(e,a){this.element.textContent=e.text,this.element.className="reaction-bubble",this.element.classList.add(`reaction-${e.type}`);const s=this.element.parentElement;if(s){const i=s.querySelectorAll(".council-seat");if(i[a]){const r=i[a],o=s.getBoundingClientRect(),u=r.getBoundingClientRect(),h=u.left-o.left+u.width/2;this.element.style.left=`${h}px`}}this.element.classList.add("visible"),setTimeout(()=>{this.element.classList.remove("visible")},this.duration)}}const $=[{id:0,name:"PUSHBERGER",title:"Urban Development",backstory:"Master of metropolitan mayhem. Believes every city needs proper infrastructure... for villainy.",personality:"Pragmatic, urban-focused, values efficient chaos",preferences:[c.LOCATION,c.CRIME],auraColor:"#607D8B"},{id:1,name:"PLAGIARIZA",title:"Chief Science Officer",backstory:'Eight stolen PhDs, zero original thoughts. Masters the art of "inspired" research.',personality:"Analytical, methodical, obsessed with scientific schemes",preferences:[c.GEAR],auraColor:"#00E676"},{id:2,name:"POLLUTA",title:"Nature's Nemesis",backstory:"Turns pristine wilderness into profitable wasteland. Mother Nature's least favorite child.",personality:"Destructive, nature-corrupting, values environmental chaos",preferences:[c.LOCATION],auraColor:"#8D6E63"}];function je(n){return $.find(t=>t.id===n)}class Ze extends A{constructor(){super("div","demand-banner"),this.element.style.display="none"}render(){}showModifier(t){const e=je(t.councilMemberId);e&&(this.element.innerHTML=`
      <div class="demand-content" data-member-id="${e.id}">
        <div class="demand-header">
          <div class="demand-member-badge" style="border-color: ${e.auraColor}">
            ${e.name}
          </div>
          <div class="demand-flavor">${t.flavorText}</div>
        </div>

        <div class="demand-body">
          <div class="demand-requirement">
            <span class="requirement-label">EFFECT:</span>
            <span class="requirement-text">${t.rule.description}</span>
          </div>
        </div>
      </div>
    `,this.element.style.display="block",this.element.classList.add("active"))}hide(){this.element.classList.remove("active","demand-met"),this.element.style.display="none"}}class Xe extends A{constructor(){super("div","game-header");l(this,"roundValue",null);l(this,"checkpointValue",null);l(this,"roundScoreValue",null);l(this,"cumulativeScoreValue",null);l(this,"targetValue",null);l(this,"currencyValue",null);l(this,"scoreFill",null);l(this,"councilSeatsContainer",null);l(this,"reactionBubble");l(this,"demandBanner");this.reactionBubble=new Ke,this.demandBanner=new Ze,this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="council-chamber">
        <!-- Left Column: Demand Banner -->
        <div class="header-left" id="header-left">
          <!-- Demand banner will be appended here -->
        </div>

        <!-- Center Column: Council Title & Seats -->
        <div class="header-center">
          <div class="council-title-banner">
            <div class="title-starburst">
              <h1 class="header-title">THE COUNCIL DECIDES</h1>
            </div>
            <div class="council-subtitle">League of Ultimate Evil - Scheme Approval Board</div>
          </div>

          <div class="council-seats">
            ${$.map(e=>`
              <div class="council-seat-container">
                <div class="council-seat" data-member-id="${e.id}"></div>
                <div class="council-nameplate">${e.name}</div>
              </div>
            `).join("")}
          </div>
        </div>

        <!-- Right Column: Metrics -->
        <div class="header-right">
          <div class="council-metrics">
            <div class="metric-box">
              <span class="metric-label">Audience</span>
              <span class="metric-value">
                <span id="round-value">1</span>/<span id="checkpoint-value">5</span>
              </span>
            </div>

            <div class="metric-box">
              <span class="metric-label">Villain Bucks</span>
              <span class="metric-value" id="currency-value">0</span>
            </div>

            <div class="metric-box">
              <span class="metric-label">This Scheme</span>
              <span class="metric-value" id="round-score-value">0</span>
            </div>

            <div class="metric-box approval-box">
              <span class="metric-label">Council Approval</span>
              <div class="approval-bar">
                <div class="approval-fill" id="score-fill" style="width: 0%"></div>
              </div>
              <span class="approval-text">
                <span id="cumulative-score-value">0</span> / <span id="target-value">75</span>
              </span>
            </div>
          </div>
        </div>
      </div>
    `,this.roundValue=this.element.querySelector("#round-value"),this.checkpointValue=this.element.querySelector("#checkpoint-value"),this.currencyValue=this.element.querySelector("#currency-value"),this.roundScoreValue=this.element.querySelector("#round-score-value"),this.cumulativeScoreValue=this.element.querySelector("#cumulative-score-value"),this.targetValue=this.element.querySelector("#target-value"),this.scoreFill=this.element.querySelector("#score-fill"),this.councilSeatsContainer=this.element.querySelector(".council-seats"),this.councilSeatsContainer&&(this.councilSeatsContainer.style.position="relative",this.councilSeatsContainer.appendChild(this.reactionBubble.getElement()))}render(){}updateRound(e,a){this.roundValue&&(this.roundValue.textContent=e.toString()),this.checkpointValue&&(this.checkpointValue.textContent=a.toString())}updateScore(e,a,s){if(this.roundScoreValue&&(this.roundScoreValue.textContent=e.toString()),this.cumulativeScoreValue&&(this.cumulativeScoreValue.textContent=a.toString()),this.targetValue&&(this.targetValue.textContent=s.toString()),this.scoreFill){const i=Math.min(100,a/s*100);this.scoreFill.style.width=`${i}%`}}updateCurrency(e){this.currencyValue&&(this.currencyValue.textContent=e.toString())}showReaction(e){const a=Math.floor(Math.random()*3);this.reactionBubble.show(e,a)}showModifier(e){this.demandBanner.showModifier(e)}hideModifier(){this.demandBanner.hide()}setupDemandBanner(){const e=document.getElementById("header-left");e&&e.appendChild(this.demandBanner.getElement())}}var T=(n=>(n.DEFAULT="default",n.HOVER="hover",n.SELECTED="selected",n.PLAYABLE="playable",n.DISABLED="disabled",n.BUFFED="buffed",n.PLAYING="playing",n))(T||{});function H(n,t={}){const e=n.baseScore,a=t.finalScore??e,s=a-e;return{card:n,baseScore:e,finalScore:a,scoreChange:s,hasScoreChange:s!==0,buffs:t.buffs??[],buffsReceived:t.buffsReceived??[],buffsGiven:t.buffsGiven??[],uiState:t.uiState??"default",isPlayable:t.isPlayable??!1,isSelected:t.isSelected??!1,onClick:t.onClick,onHover:t.onHover}}class O{constructor(t){l(this,"container");l(this,"displayData");l(this,"scoreElement",null);l(this,"badgeContainer",null);this.displayData=t,this.container=this.createCardElement()}createCardElement(){const t=this.displayData.card,e=document.createElement("div");e.className=this.getCardClasses(),e.setAttribute("data-card-id",t.id),e.setAttribute("data-color",t.color),e.setAttribute("data-type",t.type),e.setAttribute("data-rarity",t.rarity);const a=this.createColorBand();e.appendChild(a);const s=this.createBody();if(e.appendChild(s),this.displayData.buffsReceived.length>0){const i=this.createBuffBadges();this.badgeContainer=i,e.appendChild(i)}return e}createColorBand(){const t=document.createElement("div");t.className="card-color-band";const e=document.createElement("div");return e.className="card-type-badge",e.textContent=this.displayData.card.type.toUpperCase(),t.appendChild(e),t}createBody(){const t=document.createElement("div");t.className="card-body";const e=document.createElement("div");e.className="card-name",e.textContent=this.displayData.card.name,t.appendChild(e);const a=this.createScoreDisplay();if(this.scoreElement=a,t.appendChild(a),this.displayData.card.rules.length>0){const s=this.createRulesSection();t.appendChild(s)}return t}createScoreDisplay(){const t=document.createElement("div");if(t.className="card-score-container",this.displayData.hasScoreChange){t.classList.add("card-score-buffed");const e=document.createElement("div");e.className="card-score-final",e.textContent=this.displayData.finalScore.toString(),t.appendChild(e);const a=document.createElement("div");a.className="card-score-change",a.textContent=`+${this.displayData.scoreChange}`,t.appendChild(a);const s=document.createElement("div");s.className="card-score-base",s.textContent=this.displayData.baseScore.toString(),t.appendChild(s)}else{const e=document.createElement("div");e.className="card-score",e.textContent=this.displayData.baseScore.toString(),t.appendChild(e)}return t}createRulesSection(){const t=document.createElement("div");return t.className="card-rules",this.displayData.card.rules.forEach(e=>{const a=document.createElement("div");a.className="rule-item",a.textContent=e.description,t.appendChild(a)}),t}createBuffBadges(){const t=document.createElement("div");return t.className="buff-badges",this.displayData.buffsReceived.forEach(e=>{const a=document.createElement("div");a.className=`buff-badge ${e.isMultiplier?"multiplier":"additive"}`,a.textContent=e.isMultiplier?`×${e.value}`:`+${e.value}`,a.title=e.description,t.appendChild(a)}),t}getCardClasses(){const t=["card"],e=this.displayData.uiState;return e!==T.DEFAULT&&t.push(`card-${e}`),this.displayData.buffsReceived.length>0&&t.push("card-buffed"),this.displayData.buffsGiven.length>0&&t.push("card-source"),this.displayData.isPlayable&&t.push("card-playable"),this.displayData.isSelected&&t.push("card-selected"),t.join(" ")}update(t){const e=this.displayData;this.displayData=t,(e.uiState!==t.uiState||e.buffsReceived.length!==t.buffsReceived.length||e.buffsGiven.length!==t.buffsGiven.length)&&(this.container.className=this.getCardClasses()),(e.finalScore!==t.finalScore||e.hasScoreChange!==t.hasScoreChange)&&this.updateScore(),e.buffsReceived.length!==t.buffsReceived.length&&this.updateBadges()}updateScore(){if(!this.scoreElement)return;const t=this.scoreElement.parentElement;if(t){const e=this.createScoreDisplay();t.replaceChild(e,this.scoreElement),this.scoreElement=e}}updateBadges(){if(this.badgeContainer&&(this.badgeContainer.remove(),this.badgeContainer=null),this.displayData.buffsReceived.length>0){const t=this.createBuffBadges();this.badgeContainer=t,this.container.appendChild(t)}}getElement(){return this.container}}class L{constructor(t){l(this,"view");l(this,"displayData");this.displayData=t,this.view=new O(t),this.attachEventListeners()}static fromCard(t,e){const a=H(t,{onClick:e});return new L(a)}attachEventListeners(){const t=this.view.getElement();this.displayData.onClick&&t.addEventListener("click",()=>{this.displayData.onClick(this.displayData.card)}),t.addEventListener("mouseenter",()=>{this.handleMouseEnter()}),t.addEventListener("mouseleave",()=>{this.handleMouseLeave()})}handleMouseEnter(){this.displayData.uiState!==T.DISABLED&&(this.updateState(T.HOVER),this.displayData.onHover&&this.displayData.onHover(this.displayData.card))}handleMouseLeave(){this.displayData.isSelected?this.updateState(T.SELECTED):this.displayData.buffsReceived.length>0||this.displayData.buffsGiven.length>0?this.updateState(T.BUFFED):this.displayData.isPlayable?this.updateState(T.PLAYABLE):this.updateState(T.DEFAULT)}updateState(t){this.displayData.uiState!==t&&(this.displayData.uiState=t,this.view.update(this.displayData))}updateDisplayData(t){this.displayData={...this.displayData,...t},t.finalScore!==void 0&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0),this.view.update(this.displayData)}setPlayable(t){this.updateDisplayData({isPlayable:t}),t&&this.displayData.uiState===T.DEFAULT&&this.updateState(T.PLAYABLE)}setSelected(t){this.updateDisplayData({isSelected:t}),this.updateState(t?T.SELECTED:T.DEFAULT)}setBuffs(t,e){this.updateDisplayData({buffsReceived:t,buffsGiven:e}),(t.length>0||e.length>0)&&this.updateState(T.BUFFED)}getCard(){return this.displayData.card}getElement(){return this.view.getElement()}getDisplayData(){return{...this.displayData}}updateCard(t){this.displayData.card=t,this.displayData.baseScore=t.baseScore,this.displayData.finalScore!==this.displayData.baseScore&&(this.displayData.scoreChange=this.displayData.finalScore-this.displayData.baseScore,this.displayData.hasScoreChange=this.displayData.scoreChange!==0);const e=this.view.getElement(),a=e.parentElement,s=new O(this.displayData);a&&a.replaceChild(s.getElement(),e),this.view=s,this.attachEventListeners()}}class Qe extends A{constructor(){super("div","play-area");l(this,"cardsContainer");l(this,"cardComponents",new Map);l(this,"onCardClick");l(this,"maxSlots",3);l(this,"playedCountElement");l(this,"maxCountElement");l(this,"previousSlotCount",3);this.initializeElements()}setOnCardClick(e){this.onCardClick=e}initializeElements(){this.element.innerHTML=`
      <div class="play-area-header">
        <h3 class="area-title">Presenting to Council</h3>
        <div class="scheme-counter">
          <span id="played-count">0</span>/<span id="max-count">3</span> Schemes Presented
        </div>
      </div>
      <div class="play-area-cards" id="play-cards">
        <!-- Card slots will be rendered here -->
      </div>
    `,this.cardsContainer=this.element.querySelector("#play-cards"),this.playedCountElement=this.element.querySelector("#played-count"),this.maxCountElement=this.element.querySelector("#max-count")}render(){}updatePlayedCards(e,a=[],s){this.cardsContainer.innerHTML="",this.cardComponents.clear();const i=s?s.filter(h=>h.state===k.AVAILABLE):[];this.maxSlots=i.length||3;const r=this.maxSlots>this.previousSlotCount,o=this.previousSlotCount,u=[];i.forEach((h,p)=>{const g=document.createElement("div");g.className="scheme-slot",g.dataset.slotPosition=h.position.toString(),r&&p>=o&&(g.classList.add("slot-unlock-animation"),setTimeout(()=>{g.classList.remove("slot-unlock-animation")},1e3));const E=document.createElement("div");E.className="slot-badge",E.textContent=h.label||`SCHEME #${p+1}`,g.appendChild(E);const S=document.createElement("div");S.className="slot-empty",S.textContent="AWAITING SCHEME",g.appendChild(S),u.push(g)}),e.forEach((h,p)=>{var g;if(p<u.length){const E=u[p].querySelector(".slot-empty");E&&E.remove(),u[p].classList.add("active");const S=a.filter(b=>b.targetCardId===h.card.id),I=a.filter(b=>b.sourceCardId===h.card.id),R=((g=h.scoring)==null?void 0:g.finalScore)??h.card.baseScore,_=H(h.card,{finalScore:R,buffsReceived:S,buffsGiven:I,onClick:this.onCardClick}),y=new L(_);y.setPlayable(!0),this.cardComponents.set(h.card.id,y),u[p].appendChild(y.getElement())}}),u.forEach(h=>this.cardsContainer.appendChild(h)),this.playedCountElement.textContent=e.length.toString(),this.maxCountElement.textContent=this.maxSlots.toString(),this.previousSlotCount=this.maxSlots}addCard(e){const a=L.fromCard(e);this.cardComponents.set(e.id,a),this.cardsContainer.appendChild(a.getElement()),this.updateCount()}removeCard(e){const a=this.cardComponents.get(e);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(e),this.updateCount())}clearCards(){this.cardsContainer.innerHTML="",this.cardComponents.clear(),this.updateCount()}updateCount(){const e=this.element.querySelector("#played-count");e.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}}class Je extends A{constructor(){super("div","hand-area");l(this,"cardsContainer");l(this,"cardComponents",new Map);l(this,"onCardClick");this.initializeElements()}initializeElements(){this.element.innerHTML=`
      <div class="hand-area-header">
        <h3 class="area-title">Your Scheme Portfolio</h3>
        <div class="card-counter">
          <span id="hand-count">0</span>/6 Schemes
        </div>
      </div>
      <div class="hand-cards" id="hand-cards"></div>
    `,this.cardsContainer=this.element.querySelector("#hand-cards")}render(){}setOnCardClick(e){this.onCardClick=e}updateHand(e){this.cardsContainer.innerHTML="",this.cardComponents.clear(),e.forEach((a,s)=>{const i=L.fromCard(a,this.onCardClick);i.setPlayable(!0);const r=i.getElement();r.style.zIndex=String(s),this.cardComponents.set(a.id,i),this.cardsContainer.appendChild(r)}),this.updateCount(),requestAnimationFrame(()=>this.adjustCardSpacing())}addCard(e){const a=L.fromCard(e,this.onCardClick);a.setPlayable(!0);const s=a.getElement();s.style.zIndex=String(this.cardComponents.size),this.cardComponents.set(e.id,a),this.cardsContainer.appendChild(s),this.updateCount(),requestAnimationFrame(()=>this.adjustCardSpacing())}removeCard(e){const a=this.cardComponents.get(e);a&&(this.cardsContainer.removeChild(a.getElement()),this.cardComponents.delete(e),this.updateCount(),requestAnimationFrame(()=>this.adjustCardSpacing()))}setCardPlayable(e,a){const s=this.cardComponents.get(e);s&&s.setPlayable(a)}setAllCardsPlayable(e){this.cardComponents.forEach(a=>{a.setPlayable(e)})}updateCount(){const e=this.element.querySelector("#hand-count");e.textContent=this.cardComponents.size.toString()}getCardCount(){return this.cardComponents.size}adjustCardSpacing(){const e=this.cardComponents.size;if(e===0)return;const a=this.cardsContainer.querySelector(".card");if(!a)return;const s=a.offsetWidth,i=getComputedStyle(this.cardsContainer),r=parseFloat(i.paddingLeft),o=parseFloat(i.paddingRight),u=this.cardsContainer.offsetWidth-r-o,h=12;console.log("[HandArea] adjustCardSpacing:",{cardCount:e,containerOffsetWidth:this.cardsContainer.offsetWidth,paddingLeft:r,paddingRight:o,contentWidth:u,cardWidth:s,normalGap:h});const p=e*s+(e-1)*h;let g;if(p<=u)g=h,console.log("[HandArea] Cards fit! Using normal gap:",h);else{const S=u-s,I=S/(e-1);g=I-s,console.log("[HandArea] Overlapping! Steps:",{contentWidth:u,cardWidth:s,spaceForRemainingCards:S,spacingPerCard:I,marginLeft:g,overlapAmount:s-I})}this.cardsContainer.querySelectorAll(".card").forEach((S,I)=>{I>0&&(S.style.marginLeft=`${g}px`)})}}class et extends A{constructor(){super("div","game-controls");l(this,"endTurnButton");l(this,"nextRoundButton");l(this,"messageElement");this.initializeElements(),this.setupEventListeners()}initializeElements(){this.element.innerHTML=`
      <div class="controls-left">
        <button id="end-turn-btn" class="btn btn-primary">PRESENT SCHEMES!</button>
        <button id="next-round-btn" class="btn btn-success" disabled>NEXT AUDIENCE</button>
      </div>
      <div class="controls-right">
        <div class="message-display" id="message-display"></div>
      </div>
    `,this.endTurnButton=this.element.querySelector("#end-turn-btn"),this.nextRoundButton=this.element.querySelector("#next-round-btn"),this.messageElement=this.element.querySelector("#message-display")}setupEventListeners(){}render(){}setOnEndTurn(e){this.endTurnButton.addEventListener("click",e)}setOnNextRound(e){this.nextRoundButton.addEventListener("click",e)}updateButtonStates(e,a,s){switch(this.endTurnButton.dataset.slotLimit=String(s),this.nextRoundButton.dataset.slotLimit=String(s),e){case"play":this.endTurnButton.disabled=a===0,this.nextRoundButton.disabled=!0;break;case"score":case"checkpoint":case"game_end":this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!1;break;default:this.endTurnButton.disabled=!0,this.nextRoundButton.disabled=!0}}showMessage(e,a="info"){this.messageElement.textContent=e,this.messageElement.className=`message-display show message-${a}`,setTimeout(()=>{this.messageElement.className="message-display"},3e3)}setEndTurnButtonEnabled(e){this.endTurnButton.disabled=!e}setNextRoundButtonEnabled(e){this.nextRoundButton.disabled=!e}}class tt extends A{constructor(){super("div","game-layout");l(this,"header");l(this,"playArea");l(this,"handArea");l(this,"controls");this.header=new Xe,this.playArea=new Qe,this.handArea=new Je,this.controls=new et,this.setupLayout()}setupLayout(){const e=document.createElement("div");e.className="layout-container",e.appendChild(this.header.getElement()),e.appendChild(this.playArea.getElement()),e.appendChild(this.handArea.getElement()),e.appendChild(this.controls.getElement()),this.element.appendChild(e)}render(){this.header.render(),this.playArea.render(),this.handArea.render(),this.controls.render()}getHeader(){return this.header}getPlayArea(){return this.playArea}getHandArea(){return this.handArea}getControls(){return this.controls}getGameArea(){return{getPlayArea:()=>this.playArea,getHandArea:()=>this.handArea}}getStats(){return this.controls}}class st extends A{constructor(){super("div","toast-container");l(this,"container");l(this,"activeToasts",new Set);this.setupContainer()}setupContainer(){this.element.style.cssText=`
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      z-index: 9000;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      pointer-events: none;
    `,this.container=this.element}show(e){const{message:a,type:s,duration:i=3e3}=e,r=document.createElement("div");r.className=`toast toast-${s}`,r.style.cssText=`
      pointer-events: auto;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    `,r.innerHTML=`
      <div class="toast-content">
        <div class="toast-icon">${this.getIcon(s)}</div>
        <div class="toast-message">${a}</div>
        <button class="toast-close">×</button>
      </div>
    `,this.container.appendChild(r),this.activeToasts.add(r);const o=r.querySelector(".toast-close");o&&o.addEventListener("click",()=>this.dismiss(r)),setTimeout(()=>{r.style.opacity="1",r.style.transform="translateX(0)"},50),i>0&&setTimeout(()=>{this.dismiss(r)},i)}getIcon(e){switch(e){case"success":return"✓";case"error":return"✗";case"info":return"ⓘ"}}dismiss(e){e.style.opacity="0",e.style.transform="translateX(100%)",setTimeout(()=>{e.parentElement&&e.remove(),this.activeToasts.delete(e)},300)}render(){}}class q extends A{constructor(e){super("div","card-selection-overlay");l(this,"config");l(this,"selectedIndex",null);this.config=e,this.setupOverlay()}setupOverlay(){this.element.style.cssText=`
      position: fixed;
      inset: 0;
      z-index: 5000;
      background: rgba(0, 0, 0, 0.9);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 2rem;
    `;const e=this.createTitle();this.element.appendChild(e);const a=this.createCardsContainer();this.element.appendChild(a);const s=this.createInstructions();this.element.appendChild(s)}createTitle(){const e=document.createElement("h2");return e.textContent=this.config.title,e.style.cssText=`
      color: var(--comic-yellow);
      font-family: var(--font-title);
      font-size: 3rem;
      text-shadow: 3px 3px 0 var(--comic-red);
    `,e}createCardsContainer(){const e=document.createElement("div");return e.style.cssText=`
      display: flex;
      gap: 2rem;
      justify-content: center;
      align-items: center;
    `,this.config.cards.forEach((a,s)=>{const i=this.createCardSlot(a,s);e.appendChild(i)}),e}createCardSlot(e,a){const s=document.createElement("div");s.className="card-selection-slot",s.setAttribute("data-index",a.toString()),s.setAttribute("data-rarity",e.rarity),s.style.cssText=`
      animation: cardFloatIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
      animation-delay: ${a*.15}s;
      opacity: 0;
      cursor: pointer;
      transition: transform 0.3s ease, filter 0.3s ease;
    `;const i=new O(H(e));return s.appendChild(i.getElement()),s.addEventListener("mouseenter",()=>{this.selectedIndex===null&&(s.style.transform="translateY(-8px) scale(1.05)",s.style.filter="brightness(1.15) drop-shadow(0 8px 20px rgba(255,235,59,0.4))")}),s.addEventListener("mouseleave",()=>{this.selectedIndex===null&&(s.style.transform="",s.style.filter="")}),s.addEventListener("click",()=>this.handleCardClick(s,e,a)),s}handleCardClick(e,a,s){if(this.selectedIndex!==null)return;this.selectedIndex=s;const i=this.config.mode==="burn";i?this.createBurnEffect(a):this.createRaritySelectionEffect(a),this.config.onSelect(a)?(i?(e.style.animation="cardBurnDisintegrate 0.8s ease-out forwards",e.style.zIndex="100"):(e.style.transform="scale(1.3) translateY(-30px) rotate(0deg)",e.style.filter="brightness(1.5) drop-shadow(0 0 40px rgba(255,235,59,1))",e.style.zIndex="100"),this.element.querySelectorAll(".card-selection-slot").forEach((u,h)=>{h!==s&&(u.style.opacity="0.3",u.style.transform="scale(0.8) translateY(20px)")}),setTimeout(()=>{this.close()},1e3)):this.close()}createBurnEffect(e){const a=["BURN!","DESTROYED!","INCINERATED!","ASHES!"],s=a[Math.floor(Math.random()*a.length)];this.createTextEffect(s,"var(--comic-red)",6);const i=document.createElement("div");i.style.cssText=`
      position: fixed;
      inset: 0;
      background: radial-gradient(circle, rgba(255, 0, 0, 0.5), rgba(139, 0, 0, 0.3));
      pointer-events: none;
      z-index: 9997;
      animation: burnFlash 0.6s ease-out;
    `,document.body.appendChild(i),setTimeout(()=>i.remove(),600)}createRaritySelectionEffect(e){switch(e.rarity){case"common":this.createCommonEffect();break;case"uncommon":this.createUncommonEffect();break;case"rare":this.createRareEffect();break;case"legendary":this.createLegendaryEffect();break}}createCommonEffect(){this.createTextEffect("NICE!","var(--comic-yellow)")}createUncommonEffect(){this.createTextEffect("SWEET!","var(--comic-cyan)"),this.createScreenFlash(.2,300)}createRareEffect(){this.createTextEffect("RARE!","var(--comic-yellow)",5.5),this.createScreenFlash(.35,400)}createLegendaryEffect(){this.createTextEffect("LEGENDARY!","var(--comic-yellow)",6),this.createScreenFlash(.4,200),setTimeout(()=>this.createScreenFlash(.4,200),200),setTimeout(()=>this.createScreenFlash(.5,300),400)}createTextEffect(e,a,s=5){const i=document.createElement("div");i.textContent=e,i.style.cssText=`
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%) scale(0) rotate(-15deg);
      font-family: var(--font-title);
      font-size: ${s}rem;
      font-weight: bold;
      color: ${a};
      text-shadow:
        5px 5px 0px var(--comic-black);
      -webkit-text-stroke: 4px var(--comic-black);
      paint-order: stroke fill;
      letter-spacing: 0.1em;
      opacity: 0;
      pointer-events: none;
      z-index: 9999;
      animation: selectionTextPop 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
    `,document.body.appendChild(i),setTimeout(()=>i.remove(),1e3)}createScreenFlash(e=.3,a=400){const s=document.createElement("div");s.style.cssText=`
      position: fixed;
      inset: 0;
      background: rgba(255, 235, 59, ${e});
      pointer-events: none;
      z-index: 9997;
      animation: screenFlash ${a}ms ease-out;
    `,document.body.appendChild(s),setTimeout(()=>s.remove(),a)}createInstructions(){const e=document.createElement("p");return e.textContent=this.config.instruction,e.style.cssText=`
      color: white;
      font-family: var(--font-body);
      font-size: 1.2rem;
      text-align: center;
    `,e}render(){}show(){document.body.appendChild(this.element)}close(){this.element.remove()}}class F extends A{constructor(e){super("div","pack-card");l(this,"config");this.config=e,this.render()}render(){const{pack:e,currency:a,freePacks:s}=this.config,i=s>0,r=i||a>=e.cost;if(r||this.element.classList.add("disabled"),i&&this.element.classList.add("free-pack"),i){const E=document.createElement("div");E.className="free-pack-sticker",E.textContent="FIRST HIT IS FREE!",this.element.appendChild(E)}const o=document.createElement("div");o.className="pack-header";const u=document.createElement("h3");u.className="pack-name",u.textContent=e.name,o.appendChild(u);const h=document.createElement("div");h.className="pack-cost",h.textContent=i?"FREE!":`${e.cost} BUCKS`,o.appendChild(h),this.element.appendChild(o);const p=document.createElement("div");p.className="pack-description",p.textContent=e.description||"",this.element.appendChild(p);const g=document.createElement("button");g.className="pack-buy-btn",g.textContent=r?i?"TAKE IT!":"BUY NOW!":"TOO POOR!",g.disabled=!r,g.addEventListener("click",()=>{r&&this.config.onPurchase(e.id)}),this.element.appendChild(g)}update(e){this.config=e,this.element.innerHTML="",this.element.className="pack-card",this.render()}}class at extends A{constructor(e){super("div","shop-layout");l(this,"gameEngine");l(this,"activeTab","deck");l(this,"onExitCallback");l(this,"toast");this.gameEngine=e,this.toast=new st,this.setupLayout(),this.element.appendChild(this.toast.getElement())}setupLayout(){this.element.innerHTML=`
      <!-- Merchant Header -->
      <div class="shop-header">
        <div class="merchant-banner">
          <div class="merchant-title">
            <h1 class="shop-title">BACK-ALLEY DEALS</h1>
            <div class="merchant-subtitle">Proprietor: Cut-Throat Iblis</div>
          </div>
          <div class="shop-currency">
            <span class="currency-label">ILL-GOTTEN GAINS</span>
            <span class="currency-value" id="shop-currency">0</span>
          </div>
        </div>

        <!-- Tab Navigation -->
        <div class="shop-tabs">
          <button class="shop-tab active" data-tab="deck">
            <span class="tab-label">YOUR STASH</span>
          </button>
          <button class="shop-tab" data-tab="packs">
            <span class="tab-label">THE GOODS</span>
          </button>
        </div>
      </div>

      <!-- Tab Content -->
      <div class="shop-content">
        <!-- Deck Tab -->
        <div class="shop-tab-panel active" data-panel="deck">
          <div class="deck-viewer">
            <div class="deck-header">
              <h2>Your Scheme Collection</h2>
              <div class="deck-stats" id="deck-stats"></div>
            </div>
            <div class="deck-cards" id="deck-cards">
              <!-- Cards will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Packs Tab -->
        <div class="shop-tab-panel" data-panel="packs">
          <div class="pack-shop">
            <div class="pack-list" id="pack-list">
              <!-- Pack options will be rendered here -->
            </div>
          </div>
        </div>
      </div>

      <!-- Footer Controls -->
      <div class="shop-footer">
        <button class="shop-exit-btn" id="shop-exit">
          RETURN TO COUNCIL CHAMBER
        </button>
      </div>
    `,this.attachEventListeners()}attachEventListeners(){this.element.querySelectorAll(".shop-tab").forEach(s=>{s.addEventListener("click",()=>{const i=s.getAttribute("data-tab");this.switchTab(i)})});const a=this.element.querySelector("#shop-exit");a&&a.addEventListener("click",()=>{var s;(s=this.onExitCallback)==null||s.call(this)})}switchTab(e){this.activeTab=e,this.element.querySelectorAll(".shop-tab").forEach(i=>{i.getAttribute("data-tab")===e?i.classList.add("active"):i.classList.remove("active")}),this.element.querySelectorAll(".shop-tab-panel").forEach(i=>{i.getAttribute("data-panel")===e?i.classList.add("active"):i.classList.remove("active")}),this.renderActiveTab()}render(){this.updateCurrency(),this.renderActiveTab()}renderActiveTab(){this.activeTab==="deck"?this.renderDeck():this.renderPackShop()}updateCurrency(){const e=this.element.querySelector("#shop-currency");if(e){const a=this.gameEngine.getState();e.textContent=a.currency.toString()}}renderDeck(){const e=this.element.querySelector("#deck-cards");if(!e)return;const a=this.gameEngine.getDeckDuplicates();if(a.length===0){e.innerHTML='<div class="empty-deck">No schemes in your stash yet!<br>Buy some packs to get started.</div>';return}e.innerHTML="",a.forEach(s=>{const i=s.cards[0],r=document.createElement("div");r.className="deck-card-group";const o=document.createElement("div");o.className="stash-card-wrapper";const u=new O(H(i));o.appendChild(u.getElement());const h=document.createElement("div");h.className="card-overlay",h.innerHTML=`<div class="card-count-badge">×${s.count}</div>`,o.appendChild(h),r.appendChild(o),e.appendChild(r)}),this.updateDeckStats()}updateDeckStats(){const e=this.element.querySelector("#deck-stats");if(!e)return;const a=this.gameEngine.getState(),s=this.gameEngine.getDeckRarityDistribution();e.innerHTML=`
      <span>Total: ${a.playerDeck.length}</span>
      <span>Common: ${s.common}</span>
      <span>Uncommon: ${s.uncommon}</span>
      <span>Rare: ${s.rare}</span>
      <span>Legendary: ${s.legendary}</span>
    `}renderPackShop(){const e=this.element.querySelector("#pack-list");if(!e)return;const a=this.gameEngine.getAvailablePackTypes(),s=this.gameEngine.getState();e.innerHTML="";const i=a.filter(y=>y.id==="base"||y.id==="deluxe"),r=a.filter(y=>y.id.includes("city")||y.id.includes("science")||y.id.includes("nature")||y.id.includes("occult")||y.id.includes("chaos")),o=a.filter(y=>y.id.includes("henchman")||y.id.includes("location")||y.id.includes("crime")||y.id.includes("gear"));if(i.length>0){const y=document.createElement("div");y.className="pack-section",y.innerHTML='<h3 class="pack-section-title">STARTER PACKS</h3>';const b=document.createElement("div");b.className="pack-grid pack-grid-starter",i.forEach(N=>{const P=s.freePacks.get(N.id)||0,M=new F({pack:N,currency:s.currency,freePacks:P,onPurchase:D=>this.buyPack(D)});b.appendChild(M.getElement())}),y.appendChild(b),e.appendChild(y)}if(r.length>0||o.length>0){const y=document.createElement("div");if(y.className="pack-section",y.innerHTML='<h3 class="pack-section-title">THEMED PACKS</h3>',r.length>0){const b=document.createElement("div");b.className="pack-subsection",b.innerHTML='<h4 class="pack-subsection-title">Color Packs</h4>';const N=document.createElement("div");N.className="pack-grid pack-grid-color",r.forEach(P=>{const M=s.freePacks.get(P.id)||0,D=new F({pack:P,currency:s.currency,freePacks:M,onPurchase:G=>this.buyPack(G)});N.appendChild(D.getElement())}),b.appendChild(N),y.appendChild(b)}if(o.length>0){const b=document.createElement("div");b.className="pack-subsection",b.innerHTML='<h4 class="pack-subsection-title">Type Packs</h4>';const N=document.createElement("div");N.className="pack-grid pack-grid-type",o.forEach(P=>{const M=s.freePacks.get(P.id)||0,D=new F({pack:P,currency:s.currency,freePacks:M,onPurchase:G=>this.buyPack(G)});N.appendChild(D.getElement())}),b.appendChild(N),y.appendChild(b)}e.appendChild(y)}const u=document.createElement("div");u.className="pack-section",u.innerHTML='<h3 class="pack-section-title">DECK MANAGEMENT</h3>';const h=document.createElement("div");h.className="pack-grid pack-grid-management";const p=10,g=this.gameEngine.getState().playerDeck.length>=3,E=s.currency>=p,S=g&&E;let I="BUY NOW!";g?E||(I="TOO POOR!"):I="NEED 3+ CARDS!";const R=document.createElement("div");R.className=`pack-card ${S?"":"disabled"}`,R.innerHTML=`
      <div class="pack-header">
        <h3 class="pack-name">BURN CARD</h3>
        <div class="pack-cost">${p} BUCKS</div>
      </div>
      <div class="pack-description">Remove a card permanently from your deck</div>
      <button
        class="pack-buy-btn"
        ${S?"":"disabled"}
      >
        ${I}
      </button>
    `;const _=R.querySelector(".pack-buy-btn");_&&_.addEventListener("click",()=>{S&&this.startBurnCard()}),h.appendChild(R),u.appendChild(h),e.appendChild(u)}buyPack(e){const a=this.gameEngine.generatePackForSelection(e);if(a)this.startPackSelectionCutscene(a);else{const s=this.gameEngine.getAvailablePackTypes().find(r=>r.id===e),i=(s==null?void 0:s.cost)||0;this.toast.show({message:`Not enough Villain Bucks! Need ${i}, have ${this.gameEngine.getCurrency()}`,type:"error",duration:3e3})}}startPackSelectionCutscene(e){new q({cards:e.cards,title:e.isFree?"Pick your FREE scheme!":"Pick your scheme!",instruction:"Click a card to add it to your deck",onSelect:s=>{if(this.gameEngine.selectCardFromPack(e.packType,s.id,e.cost,e.cards,e.isFree)){const r=e.isFree?`Snagged ${s.name} for FREE!`:`Added ${s.name} to your deck!`;return this.toast.show({message:r,type:"success",duration:3e3}),this.render(),!0}return!1}}).show()}startBurnCard(){const e=this.gameEngine.getBurnCandidates();if(!e){this.toast.show({message:"Need at least 3 cards in your deck to burn!",type:"error",duration:3e3});return}new q({cards:e,title:"BURN A CARD",instruction:"Click a card to INCINERATE it permanently - this cannot be undone!",mode:"burn",onSelect:s=>this.gameEngine.burnCard(s.id)?(this.toast.show({message:`${s.name} reduced to ashes!`,type:"success",duration:3e3}),this.render(),!0):(this.toast.show({message:"Not enough currency! Need 10 bucks to burn.",type:"error",duration:3e3}),!1)}).show()}onExit(e){this.onExitCallback=e}}class it extends A{constructor(e){super("div","devtools-panel");l(this,"gameEngine");l(this,"isOpen",!1);l(this,"onStateChangeCallback");this.gameEngine=e,this.setupLayout(),this.attachEventListeners(),this.hide()}setupLayout(){this.element.innerHTML=`
      <div class="devtools-header">
        <div class="devtools-title">
          <span class="debug-badge">DEBUG</span>
          <span>Developer Tools</span>
        </div>
        <button class="devtools-close" id="devtools-close">×</button>
      </div>

      <div class="devtools-tabs">
        <button class="devtools-tab active" data-tab="currency">Currency</button>
        <button class="devtools-tab" data-tab="deck">Deck</button>
        <button class="devtools-tab" data-tab="game">Game State</button>
        <button class="devtools-tab" data-tab="info">Info</button>
      </div>

      <div class="devtools-content">
        <!-- Currency Tab -->
        <div class="devtools-tab-panel active" data-panel="currency">
          <h3>Currency Manipulation</h3>
          <div class="devtools-section">
            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="add-currency" data-amount="50">+50</button>
              <button class="devtools-btn" data-action="add-currency" data-amount="100">+100</button>
              <button class="devtools-btn" data-action="add-currency" data-amount="500">+500</button>
              <button class="devtools-btn" data-action="set-currency" data-amount="0">Reset to 0</button>
            </div>
            <div class="devtools-input-group">
              <input type="number" id="currency-input" placeholder="Exact amount" value="100" />
              <button class="devtools-btn" data-action="set-currency-input">Set</button>
            </div>
            <div class="devtools-info" id="current-currency">Current: 0</div>
          </div>
        </div>

        <!-- Deck Tab -->
        <div class="devtools-tab-panel" data-panel="deck">
          <h3>Deck &amp; Hand Management</h3>
          <div class="devtools-section">
            <div class="devtools-input-group">
              <select id="card-select" style="flex: 1;">
                <option value="">Select a card...</option>
              </select>
            </div>
            <div class="devtools-input-group">
              <select id="card-destination" style="flex: 1;">
                <option value="hand">Add to Hand</option>
                <option value="deck-top">Add to Top of Deck</option>
                <option value="deck-bottom">Add to Bottom of Deck</option>
                <option value="deck-shuffle">Add to Deck (Shuffle In)</option>
                <option value="discard">Add to Discard</option>
              </select>
              <button class="devtools-btn" data-action="add-selected-card">Add</button>
            </div>

            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="add-random-cards" data-count="3">+3 Random (Deck)</button>
              <button class="devtools-btn" data-action="reshuffle-deck">Reshuffle Draw Pile</button>
              <button class="devtools-btn" data-action="clear-deck">Clear Player Deck</button>
            </div>

            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="refill-hand">Refill Hand to 6</button>
              <button class="devtools-btn" data-action="draw-one">Draw 1 Card</button>
              <button class="devtools-btn" data-action="clear-hand">Clear Hand</button>
            </div>

            <div class="devtools-info" id="deck-info">Player deck: 0 cards</div>
            <div class="devtools-info" id="hand-info">Hand: 0 cards</div>
            <div class="devtools-info" id="discard-info">Discard: 0 cards</div>
          </div>
        </div>

        <!-- Game State Tab -->
        <div class="devtools-tab-panel" data-panel="game">
          <h3>Game State Control</h3>
          <div class="devtools-section">
            <div class="devtools-buttons">
              <button class="devtools-btn" data-action="jump-checkpoint">Jump to Checkpoint (Round 5)</button>
              <button class="devtools-btn" data-action="force-shop">Force Shop Phase</button>
            </div>
            <div class="devtools-input-group">
              <label>Round:</label>
              <input type="number" id="round-input" min="1" value="1" />
              <button class="devtools-btn" data-action="set-round">Set</button>
            </div>
            <div class="devtools-input-group">
              <label>Target Score:</label>
              <input type="number" id="target-input" min="1" value="75" />
              <button class="devtools-btn" data-action="set-target">Set</button>
            </div>
            <div class="devtools-info" id="game-info">
              Round: 1 | Phase: play | Target: 75
            </div>
          </div>
        </div>

        <!-- Info Tab -->
        <div class="devtools-tab-panel" data-panel="info">
          <h3>Keyboard Shortcuts</h3>
          <div class="devtools-section">
            <div class="shortcut-list">
              <div class="shortcut-item">
                <kbd>\`</kbd>
                <span>Toggle DevTools</span>
              </div>
              <div class="shortcut-item">
                <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>
                <span>Toggle DevTools (alternative)</span>
              </div>
            </div>
            <div class="devtools-warning">
              ⚠️ DevTools are only available in development mode
            </div>
          </div>
        </div>
      </div>
    `,this.populateCardSelect()}populateCardSelect(){const e=this.element.querySelector("#card-select");e&&C.forEach(a=>{const s=document.createElement("option");s.value=a.id,s.textContent=`${a.name} (${a.type}, ${a.rarity})`,e.appendChild(s)})}attachEventListeners(){const e=this.element.querySelector("#devtools-close");e==null||e.addEventListener("click",()=>this.hide()),this.element.querySelectorAll(".devtools-tab").forEach(s=>{s.addEventListener("click",()=>{const i=s.getAttribute("data-tab");this.switchTab(i)})}),this.element.addEventListener("click",s=>{const i=s.target,r=i.getAttribute("data-action");r&&this.handleAction(r,i)}),document.addEventListener("keydown",s=>{s.key==="`"&&(s.preventDefault(),this.toggle()),s.ctrlKey&&s.shiftKey&&s.key==="D"&&(s.preventDefault(),this.toggle())})}switchTab(e){this.element.querySelectorAll(".devtools-tab").forEach(i=>{i.getAttribute("data-tab")===e?i.classList.add("active"):i.classList.remove("active")}),this.element.querySelectorAll(".devtools-tab-panel").forEach(i=>{i.getAttribute("data-panel")===e?i.classList.add("active"):i.classList.remove("active")}),this.updateInfo()}handleAction(e,a){var s,i;switch(e){case"add-currency":{const r=parseInt(a.getAttribute("data-amount")||"0");this.gameEngine.state.currency+=r;break}case"set-currency":{const r=parseInt(a.getAttribute("data-amount")||"0");this.gameEngine.state.currency=r;break}case"set-currency-input":{const r=this.element.querySelector("#currency-input"),o=parseInt(r.value||"0");this.gameEngine.state.currency=o;break}case"add-random-cards":{const r=parseInt(a.getAttribute("data-count")||"3"),o=a.getAttribute("data-destination");this.gameEngine.debugAddRandomCards(r,{destination:o??"deck-shuffle"});break}case"add-selected-card":{const o=this.element.querySelector("#card-select").value,u=((s=this.element.querySelector("#card-destination"))==null?void 0:s.value)||"hand";if(o)switch(u){case"deck-top":this.gameEngine.debugAddCardToDeck(o,{position:"top"});break;case"deck-bottom":this.gameEngine.debugAddCardToDeck(o,{position:"bottom"});break;case"deck-shuffle":this.gameEngine.debugAddCardToDeck(o,{position:"shuffle"});break;case"discard":this.gameEngine.debugAddCardToDiscard(o);break;case"hand":default:this.gameEngine.debugAddCardToHand(o);break}break}case"clear-deck":{this.gameEngine.state.playerDeck=[],this.gameEngine.state.deck=[],this.gameEngine.state.discardPile=[];break}case"refill-hand":{this.gameEngine.debugRefillHand();break}case"clear-hand":{this.gameEngine.debugClearHand();break}case"draw-one":{this.gameEngine.debugDrawCards(1);break}case"reshuffle-deck":{this.gameEngine.debugReshuffleDeck();break}case"jump-checkpoint":{this.gameEngine.state.round=5,this.gameEngine.state.cumulativeScore=this.gameEngine.state.targetScore;break}case"force-shop":{this.gameEngine.state.gamePhase="shop";break}case"set-round":{const r=this.element.querySelector("#round-input");this.gameEngine.state.round=parseInt(r.value||"1");break}case"set-target":{const r=this.element.querySelector("#target-input");this.gameEngine.state.targetScore=parseInt(r.value||"75");break}}this.updateInfo(),(i=this.onStateChangeCallback)==null||i.call(this)}updateInfo(){const e=this.gameEngine.getState(),a=this.element.querySelector("#current-currency");a&&(a.textContent=`Current: ${e.currency}`);const s=this.element.querySelector("#deck-info");s&&(s.textContent=`Player deck: ${e.playerDeck.length} cards | Draw pile: ${e.deck.length} cards`);const i=this.element.querySelector("#hand-info");if(i){const p=e.hand.length===1?"card":"cards";i.textContent=`Hand: ${e.hand.length} ${p}`}const r=this.element.querySelector("#discard-info");if(r){const p=e.discardPile.length===1?"card":"cards";r.textContent=`Discard: ${e.discardPile.length} ${p}`}const o=this.element.querySelector("#game-info");o&&(o.textContent=`Round: ${e.round} | Phase: ${e.gamePhase} | Target: ${e.targetScore}`);const u=this.element.querySelector("#round-input");u&&(u.value=e.round.toString());const h=this.element.querySelector("#target-input");h&&(h.value=e.targetScore.toString())}toggle(){this.isOpen?this.hide():this.show()}show(){this.isOpen=!0,this.element.classList.add("open"),this.updateInfo()}hide(){this.isOpen=!1,this.element.classList.remove("open")}onStateChange(e){this.onStateChangeCallback=e}render(){}}class rt{constructor(){l(this,"container");this.container=document.createElement("div"),this.container.className="comic-effects-container",document.body.appendChild(this.container)}show(t,e,a){const s=document.createElement("div");s.className="comic-effect",s.textContent=t,s.style.left=`${e}px`,s.style.top=`${a}px`,this.container.appendChild(s),setTimeout(()=>{s.classList.add("active")},10),setTimeout(()=>{s.remove()},1e3)}showRandom(t,e){const a=["POW!","BAM!","WHAM!","ZAP!","BOOM!","KAPOW!","SMASH!"],s=a[Math.floor(Math.random()*a.length)];this.show(s,t,e)}showForCardType(t,e,a){const i={crime:["SCHEME!","PLOT!","HEIST!"],henchman:["HIRED!","RECRUITED!","GOON!"],location:["LAIR!","HIDEOUT!","BASE!"],gear:["GADGET!","WEAPON!","TECH!"]}[t.toLowerCase()]||["POW!"],r=i[Math.floor(Math.random()*i.length)];this.show(r,e,a)}}class nt{constructor(){l(this,"container");l(this,"isPlaying",!1);this.container=document.createElement("div"),this.container.className="score-cutscene-container",this.container.style.display="none"}async play(t,e,a){if(this.isPlaying)return;this.isPlaying=!0;let s=!1;const i=()=>{s=!0,this.skip()},r=document.querySelector(".game-layout");if(!r){a();return}if(r.classList.add("cutscene-mode"),this.buildCutsceneOverlay(t,e),r.appendChild(this.container),this.container.style.display="flex",setTimeout(()=>{s||(document.addEventListener("click",i,{once:!0}),document.addEventListener("keydown",o=>{(o.key===" "||o.key==="Escape")&&i()},{once:!0}))},300),await this.wait(100),this.container.classList.add("active"),!s){for(let o=0;o<t.length&&!s;o++)await this.animateCard(o),await this.wait(600);s||(await this.animateTotal(),await this.wait(1200))}await this.cleanup(r),this.isPlaying=!1,a()}buildCutsceneOverlay(t,e){this.container.innerHTML=`
      <div class="cutscene-letterbox cutscene-letterbox-top"></div>

      <div class="cutscene-content">
        <div class="cutscene-cards">
          ${t.map((a,s)=>`
            <div class="cutscene-card" data-index="${s}">
              <div class="cutscene-card-name">${a.card.name}</div>
              <div class="cutscene-card-type">${a.card.type}</div>

              <div class="cutscene-scoring-area">
                <div class="base-score-display">
                  <div class="score-label-small">BASE</div>
                  <div class="score-base" data-base="${a.baseScore}">${a.baseScore}</div>
                </div>

                ${a.bonusScore>0||a.synergies.length>0?`
                  <div class="synergy-effects">
                    ${a.synergies.map(i=>`
                      <div class="synergy-shout">${this.getSynergyShout(i)}</div>
                    `).join("")}
                    ${a.bonusScore>0?`
                      <div class="bonus-score-anim">+${a.bonusScore}</div>
                    `:""}
                  </div>
                `:""}

                <div class="final-score-burst">
                  <div class="burst-inner">
                    <div class="score-final" data-final="${a.totalScore}">${a.totalScore}</div>
                    <div class="score-suffix">PTS!</div>
                  </div>
                </div>
              </div>
            </div>
          `).join("")}
        </div>

        <div class="cutscene-total">
          <div class="total-label">TOTAL SCORE</div>
          <div class="total-value">${e}</div>
          <div class="total-suffix">POINTS!</div>
        </div>
      </div>

      <div class="cutscene-letterbox cutscene-letterbox-bottom">
        <div class="skip-hint">Click or press SPACE to skip</div>
      </div>
    `}getSynergyShout(t){const e=["COMBO!","SYNERGY!","BOOM!","POW!","WHAM!","KAPOW!","NICE!","SWEET!"],a=t.length%e.length;return e[a]}async animateCard(t){const e=this.container.querySelector(`.cutscene-card[data-index="${t}"]`);if(!e)return;e.classList.add("active"),await this.wait(400);const a=e.querySelector(".base-score-display");a&&(a.classList.add("show"),await this.wait(300));const s=e.querySelectorAll(".synergy-shout");for(const o of Array.from(s))o.classList.add("show"),await this.wait(200);const i=e.querySelector(".bonus-score-anim");i&&(i.classList.add("show"),await this.wait(300));const r=e.querySelector(".final-score-burst");return r&&(r.classList.add("show"),await this.wait(400)),this.wait(100)}async animateTotal(){const t=this.container.querySelector(".cutscene-total");if(t)return t.classList.add("active"),this.wait(400)}skip(){this.container.querySelectorAll(".cutscene-card").forEach(a=>{a.classList.add("active"),a.querySelectorAll(".base-score-display, .synergy-shout, .bonus-score-anim, .final-score-burst").forEach(s=>s.classList.add("show"))});const e=this.container.querySelector(".cutscene-total");e&&e.classList.add("active")}async cleanup(t){this.container.classList.remove("active"),await this.wait(300),t.classList.remove("cutscene-mode"),this.container.style.display="none",this.container.remove()}wait(t){return new Promise(e=>setTimeout(e,t))}isActive(){return this.isPlaying}}class ot extends A{constructor(t){super("div","error-container"),this.buildErrorUI(t)}buildErrorUI(t){const e=document.createElement("div");e.className="error-content";const a=document.createElement("h2");a.textContent=t.title,e.appendChild(a);const s=document.createElement("p");if(s.textContent=t.message,e.appendChild(s),t.showReloadButton!==!1){const i=document.createElement("button");i.className="btn btn-primary",i.textContent="Reload Page",i.addEventListener("click",()=>location.reload()),e.appendChild(i)}this.element.appendChild(e)}render(){}show(){document.body.appendChild(this.element)}close(){this.element.remove()}}class ct extends A{constructor(e){super("div","title-screen-overlay");l(this,"onDismiss");l(this,"keyHandler");l(this,"handleKeyPress",e=>{this.dismiss()});this.onDismiss=e,this.keyHandler=this.handleKeyPress.bind(this),this.setupEventListeners(),this.render()}setupEventListeners(){this.element.addEventListener("click",()=>this.dismiss()),document.addEventListener("keydown",this.keyHandler)}dismiss(){document.removeEventListener("keydown",this.keyHandler),this.element.classList.add("fade-out"),setTimeout(()=>{this.element.remove(),this.onDismiss()},300)}render(){this.element.innerHTML=`
      <div class="comic-cover">
        <!-- Masthead -->
        <div class="comic-masthead">
          <div class="comic-decoration">◆</div>
          <div class="comic-title-text">THE COUNCIL DECIDES</div>
          <div class="comic-decoration">◆</div>
          <div class="comic-issue">ISSUE #1</div>
        </div>

        <!-- Tagline -->
        <div class="comic-tagline">
          Play villain schemes to score points and impress the League of Ultimate Evil!
        </div>

        <!-- Main cover area -->
        <div class="comic-cover-content">
          <!-- Shadowy council table silhouette -->
          <div class="council-shadows">
            <div class="council-table-shadow"></div>
            <div class="council-member"></div>
            <div class="council-member"></div>
            <div class="council-member"></div>
          </div>

          <!-- Card display area -->
          <div class="card-fan-container">
            <div class="card-fan" id="title-card-fan"></div>
          </div>

          <!-- Speech bubble from council -->
          <div class="speech-bubble">
            <div class="bubble-text">IMPRESS US... OR PERISH!</div>
          </div>

          <!-- Atmospheric sound effects -->
          <div class="sound-effect effect-1">WHOOSH</div>
          <div class="sound-effect effect-2">THOOM</div>
        </div>

        <!-- Bottom instruction -->
        <div class="comic-footer">
          <div class="click-instruction">CLICK ANYWHERE TO BEGIN</div>
          <div class="comic-price">COUNCIL CHAMBER COMICS<span class="price-tag">10¢</span></div>
        </div>
      </div>
    `,this.renderCardFan()}renderCardFan(){const e=this.element.querySelector("#title-card-fan");if(!e)return;[{id:"showcase_1",name:"DOOMSDAY DEVICE",type:"gear",color:"science",tags:[],baseScore:25,description:"The ultimate weapon",rules:[],rarity:"legendary",cost:20},{id:"showcase_2",name:"ANCIENT DEMON",type:"henchman",color:"occult",tags:[],baseScore:20,description:"Summoned from the void",rules:[],rarity:"legendary",cost:15},{id:"showcase_3",name:"MEGA HEIST",type:"crime",color:"city",tags:[],baseScore:30,description:"The score of a lifetime",rules:[],rarity:"legendary",cost:25}].forEach((s,i)=>{const r=H(s,{uiState:T.DEFAULT,isPlayable:!1,isSelected:!1}),u=new O(r).getElement();u.classList.add(`fan-card-${i}`),e.appendChild(u)})}}var m=(n=>(n.POSITIVE="positive",n.NEUTRAL="neutral",n.NEGATIVE="negative",n))(m||{});c.HENCHMAN,m.POSITIVE,m.NEUTRAL,m.POSITIVE,m.NEUTRAL,m.POSITIVE,c.CRIME,m.POSITIVE,m.POSITIVE,m.NEUTRAL,m.POSITIVE,m.NEGATIVE,c.LOCATION,m.POSITIVE,m.POSITIVE,m.NEUTRAL,m.POSITIVE,m.NEUTRAL,c.GEAR,m.POSITIVE,m.POSITIVE,m.NEUTRAL,m.POSITIVE,m.NEUTRAL,m.POSITIVE,m.POSITIVE,m.POSITIVE,m.POSITIVE,m.POSITIVE,m.NEUTRAL,m.NEUTRAL,m.NEUTRAL,m.NEUTRAL,m.NEUTRAL,m.NEGATIVE,m.NEGATIVE,m.NEGATIVE,m.NEGATIVE,m.NEGATIVE;const dt={0:{henchman_positive:["WORKFORCE!","URBAN OPERATIVES!","CITY MINIONS!"],henchman_neutral:["MUNICIPAL PAWNS!","STREET LEVEL!"],crime_positive:["URBAN CHAOS!","METROPOLITAN CRIME!","CITY SCHEME!"],crime_neutral:["STREET CRIME!","ACCEPTABLE VANDALISM!"],gear_neutral:["CITY TOOLS!","URBAN EQUIPMENT!"],location_positive:["EXCELLENT PROPERTY!","PRIME REAL ESTATE!","URBAN PLANNING!"],high_score:["IMPRESSIVE DEVELOPMENT!","CITY DOMINATION!","EXCELLENT!"],medium_score:["ACCEPTABLE PLANNING!","DECENT SCHEME!"],low_score:["POOR INFRASTRUCTURE!","WEAK!","ZONING VIOLATION!"]},1:{henchman_neutral:["TEST SUBJECTS!","ADEQUATE SPECIMENS!"],crime_neutral:["INTERESTING HYPOTHESIS!","VIABLE APPROACH!"],gear_positive:["STOLEN TECH!","BORROWED DESIGN!","INGENIOUS COPY!","INSPIRED DEVICE!"],location_positive:["EXCELLENT LAB!","PROPER FACILITIES!","RESEARCH SPACE!"],high_score:["SCIENTIFICALLY SOUND!","PLAGIARIZED PERFECTLY!","OPTIMAL RESULTS!"],medium_score:["ADEQUATE METHODOLOGY!","DERIVATIVE BUT DECENT!"],low_score:["FLAWED LOGIC!","POOR SCIENCE!","AMATEUR WORK!"]},2:{henchman_positive:["CORRUPTED CREATURES!","NATURAL MINIONS!","ANIMAL ARMY!"],henchman_neutral:["BEASTS OF BURDEN!","EXPENDABLE WILDLIFE!"],crime_neutral:["ENVIRONMENTAL CRIME!","ECOLOGICAL DAMAGE!"],gear_neutral:["TOXIC TOOLS!","POLLUTION DEVICE!"],location_positive:["WASTELAND PERFECTION!","RUINED NATURE!","ECOLOGICAL DISASTER!"],high_score:["MAXIMUM DEVASTATION!","BEAUTIFUL DESTRUCTION!","NATURE RUINED!"],medium_score:["ACCEPTABLE POLLUTION!","DECENT DAMAGE!"],low_score:["TOO CLEAN!","WEAK IMPACT!","BARELY A SCRATCH!"]}};function lt(n,t,e){const a=$[n],s=dt[n];if(!s)return null;let i=[];const r=a.preferences.includes(t);if(e>=8?i=s.high_score||[]:e<=3?i=s.low_score||[]:e>=4&&e<=7&&(i=s.medium_score||[]),i.length===0){const h=r?"positive":"neutral",p=`${t.toLowerCase()}_${h}`;if(i=s[p]||[],i.length===0){const g=Object.keys(s).filter(E=>E.startsWith(t.toLowerCase()));if(g.length>0){const E=g[Math.floor(Math.random()*g.length)];i=s[E]||[]}}}if(i.length===0){const h=Object.keys(s);if(h.length>0){const p=h[Math.floor(Math.random()*h.length)];i=s[p]||[]}}if(i.length===0)return null;const o=i[Math.floor(Math.random()*i.length)];let u=m.NEUTRAL;return e>=8||r?u=m.POSITIVE:e<=3&&(u=m.NEGATIVE),{text:o,type:u}}function ut(n,t){const e=Math.floor(Math.random()*3);return lt(e,n,t)}class ht{constructor(t){l(this,"gameEngine");l(this,"layout");l(this,"shopLayout");l(this,"devTools");l(this,"comicEffect");l(this,"scoreCutscene");l(this,"titleScreen");l(this,"isInitialized",!1);l(this,"slotLimit",3);try{this.gameEngine=t??new We,this.layout=new tt,this.shopLayout=new at(this.gameEngine),this.devTools=new it(this.gameEngine),this.comicEffect=new rt,this.scoreCutscene=new nt,this.titleScreen=new ct(()=>{this.hideTitleScreen()}),this.initializeApp(),this.setupEventListeners(),this.setupShopListeners(),this.setupDevToolsListeners(),this.layout.getHeader().setupDemandBanner(),this.updateDisplay(),this.showWelcomeMessage(),this.isInitialized=!0}catch(e){console.error("Failed to initialize app:",e),this.handleInitializationError()}}initializeApp(){document.body.appendChild(this.layout.getElement()),document.body.appendChild(this.shopLayout.getElement()),this.shopLayout.getElement().style.display="none",document.body.appendChild(this.devTools.getElement()),document.body.appendChild(this.titleScreen.getElement()),this.loadStyles()}loadStyles(){}setupShopListeners(){this.shopLayout.onExit(()=>{this.exitShop()})}setupDevToolsListeners(){this.devTools.onStateChange(()=>{this.updateDisplay()})}setupEventListeners(){this.layout.getGameArea().getHandArea().setOnCardClick(t=>{this.playCard(t)}),this.layout.getGameArea().getPlayArea().setOnCardClick(t=>{this.unplayCard(t)}),this.layout.getControls().setOnEndTurn(()=>{this.endTurn()}),this.layout.getControls().setOnNextRound(()=>{this.gameEngine.getState().gamePhase==="game_end"?this.handleGameOver():this.startNextRound()}),this.gameEngine.on(t=>{t.type==="slots_unlocked"&&this.layout.getControls().showMessage(`🎉 NEW SLOT UNLOCKED! You can now play ${t.totalSlots} schemes per round!`,"success")})}syncSlotLimit(){const t=this.gameEngine.getAvailableSlotCount();return this.slotLimit=t,t}getSlotLimit(){return this.slotLimit}updateDisplay(){console.time("[Performance] getState");const t=this.gameEngine.getState();if(console.timeEnd("[Performance] getState"),t.gamePhase===v.SHOP){this.layout.getElement().style.display="none",this.shopLayout.getElement().style.display="flex",this.shopLayout.render();return}if(t.gamePhase===v.CHECKPOINT){this.gameEngine.enterShop(),this.updateDisplay();return}this.layout.getElement().style.display="flex",this.shopLayout.getElement().style.display="none";const e=this.syncSlotLimit();this.layout.getHeader().updateRound(t.round,t.checkpoint),this.layout.getHeader().updateScore(t.score,t.cumulativeScore,t.targetScore),this.layout.getHeader().updateCurrency(t.currency),console.time("[Performance] getActiveBuffs");const a=this.gameEngine.getActiveBuffs();console.timeEnd("[Performance] getActiveBuffs"),console.time("[Performance] updateHand"),this.layout.getGameArea().getHandArea().updateHand(t.hand),console.timeEnd("[Performance] updateHand"),console.time("[Performance] updatePlayedCards"),this.layout.getGameArea().getPlayArea().updatePlayedCards(t.playedCards,a,t.cardSlots),console.timeEnd("[Performance] updatePlayedCards"),this.layout.getControls().updateButtonStates(t.gamePhase,t.playedCards.length,e);const s=this.gameEngine.getActiveModifier();s?this.layout.getHeader().showModifier(s):this.layout.getHeader().hideModifier()}playCard(t){const e=this.syncSlotLimit(),a=this.gameEngine.getPlayedCards();if(a.length>=e){this.layout.getControls().showMessage(`You can only play ${e} cards right now.`,"error");return}if(this.gameEngine.playCard(t.id,a.length)){const i=window.innerWidth/2,r=window.innerHeight/2;this.comicEffect.showForCardType(t.type,i,r);const o=ut(t.type,t.baseScore);o&&this.layout.getHeader().showReaction(o),this.updateDisplay();const h=this.getSlotLimit()-this.gameEngine.getPlayedCards().length;h>0?this.layout.getControls().showMessage(`Played ${t.name}! ${h} cards remaining.`,"success"):this.layout.getControls().showMessage(`Played ${t.name}! Ready to end turn.`,"success")}else this.layout.getControls().showMessage("Cannot play that card!","error")}unplayCard(t){this.gameEngine.unplayCard(t.id)?(this.updateDisplay(),this.layout.getControls().showMessage(`Returned ${t.name} to hand.`,"info")):this.layout.getControls().showMessage("Cannot return that card!","error")}endTurn(){try{console.time("[Performance] endTurn"),console.time("[Performance] gameEngine.endTurn");const t=this.gameEngine.endTurn();console.timeEnd("[Performance] gameEngine.endTurn");const a=this.gameEngine.getPlayedCards().map(s=>{var i,r,o,u,h,p;return{card:s.card,baseScore:((i=s.scoring)==null?void 0:i.baseScore)||s.card.baseScore,bonusScore:(((r=s.scoring)==null?void 0:r.finalScore)||0)-(((o=s.scoring)==null?void 0:o.baseScore)||s.card.baseScore),totalScore:((u=s.scoring)==null?void 0:u.finalScore)||s.card.baseScore,synergies:((p=(h=s.scoring)==null?void 0:h.buffsReceived)==null?void 0:p.map(g=>g.description))||[]}});this.scoreCutscene.play(a,t.score,()=>{console.time("[Performance] updateDisplay"),this.updateDisplay(),console.timeEnd("[Performance] updateDisplay"),console.timeEnd("[Performance] endTurn");const s=this.gameEngine.getState();if(s.gamePhase==="checkpoint")this.layout.getControls().showMessage(`Checkpoint ${s.checkpoint} reached! Score: ${s.cumulativeScore}/${s.targetScore}. Welcome to the shop!`,"success");else if(s.gamePhase==="game_end")this.layout.getControls().showMessage(`Game Over! Failed to reach ${s.targetScore} by round ${s.checkpoint}. Score: ${s.cumulativeScore}. Starting over...`,"error");else{const i=t.synergiesActivated.length>0?` Synergies: ${t.synergiesActivated.join(", ")}`:"";this.layout.getControls().showMessage(`Round ${s.round} complete! Scored ${t.score} points.${i} Total: ${s.cumulativeScore}/${s.targetScore}`,"info")}})}catch{this.layout.getControls().showMessage("Cannot end turn right now!","error")}}startNextRound(){this.gameEngine.startNextRound(),this.updateDisplay();const t=this.gameEngine.getState();this.layout.getControls().showMessage(`Round ${t.round} started! Checkpoint at round ${t.checkpoint}. Total: ${t.cumulativeScore}/${t.targetScore}`,"info")}exitShop(){this.gameEngine.exitShop(),this.startNextRound();const t=this.gameEngine.getState(),e=this.gameEngine.getPlayerDeck().length;this.layout.getControls().showMessage(`Back to the Council! New target: ${t.targetScore}. Deck size: ${e} schemes`,"success")}handleGameOver(){this.gameEngine.restartGame(),this.updateDisplay(),this.showWelcomeMessage()}showWelcomeMessage(){const t=this.gameEngine.getTargetScore(),e=this.gameEngine.getCheckpoint(),a=this.syncSlotLimit();this.layout.getControls().showMessage(`Welcome! Reach ${t} points by round ${e}. Play up to ${a} cards per round from your hand of 6!`,"info")}hideTitleScreen(){this.titleScreen.getElement().style.display="none"}getGameEngine(){return this.gameEngine}getLayout(){return this.layout}isReady(){return this.isInitialized}destroy(){try{this.layout&&this.layout.getElement().remove(),this.isInitialized=!1}catch(t){console.error("Error during app cleanup:",t)}}handleInitializationError(){new ot({title:"Failed to Load Game",message:"There was an error initializing the game. Please refresh the page to try again.",showReloadButton:!0}).show()}}document.addEventListener("DOMContentLoaded",()=>{const n=new ht;typeof window<"u"&&(window.gameApp=n)});
